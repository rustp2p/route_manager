/* automatically generated by rust-bindgen 0.71.1 */

pub const BSD: u32 = 199506;
pub const BSD4_3: u32 = 1;
pub const BSD4_4: u32 = 1;
pub const __FreeBSD_version: u32 = 1303001;
pub const __GNUCLIKE_ASM: u32 = 3;
pub const __GNUCLIKE___TYPEOF: u32 = 1;
pub const __GNUCLIKE___OFFSETOF: u32 = 1;
pub const __GNUCLIKE___SECTION: u32 = 1;
pub const __GNUCLIKE_CTOR_SECTION_HANDLING: u32 = 1;
pub const __GNUCLIKE_BUILTIN_CONSTANT_P: u32 = 1;
pub const __GNUCLIKE_BUILTIN_VARARGS: u32 = 1;
pub const __GNUCLIKE_BUILTIN_STDARG: u32 = 1;
pub const __GNUCLIKE_BUILTIN_VAALIST: u32 = 1;
pub const __GNUC_VA_LIST_COMPATIBILITY: u32 = 1;
pub const __GNUCLIKE_BUILTIN_NEXT_ARG: u32 = 1;
pub const __GNUCLIKE_BUILTIN_MEMCPY: u32 = 1;
pub const __CC_SUPPORTS_INLINE: u32 = 1;
pub const __CC_SUPPORTS___INLINE: u32 = 1;
pub const __CC_SUPPORTS___INLINE__: u32 = 1;
pub const __CC_SUPPORTS___FUNC__: u32 = 1;
pub const __CC_SUPPORTS_WARNING: u32 = 1;
pub const __CC_SUPPORTS_VARADIC_XXX: u32 = 1;
pub const __CC_SUPPORTS_DYNAMIC_ARRAY_INIT: u32 = 1;
pub const __POSIX_VISIBLE: u32 = 200809;
pub const __XSI_VISIBLE: u32 = 700;
pub const __BSD_VISIBLE: u32 = 1;
pub const __ISO_C_VISIBLE: u32 = 2011;
pub const __EXT1_VISIBLE: u32 = 1;
pub const __CHAR_BIT: u32 = 8;
pub const __SCHAR_MAX: u32 = 127;
pub const __SCHAR_MIN: i32 = -128;
pub const __UCHAR_MAX: u32 = 255;
pub const __USHRT_MAX: u32 = 65535;
pub const __SHRT_MAX: u32 = 32767;
pub const __SHRT_MIN: i32 = -32768;
pub const __UINT_MAX: u32 = 4294967295;
pub const __INT_MAX: u32 = 2147483647;
pub const __INT_MIN: i32 = -2147483648;
pub const __ULONG_MAX: i32 = -1;
pub const __LONG_MAX: u64 = 9223372036854775807;
pub const __LONG_MIN: i64 = -9223372036854775808;
pub const __ULLONG_MAX: i32 = -1;
pub const __LLONG_MAX: u64 = 9223372036854775807;
pub const __LLONG_MIN: i64 = -9223372036854775808;
pub const __SSIZE_MAX: u64 = 9223372036854775807;
pub const __SIZE_T_MAX: i32 = -1;
pub const __OFF_MAX: u64 = 9223372036854775807;
pub const __OFF_MIN: i64 = -9223372036854775808;
pub const __UQUAD_MAX: i32 = -1;
pub const __QUAD_MAX: u64 = 9223372036854775807;
pub const __QUAD_MIN: i64 = -9223372036854775808;
pub const __LONG_BIT: u32 = 64;
pub const __WORD_BIT: u32 = 32;
pub const __MINSIGSTKSZ: u32 = 2048;
pub const __WCHAR_MIN: i32 = -2147483648;
pub const __WCHAR_MAX: u32 = 2147483647;
pub const _QUAD_HIGHWORD: u32 = 1;
pub const _QUAD_LOWWORD: u32 = 0;
pub const _SIG_WORDS: u32 = 4;
pub const _SIG_MAXSIG: u32 = 128;
pub const FD_SETSIZE: u32 = 1024;
pub const ARG_MAX: u32 = 524288;
pub const CHILD_MAX: u32 = 40;
pub const MAX_CANON: u32 = 255;
pub const MAX_INPUT: u32 = 255;
pub const NAME_MAX: u32 = 255;
pub const NGROUPS_MAX: u32 = 1023;
pub const OPEN_MAX: u32 = 64;
pub const PATH_MAX: u32 = 1024;
pub const PIPE_BUF: u32 = 512;
pub const IOV_MAX: u32 = 1024;
pub const MAXCOMLEN: u32 = 19;
pub const MAXINTERP: u32 = 1024;
pub const MAXLOGNAME: u32 = 33;
pub const MAXUPRC: u32 = 40;
pub const NCARGS: u32 = 524288;
pub const NGROUPS: u32 = 1024;
pub const NOFILE: u32 = 64;
pub const NOGROUP: u32 = 65535;
pub const MAXHOSTNAMELEN: u32 = 256;
pub const SPECNAMELEN: u32 = 255;
pub const _X86_SIGNAL_H: u32 = 1;
pub const SIGHUP: u32 = 1;
pub const SIGINT: u32 = 2;
pub const SIGQUIT: u32 = 3;
pub const SIGILL: u32 = 4;
pub const SIGTRAP: u32 = 5;
pub const SIGABRT: u32 = 6;
pub const SIGIOT: u32 = 6;
pub const SIGEMT: u32 = 7;
pub const SIGFPE: u32 = 8;
pub const SIGKILL: u32 = 9;
pub const SIGBUS: u32 = 10;
pub const SIGSEGV: u32 = 11;
pub const SIGSYS: u32 = 12;
pub const SIGPIPE: u32 = 13;
pub const SIGALRM: u32 = 14;
pub const SIGTERM: u32 = 15;
pub const SIGURG: u32 = 16;
pub const SIGSTOP: u32 = 17;
pub const SIGTSTP: u32 = 18;
pub const SIGCONT: u32 = 19;
pub const SIGCHLD: u32 = 20;
pub const SIGTTIN: u32 = 21;
pub const SIGTTOU: u32 = 22;
pub const SIGIO: u32 = 23;
pub const SIGXCPU: u32 = 24;
pub const SIGXFSZ: u32 = 25;
pub const SIGVTALRM: u32 = 26;
pub const SIGPROF: u32 = 27;
pub const SIGWINCH: u32 = 28;
pub const SIGINFO: u32 = 29;
pub const SIGUSR1: u32 = 30;
pub const SIGUSR2: u32 = 31;
pub const SIGTHR: u32 = 32;
pub const SIGLWP: u32 = 32;
pub const SIGLIBRT: u32 = 33;
pub const SIGRTMIN: u32 = 65;
pub const SIGRTMAX: u32 = 126;
pub const SIGEV_NONE: u32 = 0;
pub const SIGEV_SIGNAL: u32 = 1;
pub const SIGEV_THREAD: u32 = 2;
pub const SIGEV_KEVENT: u32 = 3;
pub const SIGEV_THREAD_ID: u32 = 4;
pub const ILL_ILLOPC: u32 = 1;
pub const ILL_ILLOPN: u32 = 2;
pub const ILL_ILLADR: u32 = 3;
pub const ILL_ILLTRP: u32 = 4;
pub const ILL_PRVOPC: u32 = 5;
pub const ILL_PRVREG: u32 = 6;
pub const ILL_COPROC: u32 = 7;
pub const ILL_BADSTK: u32 = 8;
pub const BUS_ADRALN: u32 = 1;
pub const BUS_ADRERR: u32 = 2;
pub const BUS_OBJERR: u32 = 3;
pub const BUS_OOMERR: u32 = 100;
pub const SEGV_MAPERR: u32 = 1;
pub const SEGV_ACCERR: u32 = 2;
pub const SEGV_PKUERR: u32 = 100;
pub const FPE_INTOVF: u32 = 1;
pub const FPE_INTDIV: u32 = 2;
pub const FPE_FLTDIV: u32 = 3;
pub const FPE_FLTOVF: u32 = 4;
pub const FPE_FLTUND: u32 = 5;
pub const FPE_FLTRES: u32 = 6;
pub const FPE_FLTINV: u32 = 7;
pub const FPE_FLTSUB: u32 = 8;
pub const FPE_FLTIDO: u32 = 9;
pub const TRAP_BRKPT: u32 = 1;
pub const TRAP_TRACE: u32 = 2;
pub const TRAP_DTRACE: u32 = 3;
pub const TRAP_CAP: u32 = 4;
pub const CLD_EXITED: u32 = 1;
pub const CLD_KILLED: u32 = 2;
pub const CLD_DUMPED: u32 = 3;
pub const CLD_TRAPPED: u32 = 4;
pub const CLD_STOPPED: u32 = 5;
pub const CLD_CONTINUED: u32 = 6;
pub const POLL_IN: u32 = 1;
pub const POLL_OUT: u32 = 2;
pub const POLL_MSG: u32 = 3;
pub const POLL_ERR: u32 = 4;
pub const POLL_PRI: u32 = 5;
pub const POLL_HUP: u32 = 6;
pub const SA_NOCLDSTOP: u32 = 8;
pub const SA_ONSTACK: u32 = 1;
pub const SA_RESTART: u32 = 2;
pub const SA_RESETHAND: u32 = 4;
pub const SA_NODEFER: u32 = 16;
pub const SA_NOCLDWAIT: u32 = 32;
pub const SA_SIGINFO: u32 = 64;
pub const NSIG: u32 = 32;
pub const SI_NOINFO: u32 = 0;
pub const SI_USER: u32 = 65537;
pub const SI_QUEUE: u32 = 65538;
pub const SI_TIMER: u32 = 65539;
pub const SI_ASYNCIO: u32 = 65540;
pub const SI_MESGQ: u32 = 65541;
pub const SI_KERNEL: u32 = 65542;
pub const SI_LWP: u32 = 65543;
pub const SI_UNDEFINED: u32 = 0;
pub const SS_ONSTACK: u32 = 1;
pub const SS_DISABLE: u32 = 4;
pub const MINSIGSTKSZ: u32 = 2048;
pub const SIGSTKSZ: u32 = 34816;
pub const SV_ONSTACK: u32 = 1;
pub const SV_INTERRUPT: u32 = 2;
pub const SV_RESETHAND: u32 = 4;
pub const SV_NODEFER: u32 = 16;
pub const SV_NOCLDSTOP: u32 = 8;
pub const SV_SIGINFO: u32 = 64;
pub const SIG_BLOCK: u32 = 1;
pub const SIG_UNBLOCK: u32 = 2;
pub const SIG_SETMASK: u32 = 3;
pub const MACHINE: &[u8; 6] = b"amd64\0";
pub const MACHINE_ARCH: &[u8; 6] = b"amd64\0";
pub const MACHINE_ARCH32: &[u8; 5] = b"i386\0";
pub const MAXCPU: u32 = 1;
pub const MAXMEMDOM: u32 = 8;
pub const CACHE_LINE_SHIFT: u32 = 6;
pub const CACHE_LINE_SIZE: u32 = 64;
pub const NPTEPGSHIFT: u32 = 9;
pub const PAGE_SHIFT: u32 = 12;
pub const PAGE_SIZE: u32 = 4096;
pub const PAGE_MASK: u32 = 4095;
pub const NPDEPGSHIFT: u32 = 9;
pub const PDRSHIFT: u32 = 21;
pub const NBPDR: u32 = 2097152;
pub const PDRMASK: u32 = 2097151;
pub const NPDPEPGSHIFT: u32 = 9;
pub const PDPSHIFT: u32 = 30;
pub const NBPDP: u32 = 1073741824;
pub const PDPMASK: u32 = 1073741823;
pub const NPML4EPGSHIFT: u32 = 9;
pub const PML4SHIFT: u32 = 39;
pub const NBPML4: u64 = 549755813888;
pub const PML4MASK: u64 = 549755813887;
pub const NPML5EPGSHIFT: u32 = 9;
pub const PML5SHIFT: u32 = 48;
pub const NBPML5: u64 = 281474976710656;
pub const PML5MASK: u64 = 281474976710655;
pub const MAXPAGESIZES: u32 = 3;
pub const IOPAGES: u32 = 2;
pub const IOPERM_BITMAP_SIZE: u32 = 8193;
pub const KSTACK_PAGES: u32 = 4;
pub const KSTACK_GUARD_PAGES: u32 = 1;
pub const CHAR_BIT: u32 = 8;
pub const SCHAR_MAX: u32 = 127;
pub const SCHAR_MIN: i32 = -128;
pub const UCHAR_MAX: u32 = 255;
pub const CHAR_MAX: u32 = 127;
pub const CHAR_MIN: i32 = -128;
pub const USHRT_MAX: u32 = 65535;
pub const SHRT_MAX: u32 = 32767;
pub const SHRT_MIN: i32 = -32768;
pub const UINT_MAX: u32 = 4294967295;
pub const INT_MAX: u32 = 2147483647;
pub const INT_MIN: i32 = -2147483648;
pub const ULONG_MAX: i32 = -1;
pub const LONG_MAX: u64 = 9223372036854775807;
pub const LONG_MIN: i64 = -9223372036854775808;
pub const ULLONG_MAX: i32 = -1;
pub const LLONG_MAX: u64 = 9223372036854775807;
pub const LLONG_MIN: i64 = -9223372036854775808;
pub const SSIZE_MAX: u64 = 9223372036854775807;
pub const SIZE_T_MAX: i32 = -1;
pub const OFF_MAX: u64 = 9223372036854775807;
pub const OFF_MIN: i64 = -9223372036854775808;
pub const GID_MAX: u32 = 4294967295;
pub const UID_MAX: u32 = 4294967295;
pub const UQUAD_MAX: i32 = -1;
pub const QUAD_MAX: u64 = 9223372036854775807;
pub const QUAD_MIN: i64 = -9223372036854775808;
pub const LONG_BIT: u32 = 64;
pub const WORD_BIT: u32 = 32;
pub const MQ_PRIO_MAX: u32 = 64;
pub const DEV_BSHIFT: u32 = 9;
pub const DEV_BSIZE: u32 = 512;
pub const BLKDEV_IOSIZE: u32 = 4096;
pub const DFLTPHYS: u32 = 65536;
pub const MAXPHYS: u32 = 1048576;
pub const MAXDUMPPGS: u32 = 16;
pub const MSIZE: u32 = 256;
pub const MCLSHIFT: u32 = 11;
pub const MCLBYTES: u32 = 2048;
pub const MJUMPAGESIZE: u32 = 4096;
pub const MJUM9BYTES: u32 = 9216;
pub const MJUM16BYTES: u32 = 16384;
pub const PRIMASK: u32 = 255;
pub const PCATCH: u32 = 256;
pub const PDROP: u32 = 512;
pub const NZERO: u32 = 0;
pub const NBBY: u32 = 8;
pub const CMASK: u32 = 18;
pub const MAXBSIZE: u32 = 65536;
pub const MAXBCACHEBUF: u32 = 65536;
pub const BKVASIZE: u32 = 16384;
pub const BKVAMASK: u32 = 16383;
pub const MAXPATHLEN: u32 = 1024;
pub const MAXSYMLINKS: u32 = 32;
pub const FSHIFT: u32 = 11;
pub const FSCALE: u32 = 2048;
pub const CTL_MAXNAME: u32 = 24;
pub const CTLTYPE: u32 = 15;
pub const CTLTYPE_NODE: u32 = 1;
pub const CTLTYPE_INT: u32 = 2;
pub const CTLTYPE_STRING: u32 = 3;
pub const CTLTYPE_S64: u32 = 4;
pub const CTLTYPE_OPAQUE: u32 = 5;
pub const CTLTYPE_STRUCT: u32 = 5;
pub const CTLTYPE_UINT: u32 = 6;
pub const CTLTYPE_LONG: u32 = 7;
pub const CTLTYPE_ULONG: u32 = 8;
pub const CTLTYPE_U64: u32 = 9;
pub const CTLTYPE_U8: u32 = 10;
pub const CTLTYPE_U16: u32 = 11;
pub const CTLTYPE_S8: u32 = 12;
pub const CTLTYPE_S16: u32 = 13;
pub const CTLTYPE_S32: u32 = 14;
pub const CTLTYPE_U32: u32 = 15;
pub const CTLFLAG_RD: u32 = 2147483648;
pub const CTLFLAG_WR: u32 = 1073741824;
pub const CTLFLAG_RW: u32 = 3221225472;
pub const CTLFLAG_DORMANT: u32 = 536870912;
pub const CTLFLAG_ANYBODY: u32 = 268435456;
pub const CTLFLAG_SECURE: u32 = 134217728;
pub const CTLFLAG_PRISON: u32 = 67108864;
pub const CTLFLAG_DYN: u32 = 33554432;
pub const CTLFLAG_SKIP: u32 = 16777216;
pub const CTLMASK_SECURE: u32 = 15728640;
pub const CTLFLAG_TUN: u32 = 524288;
pub const CTLFLAG_RDTUN: u32 = 2148007936;
pub const CTLFLAG_RWTUN: u32 = 3221749760;
pub const CTLFLAG_MPSAFE: u32 = 262144;
pub const CTLFLAG_VNET: u32 = 131072;
pub const CTLFLAG_DYING: u32 = 65536;
pub const CTLFLAG_CAPRD: u32 = 32768;
pub const CTLFLAG_CAPWR: u32 = 16384;
pub const CTLFLAG_STATS: u32 = 8192;
pub const CTLFLAG_NOFETCH: u32 = 4096;
pub const CTLFLAG_CAPRW: u32 = 49152;
pub const CTLFLAG_NEEDGIANT: u32 = 2048;
pub const CTLSHIFT_SECURE: u32 = 20;
pub const CTLFLAG_SECURE1: u32 = 134217728;
pub const CTLFLAG_SECURE2: u32 = 135266304;
pub const CTLFLAG_SECURE3: u32 = 136314880;
pub const OID_AUTO: i32 = -1;
pub const CTL_AUTO_START: u32 = 256;
pub const CTL_SYSCTL: u32 = 0;
pub const CTL_KERN: u32 = 1;
pub const CTL_VM: u32 = 2;
pub const CTL_VFS: u32 = 3;
pub const CTL_NET: u32 = 4;
pub const CTL_DEBUG: u32 = 5;
pub const CTL_HW: u32 = 6;
pub const CTL_MACHDEP: u32 = 7;
pub const CTL_USER: u32 = 8;
pub const CTL_P1003_1B: u32 = 9;
pub const CTL_SYSCTL_DEBUG: u32 = 0;
pub const CTL_SYSCTL_NAME: u32 = 1;
pub const CTL_SYSCTL_NEXT: u32 = 2;
pub const CTL_SYSCTL_NAME2OID: u32 = 3;
pub const CTL_SYSCTL_OIDFMT: u32 = 4;
pub const CTL_SYSCTL_OIDDESCR: u32 = 5;
pub const CTL_SYSCTL_OIDLABEL: u32 = 6;
pub const CTL_SYSCTL_NEXTNOSKIP: u32 = 7;
pub const KERN_OSTYPE: u32 = 1;
pub const KERN_OSRELEASE: u32 = 2;
pub const KERN_OSREV: u32 = 3;
pub const KERN_VERSION: u32 = 4;
pub const KERN_MAXVNODES: u32 = 5;
pub const KERN_MAXPROC: u32 = 6;
pub const KERN_MAXFILES: u32 = 7;
pub const KERN_ARGMAX: u32 = 8;
pub const KERN_SECURELVL: u32 = 9;
pub const KERN_HOSTNAME: u32 = 10;
pub const KERN_HOSTID: u32 = 11;
pub const KERN_CLOCKRATE: u32 = 12;
pub const KERN_VNODE: u32 = 13;
pub const KERN_PROC: u32 = 14;
pub const KERN_FILE: u32 = 15;
pub const KERN_PROF: u32 = 16;
pub const KERN_POSIX1: u32 = 17;
pub const KERN_NGROUPS: u32 = 18;
pub const KERN_JOB_CONTROL: u32 = 19;
pub const KERN_SAVED_IDS: u32 = 20;
pub const KERN_BOOTTIME: u32 = 21;
pub const KERN_NISDOMAINNAME: u32 = 22;
pub const KERN_UPDATEINTERVAL: u32 = 23;
pub const KERN_OSRELDATE: u32 = 24;
pub const KERN_NTP_PLL: u32 = 25;
pub const KERN_BOOTFILE: u32 = 26;
pub const KERN_MAXFILESPERPROC: u32 = 27;
pub const KERN_MAXPROCPERUID: u32 = 28;
pub const KERN_DUMPDEV: u32 = 29;
pub const KERN_IPC: u32 = 30;
pub const KERN_DUMMY: u32 = 31;
pub const KERN_PS_STRINGS: u32 = 32;
pub const KERN_USRSTACK: u32 = 33;
pub const KERN_LOGSIGEXIT: u32 = 34;
pub const KERN_IOV_MAX: u32 = 35;
pub const KERN_HOSTUUID: u32 = 36;
pub const KERN_ARND: u32 = 37;
pub const KERN_MAXPHYS: u32 = 38;
pub const KERN_LOCKF: u32 = 39;
pub const KERN_PROC_ALL: u32 = 0;
pub const KERN_PROC_PID: u32 = 1;
pub const KERN_PROC_PGRP: u32 = 2;
pub const KERN_PROC_SESSION: u32 = 3;
pub const KERN_PROC_TTY: u32 = 4;
pub const KERN_PROC_UID: u32 = 5;
pub const KERN_PROC_RUID: u32 = 6;
pub const KERN_PROC_ARGS: u32 = 7;
pub const KERN_PROC_PROC: u32 = 8;
pub const KERN_PROC_SV_NAME: u32 = 9;
pub const KERN_PROC_RGID: u32 = 10;
pub const KERN_PROC_GID: u32 = 11;
pub const KERN_PROC_PATHNAME: u32 = 12;
pub const KERN_PROC_OVMMAP: u32 = 13;
pub const KERN_PROC_OFILEDESC: u32 = 14;
pub const KERN_PROC_KSTACK: u32 = 15;
pub const KERN_PROC_INC_THREAD: u32 = 16;
pub const KERN_PROC_VMMAP: u32 = 32;
pub const KERN_PROC_FILEDESC: u32 = 33;
pub const KERN_PROC_GROUPS: u32 = 34;
pub const KERN_PROC_ENV: u32 = 35;
pub const KERN_PROC_AUXV: u32 = 36;
pub const KERN_PROC_RLIMIT: u32 = 37;
pub const KERN_PROC_PS_STRINGS: u32 = 38;
pub const KERN_PROC_UMASK: u32 = 39;
pub const KERN_PROC_OSREL: u32 = 40;
pub const KERN_PROC_SIGTRAMP: u32 = 41;
pub const KERN_PROC_CWD: u32 = 42;
pub const KERN_PROC_NFDS: u32 = 43;
pub const KERN_PROC_SIGFASTBLK: u32 = 44;
pub const KIPC_MAXSOCKBUF: u32 = 1;
pub const KIPC_SOCKBUF_WASTE: u32 = 2;
pub const KIPC_SOMAXCONN: u32 = 3;
pub const KIPC_MAX_LINKHDR: u32 = 4;
pub const KIPC_MAX_PROTOHDR: u32 = 5;
pub const KIPC_MAX_HDR: u32 = 6;
pub const KIPC_MAX_DATALEN: u32 = 7;
pub const HW_MACHINE: u32 = 1;
pub const HW_MODEL: u32 = 2;
pub const HW_NCPU: u32 = 3;
pub const HW_BYTEORDER: u32 = 4;
pub const HW_PHYSMEM: u32 = 5;
pub const HW_USERMEM: u32 = 6;
pub const HW_PAGESIZE: u32 = 7;
pub const HW_DISKNAMES: u32 = 8;
pub const HW_DISKSTATS: u32 = 9;
pub const HW_FLOATINGPT: u32 = 10;
pub const HW_MACHINE_ARCH: u32 = 11;
pub const HW_REALMEM: u32 = 12;
pub const USER_CS_PATH: u32 = 1;
pub const USER_BC_BASE_MAX: u32 = 2;
pub const USER_BC_DIM_MAX: u32 = 3;
pub const USER_BC_SCALE_MAX: u32 = 4;
pub const USER_BC_STRING_MAX: u32 = 5;
pub const USER_COLL_WEIGHTS_MAX: u32 = 6;
pub const USER_EXPR_NEST_MAX: u32 = 7;
pub const USER_LINE_MAX: u32 = 8;
pub const USER_RE_DUP_MAX: u32 = 9;
pub const USER_POSIX2_VERSION: u32 = 10;
pub const USER_POSIX2_C_BIND: u32 = 11;
pub const USER_POSIX2_C_DEV: u32 = 12;
pub const USER_POSIX2_CHAR_TERM: u32 = 13;
pub const USER_POSIX2_FORT_DEV: u32 = 14;
pub const USER_POSIX2_FORT_RUN: u32 = 15;
pub const USER_POSIX2_LOCALEDEF: u32 = 16;
pub const USER_POSIX2_SW_DEV: u32 = 17;
pub const USER_POSIX2_UPE: u32 = 18;
pub const USER_STREAM_MAX: u32 = 19;
pub const USER_TZNAME_MAX: u32 = 20;
pub const USER_LOCALBASE: u32 = 21;
pub const CTL_P1003_1B_ASYNCHRONOUS_IO: u32 = 1;
pub const CTL_P1003_1B_MAPPED_FILES: u32 = 2;
pub const CTL_P1003_1B_MEMLOCK: u32 = 3;
pub const CTL_P1003_1B_MEMLOCK_RANGE: u32 = 4;
pub const CTL_P1003_1B_MEMORY_PROTECTION: u32 = 5;
pub const CTL_P1003_1B_MESSAGE_PASSING: u32 = 6;
pub const CTL_P1003_1B_PRIORITIZED_IO: u32 = 7;
pub const CTL_P1003_1B_PRIORITY_SCHEDULING: u32 = 8;
pub const CTL_P1003_1B_REALTIME_SIGNALS: u32 = 9;
pub const CTL_P1003_1B_SEMAPHORES: u32 = 10;
pub const CTL_P1003_1B_FSYNC: u32 = 11;
pub const CTL_P1003_1B_SHARED_MEMORY_OBJECTS: u32 = 12;
pub const CTL_P1003_1B_SYNCHRONIZED_IO: u32 = 13;
pub const CTL_P1003_1B_TIMERS: u32 = 14;
pub const CTL_P1003_1B_AIO_LISTIO_MAX: u32 = 15;
pub const CTL_P1003_1B_AIO_MAX: u32 = 16;
pub const CTL_P1003_1B_AIO_PRIO_DELTA_MAX: u32 = 17;
pub const CTL_P1003_1B_DELAYTIMER_MAX: u32 = 18;
pub const CTL_P1003_1B_MQ_OPEN_MAX: u32 = 19;
pub const CTL_P1003_1B_PAGESIZE: u32 = 20;
pub const CTL_P1003_1B_RTSIG_MAX: u32 = 21;
pub const CTL_P1003_1B_SEM_NSEMS_MAX: u32 = 22;
pub const CTL_P1003_1B_SEM_VALUE_MAX: u32 = 23;
pub const CTL_P1003_1B_SIGQUEUE_MAX: u32 = 24;
pub const CTL_P1003_1B_TIMER_MAX: u32 = 25;
pub const SOCK_STREAM: u32 = 1;
pub const SOCK_DGRAM: u32 = 2;
pub const SOCK_RAW: u32 = 3;
pub const SOCK_RDM: u32 = 4;
pub const SOCK_SEQPACKET: u32 = 5;
pub const SOCK_CLOEXEC: u32 = 268435456;
pub const SOCK_NONBLOCK: u32 = 536870912;
pub const SO_DEBUG: u32 = 1;
pub const SO_ACCEPTCONN: u32 = 2;
pub const SO_REUSEADDR: u32 = 4;
pub const SO_KEEPALIVE: u32 = 8;
pub const SO_DONTROUTE: u32 = 16;
pub const SO_BROADCAST: u32 = 32;
pub const SO_USELOOPBACK: u32 = 64;
pub const SO_LINGER: u32 = 128;
pub const SO_OOBINLINE: u32 = 256;
pub const SO_REUSEPORT: u32 = 512;
pub const SO_TIMESTAMP: u32 = 1024;
pub const SO_NOSIGPIPE: u32 = 2048;
pub const SO_ACCEPTFILTER: u32 = 4096;
pub const SO_BINTIME: u32 = 8192;
pub const SO_NO_OFFLOAD: u32 = 16384;
pub const SO_NO_DDP: u32 = 32768;
pub const SO_REUSEPORT_LB: u32 = 65536;
pub const SO_RERROR: u32 = 131072;
pub const SO_SNDBUF: u32 = 4097;
pub const SO_RCVBUF: u32 = 4098;
pub const SO_SNDLOWAT: u32 = 4099;
pub const SO_RCVLOWAT: u32 = 4100;
pub const SO_SNDTIMEO: u32 = 4101;
pub const SO_RCVTIMEO: u32 = 4102;
pub const SO_ERROR: u32 = 4103;
pub const SO_TYPE: u32 = 4104;
pub const SO_LABEL: u32 = 4105;
pub const SO_PEERLABEL: u32 = 4112;
pub const SO_LISTENQLIMIT: u32 = 4113;
pub const SO_LISTENQLEN: u32 = 4114;
pub const SO_LISTENINCQLEN: u32 = 4115;
pub const SO_SETFIB: u32 = 4116;
pub const SO_USER_COOKIE: u32 = 4117;
pub const SO_PROTOCOL: u32 = 4118;
pub const SO_PROTOTYPE: u32 = 4118;
pub const SO_TS_CLOCK: u32 = 4119;
pub const SO_MAX_PACING_RATE: u32 = 4120;
pub const SO_DOMAIN: u32 = 4121;
pub const SO_TS_REALTIME_MICRO: u32 = 0;
pub const SO_TS_BINTIME: u32 = 1;
pub const SO_TS_REALTIME: u32 = 2;
pub const SO_TS_MONOTONIC: u32 = 3;
pub const SO_TS_DEFAULT: u32 = 0;
pub const SO_TS_CLOCK_MAX: u32 = 3;
pub const SO_VENDOR: u32 = 2147483648;
pub const SOL_SOCKET: u32 = 65535;
pub const AF_UNSPEC: u32 = 0;
pub const AF_UNIX: u32 = 1;
pub const AF_INET: u32 = 2;
pub const AF_IMPLINK: u32 = 3;
pub const AF_PUP: u32 = 4;
pub const AF_CHAOS: u32 = 5;
pub const AF_NETBIOS: u32 = 6;
pub const AF_ISO: u32 = 7;
pub const AF_OSI: u32 = 7;
pub const AF_ECMA: u32 = 8;
pub const AF_DATAKIT: u32 = 9;
pub const AF_CCITT: u32 = 10;
pub const AF_SNA: u32 = 11;
pub const AF_DECnet: u32 = 12;
pub const AF_DLI: u32 = 13;
pub const AF_LAT: u32 = 14;
pub const AF_HYLINK: u32 = 15;
pub const AF_APPLETALK: u32 = 16;
pub const AF_ROUTE: u32 = 17;
pub const AF_LINK: u32 = 18;
pub const pseudo_AF_XTP: u32 = 19;
pub const AF_COIP: u32 = 20;
pub const AF_CNT: u32 = 21;
pub const pseudo_AF_RTIP: u32 = 22;
pub const AF_IPX: u32 = 23;
pub const AF_SIP: u32 = 24;
pub const pseudo_AF_PIP: u32 = 25;
pub const AF_ISDN: u32 = 26;
pub const AF_E164: u32 = 26;
pub const pseudo_AF_KEY: u32 = 27;
pub const AF_INET6: u32 = 28;
pub const AF_NATM: u32 = 29;
pub const AF_ATM: u32 = 30;
pub const pseudo_AF_HDRCMPLT: u32 = 31;
pub const AF_NETGRAPH: u32 = 32;
pub const AF_SLOW: u32 = 33;
pub const AF_SCLUSTER: u32 = 34;
pub const AF_ARP: u32 = 35;
pub const AF_BLUETOOTH: u32 = 36;
pub const AF_IEEE80211: u32 = 37;
pub const AF_NETLINK: u32 = 38;
pub const AF_INET_SDP: u32 = 40;
pub const AF_INET6_SDP: u32 = 42;
pub const AF_HYPERV: u32 = 43;
pub const AF_MAX: u32 = 43;
pub const AF_VENDOR00: u32 = 39;
pub const AF_VENDOR01: u32 = 41;
pub const AF_VENDOR03: u32 = 45;
pub const AF_VENDOR04: u32 = 47;
pub const AF_VENDOR05: u32 = 49;
pub const AF_VENDOR06: u32 = 51;
pub const AF_VENDOR07: u32 = 53;
pub const AF_VENDOR08: u32 = 55;
pub const AF_VENDOR09: u32 = 57;
pub const AF_VENDOR10: u32 = 59;
pub const AF_VENDOR11: u32 = 61;
pub const AF_VENDOR12: u32 = 63;
pub const AF_VENDOR13: u32 = 65;
pub const AF_VENDOR14: u32 = 67;
pub const AF_VENDOR15: u32 = 69;
pub const AF_VENDOR16: u32 = 71;
pub const AF_VENDOR17: u32 = 73;
pub const AF_VENDOR18: u32 = 75;
pub const AF_VENDOR19: u32 = 77;
pub const AF_VENDOR20: u32 = 79;
pub const AF_VENDOR21: u32 = 81;
pub const AF_VENDOR22: u32 = 83;
pub const AF_VENDOR23: u32 = 85;
pub const AF_VENDOR24: u32 = 87;
pub const AF_VENDOR25: u32 = 89;
pub const AF_VENDOR26: u32 = 91;
pub const AF_VENDOR27: u32 = 93;
pub const AF_VENDOR28: u32 = 95;
pub const AF_VENDOR29: u32 = 97;
pub const AF_VENDOR30: u32 = 99;
pub const AF_VENDOR31: u32 = 101;
pub const AF_VENDOR32: u32 = 103;
pub const AF_VENDOR33: u32 = 105;
pub const AF_VENDOR34: u32 = 107;
pub const AF_VENDOR35: u32 = 109;
pub const AF_VENDOR36: u32 = 111;
pub const AF_VENDOR37: u32 = 113;
pub const AF_VENDOR38: u32 = 115;
pub const AF_VENDOR39: u32 = 117;
pub const AF_VENDOR40: u32 = 119;
pub const AF_VENDOR41: u32 = 121;
pub const AF_VENDOR42: u32 = 123;
pub const AF_VENDOR43: u32 = 125;
pub const AF_VENDOR44: u32 = 127;
pub const AF_VENDOR45: u32 = 129;
pub const AF_VENDOR46: u32 = 131;
pub const AF_VENDOR47: u32 = 133;
pub const SOCK_MAXADDRLEN: u32 = 255;
pub const _SS_MAXSIZE: u32 = 128;
pub const PF_UNSPEC: u32 = 0;
pub const PF_INET: u32 = 2;
pub const PF_IMPLINK: u32 = 3;
pub const PF_PUP: u32 = 4;
pub const PF_CHAOS: u32 = 5;
pub const PF_NETBIOS: u32 = 6;
pub const PF_ISO: u32 = 7;
pub const PF_OSI: u32 = 7;
pub const PF_ECMA: u32 = 8;
pub const PF_DATAKIT: u32 = 9;
pub const PF_CCITT: u32 = 10;
pub const PF_SNA: u32 = 11;
pub const PF_DECnet: u32 = 12;
pub const PF_DLI: u32 = 13;
pub const PF_LAT: u32 = 14;
pub const PF_HYLINK: u32 = 15;
pub const PF_APPLETALK: u32 = 16;
pub const PF_ROUTE: u32 = 17;
pub const PF_LINK: u32 = 18;
pub const PF_XTP: u32 = 19;
pub const PF_COIP: u32 = 20;
pub const PF_CNT: u32 = 21;
pub const PF_SIP: u32 = 24;
pub const PF_IPX: u32 = 23;
pub const PF_RTIP: u32 = 22;
pub const PF_PIP: u32 = 25;
pub const PF_ISDN: u32 = 26;
pub const PF_KEY: u32 = 27;
pub const PF_INET6: u32 = 28;
pub const PF_NATM: u32 = 29;
pub const PF_ATM: u32 = 30;
pub const PF_NETGRAPH: u32 = 32;
pub const PF_SLOW: u32 = 33;
pub const PF_SCLUSTER: u32 = 34;
pub const PF_ARP: u32 = 35;
pub const PF_BLUETOOTH: u32 = 36;
pub const PF_IEEE80211: u32 = 37;
pub const PF_NETLINK: u32 = 38;
pub const PF_INET_SDP: u32 = 40;
pub const PF_INET6_SDP: u32 = 42;
pub const PF_MAX: u32 = 43;
pub const NET_RT_DUMP: u32 = 1;
pub const NET_RT_FLAGS: u32 = 2;
pub const NET_RT_IFLIST: u32 = 3;
pub const NET_RT_IFMALIST: u32 = 4;
pub const NET_RT_IFLISTL: u32 = 5;
pub const NET_RT_NHOP: u32 = 6;
pub const NET_RT_NHGRP: u32 = 7;
pub const SOMAXCONN: u32 = 128;
pub const MSG_OOB: u32 = 1;
pub const MSG_PEEK: u32 = 2;
pub const MSG_DONTROUTE: u32 = 4;
pub const MSG_EOR: u32 = 8;
pub const MSG_TRUNC: u32 = 16;
pub const MSG_CTRUNC: u32 = 32;
pub const MSG_WAITALL: u32 = 64;
pub const MSG_DONTWAIT: u32 = 128;
pub const MSG_EOF: u32 = 256;
pub const MSG_NOTIFICATION: u32 = 8192;
pub const MSG_NBIO: u32 = 16384;
pub const MSG_COMPAT: u32 = 32768;
pub const MSG_NOSIGNAL: u32 = 131072;
pub const MSG_CMSG_CLOEXEC: u32 = 262144;
pub const MSG_WAITFORONE: u32 = 524288;
pub const CMGROUP_MAX: u32 = 16;
pub const SCM_RIGHTS: u32 = 1;
pub const SCM_TIMESTAMP: u32 = 2;
pub const SCM_CREDS: u32 = 3;
pub const SCM_BINTIME: u32 = 4;
pub const SCM_REALTIME: u32 = 5;
pub const SCM_MONOTONIC: u32 = 6;
pub const SCM_TIME_INFO: u32 = 7;
pub const SCM_CREDS2: u32 = 8;
pub const ST_INFO_HW: u32 = 1;
pub const ST_INFO_HW_HPREC: u32 = 2;
pub const SHUT_RD: u32 = 0;
pub const SHUT_WR: u32 = 1;
pub const SHUT_RDWR: u32 = 2;
pub const PRU_FLUSH_RD: u32 = 0;
pub const PRU_FLUSH_WR: u32 = 1;
pub const PRU_FLUSH_RDWR: u32 = 2;
pub const SF_NODISKIO: u32 = 1;
pub const SF_MNOWAIT: u32 = 2;
pub const SF_SYNC: u32 = 4;
pub const SF_USER_READAHEAD: u32 = 8;
pub const SF_NOCACHE: u32 = 16;
pub const IPPROTO_IP: u32 = 0;
pub const IPPROTO_ICMP: u32 = 1;
pub const IPPROTO_TCP: u32 = 6;
pub const IPPROTO_UDP: u32 = 17;
pub const IPPROTO_IPV6: u32 = 41;
pub const IPPROTO_RAW: u32 = 255;
pub const INET_ADDRSTRLEN: u32 = 16;
pub const IPPROTO_HOPOPTS: u32 = 0;
pub const IPPROTO_IGMP: u32 = 2;
pub const IPPROTO_GGP: u32 = 3;
pub const IPPROTO_IPV4: u32 = 4;
pub const IPPROTO_IPIP: u32 = 4;
pub const IPPROTO_ST: u32 = 7;
pub const IPPROTO_EGP: u32 = 8;
pub const IPPROTO_PIGP: u32 = 9;
pub const IPPROTO_RCCMON: u32 = 10;
pub const IPPROTO_NVPII: u32 = 11;
pub const IPPROTO_PUP: u32 = 12;
pub const IPPROTO_ARGUS: u32 = 13;
pub const IPPROTO_EMCON: u32 = 14;
pub const IPPROTO_XNET: u32 = 15;
pub const IPPROTO_CHAOS: u32 = 16;
pub const IPPROTO_MUX: u32 = 18;
pub const IPPROTO_MEAS: u32 = 19;
pub const IPPROTO_HMP: u32 = 20;
pub const IPPROTO_PRM: u32 = 21;
pub const IPPROTO_IDP: u32 = 22;
pub const IPPROTO_TRUNK1: u32 = 23;
pub const IPPROTO_TRUNK2: u32 = 24;
pub const IPPROTO_LEAF1: u32 = 25;
pub const IPPROTO_LEAF2: u32 = 26;
pub const IPPROTO_RDP: u32 = 27;
pub const IPPROTO_IRTP: u32 = 28;
pub const IPPROTO_TP: u32 = 29;
pub const IPPROTO_BLT: u32 = 30;
pub const IPPROTO_NSP: u32 = 31;
pub const IPPROTO_INP: u32 = 32;
pub const IPPROTO_DCCP: u32 = 33;
pub const IPPROTO_3PC: u32 = 34;
pub const IPPROTO_IDPR: u32 = 35;
pub const IPPROTO_XTP: u32 = 36;
pub const IPPROTO_DDP: u32 = 37;
pub const IPPROTO_CMTP: u32 = 38;
pub const IPPROTO_TPXX: u32 = 39;
pub const IPPROTO_IL: u32 = 40;
pub const IPPROTO_SDRP: u32 = 42;
pub const IPPROTO_ROUTING: u32 = 43;
pub const IPPROTO_FRAGMENT: u32 = 44;
pub const IPPROTO_IDRP: u32 = 45;
pub const IPPROTO_RSVP: u32 = 46;
pub const IPPROTO_GRE: u32 = 47;
pub const IPPROTO_MHRP: u32 = 48;
pub const IPPROTO_BHA: u32 = 49;
pub const IPPROTO_ESP: u32 = 50;
pub const IPPROTO_AH: u32 = 51;
pub const IPPROTO_INLSP: u32 = 52;
pub const IPPROTO_SWIPE: u32 = 53;
pub const IPPROTO_NHRP: u32 = 54;
pub const IPPROTO_MOBILE: u32 = 55;
pub const IPPROTO_TLSP: u32 = 56;
pub const IPPROTO_SKIP: u32 = 57;
pub const IPPROTO_ICMPV6: u32 = 58;
pub const IPPROTO_NONE: u32 = 59;
pub const IPPROTO_DSTOPTS: u32 = 60;
pub const IPPROTO_AHIP: u32 = 61;
pub const IPPROTO_CFTP: u32 = 62;
pub const IPPROTO_HELLO: u32 = 63;
pub const IPPROTO_SATEXPAK: u32 = 64;
pub const IPPROTO_KRYPTOLAN: u32 = 65;
pub const IPPROTO_RVD: u32 = 66;
pub const IPPROTO_IPPC: u32 = 67;
pub const IPPROTO_ADFS: u32 = 68;
pub const IPPROTO_SATMON: u32 = 69;
pub const IPPROTO_VISA: u32 = 70;
pub const IPPROTO_IPCV: u32 = 71;
pub const IPPROTO_CPNX: u32 = 72;
pub const IPPROTO_CPHB: u32 = 73;
pub const IPPROTO_WSN: u32 = 74;
pub const IPPROTO_PVP: u32 = 75;
pub const IPPROTO_BRSATMON: u32 = 76;
pub const IPPROTO_ND: u32 = 77;
pub const IPPROTO_WBMON: u32 = 78;
pub const IPPROTO_WBEXPAK: u32 = 79;
pub const IPPROTO_EON: u32 = 80;
pub const IPPROTO_VMTP: u32 = 81;
pub const IPPROTO_SVMTP: u32 = 82;
pub const IPPROTO_VINES: u32 = 83;
pub const IPPROTO_TTP: u32 = 84;
pub const IPPROTO_IGP: u32 = 85;
pub const IPPROTO_DGP: u32 = 86;
pub const IPPROTO_TCF: u32 = 87;
pub const IPPROTO_IGRP: u32 = 88;
pub const IPPROTO_OSPFIGP: u32 = 89;
pub const IPPROTO_SRPC: u32 = 90;
pub const IPPROTO_LARP: u32 = 91;
pub const IPPROTO_MTP: u32 = 92;
pub const IPPROTO_AX25: u32 = 93;
pub const IPPROTO_IPEIP: u32 = 94;
pub const IPPROTO_MICP: u32 = 95;
pub const IPPROTO_SCCSP: u32 = 96;
pub const IPPROTO_ETHERIP: u32 = 97;
pub const IPPROTO_ENCAP: u32 = 98;
pub const IPPROTO_APES: u32 = 99;
pub const IPPROTO_GMTP: u32 = 100;
pub const IPPROTO_IPCOMP: u32 = 108;
pub const IPPROTO_SCTP: u32 = 132;
pub const IPPROTO_MH: u32 = 135;
pub const IPPROTO_UDPLITE: u32 = 136;
pub const IPPROTO_HIP: u32 = 139;
pub const IPPROTO_SHIM6: u32 = 140;
pub const IPPROTO_PIM: u32 = 103;
pub const IPPROTO_CARP: u32 = 112;
pub const IPPROTO_PGM: u32 = 113;
pub const IPPROTO_MPLS: u32 = 137;
pub const IPPROTO_PFSYNC: u32 = 240;
pub const IPPROTO_RESERVED_253: u32 = 253;
pub const IPPROTO_RESERVED_254: u32 = 254;
pub const IPPROTO_OLD_DIVERT: u32 = 254;
pub const IPPROTO_MAX: u32 = 256;
pub const IPPROTO_DONE: u32 = 257;
pub const IPPROTO_DIVERT: u32 = 258;
pub const IPPROTO_SEND: u32 = 259;
pub const IPPROTO_SPACER: u32 = 32767;
pub const IPPORT_RESERVED: u32 = 1024;
pub const IPPORT_EPHEMERALFIRST: u32 = 10000;
pub const IPPORT_EPHEMERALLAST: u32 = 65535;
pub const IPPORT_HIFIRSTAUTO: u32 = 49152;
pub const IPPORT_HILASTAUTO: u32 = 65535;
pub const IPPORT_RESERVEDSTART: u32 = 600;
pub const IPPORT_MAX: u32 = 65535;
pub const IN_CLASSA_NET: u32 = 4278190080;
pub const IN_CLASSA_NSHIFT: u32 = 24;
pub const IN_CLASSA_HOST: u32 = 16777215;
pub const IN_CLASSA_MAX: u32 = 128;
pub const IN_CLASSB_NET: u32 = 4294901760;
pub const IN_CLASSB_NSHIFT: u32 = 16;
pub const IN_CLASSB_HOST: u32 = 65535;
pub const IN_CLASSB_MAX: u32 = 65536;
pub const IN_CLASSC_NET: u32 = 4294967040;
pub const IN_CLASSC_NSHIFT: u32 = 8;
pub const IN_CLASSC_HOST: u32 = 255;
pub const IN_NETMASK_DEFAULT: u32 = 4294967040;
pub const IN_CLASSD_NET: u32 = 4026531840;
pub const IN_CLASSD_NSHIFT: u32 = 28;
pub const IN_CLASSD_HOST: u32 = 268435455;
pub const IN_LOOPBACKNET: u32 = 127;
pub const IP_OPTIONS: u32 = 1;
pub const IP_HDRINCL: u32 = 2;
pub const IP_TOS: u32 = 3;
pub const IP_TTL: u32 = 4;
pub const IP_RECVOPTS: u32 = 5;
pub const IP_RECVRETOPTS: u32 = 6;
pub const IP_RECVDSTADDR: u32 = 7;
pub const IP_SENDSRCADDR: u32 = 7;
pub const IP_RETOPTS: u32 = 8;
pub const IP_MULTICAST_IF: u32 = 9;
pub const IP_MULTICAST_TTL: u32 = 10;
pub const IP_MULTICAST_LOOP: u32 = 11;
pub const IP_ADD_MEMBERSHIP: u32 = 12;
pub const IP_DROP_MEMBERSHIP: u32 = 13;
pub const IP_MULTICAST_VIF: u32 = 14;
pub const IP_RSVP_ON: u32 = 15;
pub const IP_RSVP_OFF: u32 = 16;
pub const IP_RSVP_VIF_ON: u32 = 17;
pub const IP_RSVP_VIF_OFF: u32 = 18;
pub const IP_PORTRANGE: u32 = 19;
pub const IP_RECVIF: u32 = 20;
pub const IP_IPSEC_POLICY: u32 = 21;
pub const IP_ONESBCAST: u32 = 23;
pub const IP_BINDANY: u32 = 24;
pub const IP_BINDMULTI: u32 = 25;
pub const IP_RSS_LISTEN_BUCKET: u32 = 26;
pub const IP_ORIGDSTADDR: u32 = 27;
pub const IP_RECVORIGDSTADDR: u32 = 27;
pub const IP_FW_TABLE_ADD: u32 = 40;
pub const IP_FW_TABLE_DEL: u32 = 41;
pub const IP_FW_TABLE_FLUSH: u32 = 42;
pub const IP_FW_TABLE_GETSIZE: u32 = 43;
pub const IP_FW_TABLE_LIST: u32 = 44;
pub const IP_FW3: u32 = 48;
pub const IP_DUMMYNET3: u32 = 49;
pub const IP_FW_ADD: u32 = 50;
pub const IP_FW_DEL: u32 = 51;
pub const IP_FW_FLUSH: u32 = 52;
pub const IP_FW_ZERO: u32 = 53;
pub const IP_FW_GET: u32 = 54;
pub const IP_FW_RESETLOG: u32 = 55;
pub const IP_FW_NAT_CFG: u32 = 56;
pub const IP_FW_NAT_DEL: u32 = 57;
pub const IP_FW_NAT_GET_CONFIG: u32 = 58;
pub const IP_FW_NAT_GET_LOG: u32 = 59;
pub const IP_DUMMYNET_CONFIGURE: u32 = 60;
pub const IP_DUMMYNET_DEL: u32 = 61;
pub const IP_DUMMYNET_FLUSH: u32 = 62;
pub const IP_DUMMYNET_GET: u32 = 64;
pub const IP_RECVTTL: u32 = 65;
pub const IP_MINTTL: u32 = 66;
pub const IP_DONTFRAG: u32 = 67;
pub const IP_RECVTOS: u32 = 68;
pub const IP_ADD_SOURCE_MEMBERSHIP: u32 = 70;
pub const IP_DROP_SOURCE_MEMBERSHIP: u32 = 71;
pub const IP_BLOCK_SOURCE: u32 = 72;
pub const IP_UNBLOCK_SOURCE: u32 = 73;
pub const IP_MSFILTER: u32 = 74;
pub const IP_VLAN_PCP: u32 = 75;
pub const MCAST_JOIN_GROUP: u32 = 80;
pub const MCAST_LEAVE_GROUP: u32 = 81;
pub const MCAST_JOIN_SOURCE_GROUP: u32 = 82;
pub const MCAST_LEAVE_SOURCE_GROUP: u32 = 83;
pub const MCAST_BLOCK_SOURCE: u32 = 84;
pub const MCAST_UNBLOCK_SOURCE: u32 = 85;
pub const IP_FLOWID: u32 = 90;
pub const IP_FLOWTYPE: u32 = 91;
pub const IP_RSSBUCKETID: u32 = 92;
pub const IP_RECVFLOWID: u32 = 93;
pub const IP_RECVRSSBUCKETID: u32 = 94;
pub const IP_DEFAULT_MULTICAST_TTL: u32 = 1;
pub const IP_DEFAULT_MULTICAST_LOOP: u32 = 1;
pub const IP_MAX_MEMBERSHIPS: u32 = 4095;
pub const IP_MAX_GROUP_SRC_FILTER: u32 = 512;
pub const IP_MAX_SOCK_SRC_FILTER: u32 = 128;
pub const IP_MAX_SOCK_MUTE_FILTER: u32 = 128;
pub const MCAST_UNDEFINED: u32 = 0;
pub const MCAST_INCLUDE: u32 = 1;
pub const MCAST_EXCLUDE: u32 = 2;
pub const IP_PORTRANGE_DEFAULT: u32 = 0;
pub const IP_PORTRANGE_HIGH: u32 = 1;
pub const IP_PORTRANGE_LOW: u32 = 2;
pub const IPCTL_FORWARDING: u32 = 1;
pub const IPCTL_SENDREDIRECTS: u32 = 2;
pub const IPCTL_DEFTTL: u32 = 3;
pub const IPCTL_SOURCEROUTE: u32 = 8;
pub const IPCTL_DIRECTEDBROADCAST: u32 = 9;
pub const IPCTL_INTRQMAXLEN: u32 = 10;
pub const IPCTL_INTRQDROPS: u32 = 11;
pub const IPCTL_STATS: u32 = 12;
pub const IPCTL_ACCEPTSOURCEROUTE: u32 = 13;
pub const IPCTL_FASTFORWARDING: u32 = 14;
pub const IPCTL_GIF_TTL: u32 = 16;
pub const IPCTL_INTRDQMAXLEN: u32 = 17;
pub const IPCTL_INTRDQDROPS: u32 = 18;
pub const __KAME_VERSION: &[u8; 8] = b"FreeBSD\0";
pub const IPV6PORT_RESERVED: u32 = 1024;
pub const IPV6PORT_ANONMIN: u32 = 49152;
pub const IPV6PORT_ANONMAX: u32 = 65535;
pub const IPV6PORT_RESERVEDMIN: u32 = 600;
pub const IPV6PORT_RESERVEDMAX: u32 = 1023;
pub const INET6_ADDRSTRLEN: u32 = 46;
pub const __IPV6_ADDR_SCOPE_NODELOCAL: u32 = 1;
pub const __IPV6_ADDR_SCOPE_INTFACELOCAL: u32 = 1;
pub const __IPV6_ADDR_SCOPE_LINKLOCAL: u32 = 2;
pub const __IPV6_ADDR_SCOPE_SITELOCAL: u32 = 5;
pub const __IPV6_ADDR_SCOPE_ORGLOCAL: u32 = 8;
pub const __IPV6_ADDR_SCOPE_GLOBAL: u32 = 14;
pub const IPV6_SOCKOPT_RESERVED1: u32 = 3;
pub const IPV6_UNICAST_HOPS: u32 = 4;
pub const IPV6_MULTICAST_IF: u32 = 9;
pub const IPV6_MULTICAST_HOPS: u32 = 10;
pub const IPV6_MULTICAST_LOOP: u32 = 11;
pub const IPV6_JOIN_GROUP: u32 = 12;
pub const IPV6_LEAVE_GROUP: u32 = 13;
pub const IPV6_PORTRANGE: u32 = 14;
pub const ICMP6_FILTER: u32 = 18;
pub const IPV6_CHECKSUM: u32 = 26;
pub const IPV6_V6ONLY: u32 = 27;
pub const IPV6_BINDV6ONLY: u32 = 27;
pub const IPV6_IPSEC_POLICY: u32 = 28;
pub const IPV6_FW_ADD: u32 = 30;
pub const IPV6_FW_DEL: u32 = 31;
pub const IPV6_FW_FLUSH: u32 = 32;
pub const IPV6_FW_ZERO: u32 = 33;
pub const IPV6_FW_GET: u32 = 34;
pub const IPV6_RTHDRDSTOPTS: u32 = 35;
pub const IPV6_RECVPKTINFO: u32 = 36;
pub const IPV6_RECVHOPLIMIT: u32 = 37;
pub const IPV6_RECVRTHDR: u32 = 38;
pub const IPV6_RECVHOPOPTS: u32 = 39;
pub const IPV6_RECVDSTOPTS: u32 = 40;
pub const IPV6_USE_MIN_MTU: u32 = 42;
pub const IPV6_RECVPATHMTU: u32 = 43;
pub const IPV6_PATHMTU: u32 = 44;
pub const IPV6_PKTINFO: u32 = 46;
pub const IPV6_HOPLIMIT: u32 = 47;
pub const IPV6_NEXTHOP: u32 = 48;
pub const IPV6_HOPOPTS: u32 = 49;
pub const IPV6_DSTOPTS: u32 = 50;
pub const IPV6_RTHDR: u32 = 51;
pub const IPV6_RECVTCLASS: u32 = 57;
pub const IPV6_AUTOFLOWLABEL: u32 = 59;
pub const IPV6_TCLASS: u32 = 61;
pub const IPV6_DONTFRAG: u32 = 62;
pub const IPV6_PREFER_TEMPADDR: u32 = 63;
pub const IPV6_BINDANY: u32 = 64;
pub const IPV6_BINDMULTI: u32 = 65;
pub const IPV6_RSS_LISTEN_BUCKET: u32 = 66;
pub const IPV6_FLOWID: u32 = 67;
pub const IPV6_FLOWTYPE: u32 = 68;
pub const IPV6_RSSBUCKETID: u32 = 69;
pub const IPV6_RECVFLOWID: u32 = 70;
pub const IPV6_RECVRSSBUCKETID: u32 = 71;
pub const IPV6_ORIGDSTADDR: u32 = 72;
pub const IPV6_RECVORIGDSTADDR: u32 = 72;
pub const IPV6_MSFILTER: u32 = 74;
pub const IPV6_VLAN_PCP: u32 = 75;
pub const IPV6_RTHDR_LOOSE: u32 = 0;
pub const IPV6_RTHDR_STRICT: u32 = 1;
pub const IPV6_RTHDR_TYPE_0: u32 = 0;
pub const IPV6_DEFAULT_MULTICAST_HOPS: u32 = 1;
pub const IPV6_DEFAULT_MULTICAST_LOOP: u32 = 1;
pub const IPV6_MAX_MEMBERSHIPS: u32 = 4095;
pub const IPV6_MAX_GROUP_SRC_FILTER: u32 = 512;
pub const IPV6_MAX_SOCK_SRC_FILTER: u32 = 128;
pub const IPV6_PORTRANGE_DEFAULT: u32 = 0;
pub const IPV6_PORTRANGE_HIGH: u32 = 1;
pub const IPV6_PORTRANGE_LOW: u32 = 2;
pub const IPV6PROTO_MAXID: u32 = 104;
pub const IPV6CTL_FORWARDING: u32 = 1;
pub const IPV6CTL_SENDREDIRECTS: u32 = 2;
pub const IPV6CTL_DEFHLIM: u32 = 3;
pub const IPV6CTL_FORWSRCRT: u32 = 5;
pub const IPV6CTL_STATS: u32 = 6;
pub const IPV6CTL_MRTSTATS: u32 = 7;
pub const IPV6CTL_MRTPROTO: u32 = 8;
pub const IPV6CTL_MAXFRAGPACKETS: u32 = 9;
pub const IPV6CTL_SOURCECHECK: u32 = 10;
pub const IPV6CTL_SOURCECHECK_LOGINT: u32 = 11;
pub const IPV6CTL_ACCEPT_RTADV: u32 = 12;
pub const IPV6CTL_LOG_INTERVAL: u32 = 14;
pub const IPV6CTL_HDRNESTLIMIT: u32 = 15;
pub const IPV6CTL_DAD_COUNT: u32 = 16;
pub const IPV6CTL_AUTO_FLOWLABEL: u32 = 17;
pub const IPV6CTL_DEFMCASTHLIM: u32 = 18;
pub const IPV6CTL_GIF_HLIM: u32 = 19;
pub const IPV6CTL_KAME_VERSION: u32 = 20;
pub const IPV6CTL_USE_DEPRECATED: u32 = 21;
pub const IPV6CTL_RR_PRUNE: u32 = 22;
pub const IPV6CTL_V6ONLY: u32 = 24;
pub const IPV6CTL_USETEMPADDR: u32 = 32;
pub const IPV6CTL_TEMPPLTIME: u32 = 33;
pub const IPV6CTL_TEMPVLTIME: u32 = 34;
pub const IPV6CTL_AUTO_LINKLOCAL: u32 = 35;
pub const IPV6CTL_RIP6STATS: u32 = 36;
pub const IPV6CTL_PREFER_TEMPADDR: u32 = 37;
pub const IPV6CTL_ADDRCTLPOLICY: u32 = 38;
pub const IPV6CTL_USE_DEFAULTZONE: u32 = 39;
pub const IPV6CTL_MAXFRAGS: u32 = 41;
pub const IPV6CTL_MCAST_PMTU: u32 = 44;
pub const IPV6CTL_STEALTH: u32 = 45;
pub const ICMPV6CTL_ND6_ONLINKNSRFC4861: u32 = 47;
pub const IPV6CTL_NO_RADR: u32 = 48;
pub const IPV6CTL_NORBIT_RAIF: u32 = 49;
pub const IPV6CTL_RFC6204W3: u32 = 50;
pub const IPV6CTL_INTRQMAXLEN: u32 = 51;
pub const IPV6CTL_INTRDQMAXLEN: u32 = 52;
pub const IPV6CTL_MAXFRAGSPERPACKET: u32 = 53;
pub const IPV6CTL_MAXFRAGBUCKETSIZE: u32 = 54;
pub const IPV6CTL_MAXID: u32 = 55;
pub const RT_L2_ME_BIT: u32 = 2;
pub const RT_MAY_LOOP_BIT: u32 = 3;
pub const RT_HAS_HEADER_BIT: u32 = 4;
pub const RT_L2_ME: u32 = 4;
pub const RT_MAY_LOOP: u32 = 8;
pub const RT_HAS_HEADER: u32 = 16;
pub const RT_REJECT: u32 = 32;
pub const RT_BLACKHOLE: u32 = 64;
pub const RT_HAS_GW: u32 = 128;
pub const RT_LLE_CACHE: u32 = 256;
pub const RTM_RTTUNIT: u32 = 1000000;
pub const RT_DEFAULT_WEIGHT: u32 = 1;
pub const RT_MAX_WEIGHT: u32 = 16777215;
pub const RT_DEFAULT_FIB: u32 = 0;
pub const RT_ALL_FIBS: i32 = -1;
pub const RTF_UP: u32 = 1;
pub const RTF_GATEWAY: u32 = 2;
pub const RTF_HOST: u32 = 4;
pub const RTF_REJECT: u32 = 8;
pub const RTF_DYNAMIC: u32 = 16;
pub const RTF_MODIFIED: u32 = 32;
pub const RTF_DONE: u32 = 64;
pub const RTF_XRESOLVE: u32 = 512;
pub const RTF_LLINFO: u32 = 1024;
pub const RTF_LLDATA: u32 = 1024;
pub const RTF_STATIC: u32 = 2048;
pub const RTF_BLACKHOLE: u32 = 4096;
pub const RTF_PROTO2: u32 = 16384;
pub const RTF_PROTO1: u32 = 32768;
pub const RTF_PROTO3: u32 = 262144;
pub const RTF_FIXEDMTU: u32 = 524288;
pub const RTF_PINNED: u32 = 1048576;
pub const RTF_LOCAL: u32 = 2097152;
pub const RTF_BROADCAST: u32 = 4194304;
pub const RTF_MULTICAST: u32 = 8388608;
pub const RTF_STICKY: u32 = 268435456;
pub const RTF_GWFLAG_COMPAT: u32 = 2147483648;
pub const RTF_FMASK: u32 = 268752904;
pub const NHF_MULTIPATH: u32 = 8;
pub const NHF_REJECT: u32 = 16;
pub const NHF_BLACKHOLE: u32 = 32;
pub const NHF_REDIRECT: u32 = 64;
pub const NHF_DEFAULT: u32 = 128;
pub const NHF_BROADCAST: u32 = 256;
pub const NHF_GATEWAY: u32 = 512;
pub const NHF_HOST: u32 = 1024;
pub const NHR_NONE: u32 = 0;
pub const NHR_REF: u32 = 1;
pub const NHR_NODEFAULT: u32 = 2;
pub const NHR_COPY: u32 = 256;
pub const NHR_UNLOCKED: u32 = 512;
pub const RTM_VERSION: u32 = 5;
pub const RTM_ADD: u32 = 1;
pub const RTM_DELETE: u32 = 2;
pub const RTM_CHANGE: u32 = 3;
pub const RTM_GET: u32 = 4;
pub const RTM_LOSING: u32 = 5;
pub const RTM_REDIRECT: u32 = 6;
pub const RTM_MISS: u32 = 7;
pub const RTM_LOCK: u32 = 8;
pub const RTM_RESOLVE: u32 = 11;
pub const RTM_NEWADDR: u32 = 12;
pub const RTM_DELADDR: u32 = 13;
pub const RTM_IFINFO: u32 = 14;
pub const RTM_NEWMADDR: u32 = 15;
pub const RTM_DELMADDR: u32 = 16;
pub const RTM_IFANNOUNCE: u32 = 17;
pub const RTM_IEEE80211: u32 = 18;
pub const RTV_MTU: u32 = 1;
pub const RTV_HOPCOUNT: u32 = 2;
pub const RTV_EXPIRE: u32 = 4;
pub const RTV_RPIPE: u32 = 8;
pub const RTV_SPIPE: u32 = 16;
pub const RTV_SSTHRESH: u32 = 32;
pub const RTV_RTT: u32 = 64;
pub const RTV_RTTVAR: u32 = 128;
pub const RTV_WEIGHT: u32 = 256;
pub const RTA_DST: u32 = 1;
pub const RTA_GATEWAY: u32 = 2;
pub const RTA_NETMASK: u32 = 4;
pub const RTA_GENMASK: u32 = 8;
pub const RTA_IFP: u32 = 16;
pub const RTA_IFA: u32 = 32;
pub const RTA_AUTHOR: u32 = 64;
pub const RTA_BRD: u32 = 128;
pub const RTAX_DST: u32 = 0;
pub const RTAX_GATEWAY: u32 = 1;
pub const RTAX_NETMASK: u32 = 2;
pub const RTAX_GENMASK: u32 = 3;
pub const RTAX_IFP: u32 = 4;
pub const RTAX_IFA: u32 = 5;
pub const RTAX_AUTHOR: u32 = 6;
pub const RTAX_BRD: u32 = 7;
pub const RTAX_MAX: u32 = 8;
pub const CLOCK_REALTIME: u32 = 0;
pub const CLOCK_VIRTUAL: u32 = 1;
pub const CLOCK_PROF: u32 = 2;
pub const CLOCK_MONOTONIC: u32 = 4;
pub const CLOCK_UPTIME_FAST: u32 = 8;
pub const CLOCK_UPTIME: u32 = 5;
pub const CLOCK_UPTIME_PRECISE: u32 = 7;
pub const CLOCK_REALTIME_PRECISE: u32 = 9;
pub const CLOCK_REALTIME_FAST: u32 = 10;
pub const CLOCK_MONOTONIC_PRECISE: u32 = 11;
pub const CLOCK_MONOTONIC_FAST: u32 = 12;
pub const CLOCK_SECOND: u32 = 13;
pub const CLOCK_THREAD_CPUTIME_ID: u32 = 14;
pub const CLOCK_PROCESS_CPUTIME_ID: u32 = 15;
pub const CLOCK_BOOTTIME: u32 = 5;
pub const CLOCK_REALTIME_COARSE: u32 = 10;
pub const CLOCK_MONOTONIC_COARSE: u32 = 12;
pub const TIMER_RELTIME: u32 = 0;
pub const TIMER_ABSTIME: u32 = 1;
pub const DST_NONE: u32 = 0;
pub const DST_USA: u32 = 1;
pub const DST_AUST: u32 = 2;
pub const DST_WET: u32 = 3;
pub const DST_MET: u32 = 4;
pub const DST_EET: u32 = 5;
pub const DST_CAN: u32 = 6;
pub const SBT_MAX: u64 = 9223372036854775807;
pub const ITIMER_REAL: u32 = 0;
pub const ITIMER_VIRTUAL: u32 = 1;
pub const ITIMER_PROF: u32 = 2;
pub const CPUCLOCK_WHICH_PID: u32 = 0;
pub const CPUCLOCK_WHICH_TID: u32 = 1;
pub const CLK_TCK: u32 = 128;
pub const CLOCKS_PER_SEC: u32 = 128;
pub const TIME_UTC: u32 = 1;
pub const IF_NAMESIZE: u32 = 16;
pub const IFNAMSIZ: u32 = 16;
pub const IF_MAXUNIT: u32 = 32767;
pub const IFF_UP: u32 = 1;
pub const IFF_BROADCAST: u32 = 2;
pub const IFF_DEBUG: u32 = 4;
pub const IFF_LOOPBACK: u32 = 8;
pub const IFF_POINTOPOINT: u32 = 16;
pub const IFF_KNOWSEPOCH: u32 = 32;
pub const IFF_DRV_RUNNING: u32 = 64;
pub const IFF_NOARP: u32 = 128;
pub const IFF_PROMISC: u32 = 256;
pub const IFF_ALLMULTI: u32 = 512;
pub const IFF_DRV_OACTIVE: u32 = 1024;
pub const IFF_SIMPLEX: u32 = 2048;
pub const IFF_LINK0: u32 = 4096;
pub const IFF_LINK1: u32 = 8192;
pub const IFF_LINK2: u32 = 16384;
pub const IFF_ALTPHYS: u32 = 16384;
pub const IFF_MULTICAST: u32 = 32768;
pub const IFF_CANTCONFIG: u32 = 65536;
pub const IFF_PPROMISC: u32 = 131072;
pub const IFF_MONITOR: u32 = 262144;
pub const IFF_STATICARP: u32 = 524288;
pub const IFF_DYING: u32 = 2097152;
pub const IFF_RENAMING: u32 = 4194304;
pub const IFF_NOGROUP: u32 = 8388608;
pub const IFF_NETLINK_1: u32 = 16777216;
pub const IFF_RUNNING: u32 = 64;
pub const IFF_OACTIVE: u32 = 1024;
pub const IFF_CANTCHANGE: u32 = 2199410;
pub const LINK_STATE_UNKNOWN: u32 = 0;
pub const LINK_STATE_DOWN: u32 = 1;
pub const LINK_STATE_UP: u32 = 2;
pub const IFCAP_RXCSUM: u32 = 1;
pub const IFCAP_TXCSUM: u32 = 2;
pub const IFCAP_NETCONS: u32 = 4;
pub const IFCAP_VLAN_MTU: u32 = 8;
pub const IFCAP_VLAN_HWTAGGING: u32 = 16;
pub const IFCAP_JUMBO_MTU: u32 = 32;
pub const IFCAP_POLLING: u32 = 64;
pub const IFCAP_VLAN_HWCSUM: u32 = 128;
pub const IFCAP_TSO4: u32 = 256;
pub const IFCAP_TSO6: u32 = 512;
pub const IFCAP_LRO: u32 = 1024;
pub const IFCAP_WOL_UCAST: u32 = 2048;
pub const IFCAP_WOL_MCAST: u32 = 4096;
pub const IFCAP_WOL_MAGIC: u32 = 8192;
pub const IFCAP_TOE4: u32 = 16384;
pub const IFCAP_TOE6: u32 = 32768;
pub const IFCAP_VLAN_HWFILTER: u32 = 65536;
pub const IFCAP_VLAN_HWTSO: u32 = 262144;
pub const IFCAP_LINKSTATE: u32 = 524288;
pub const IFCAP_NETMAP: u32 = 1048576;
pub const IFCAP_RXCSUM_IPV6: u32 = 2097152;
pub const IFCAP_TXCSUM_IPV6: u32 = 4194304;
pub const IFCAP_HWSTATS: u32 = 8388608;
pub const IFCAP_TXRTLMT: u32 = 16777216;
pub const IFCAP_HWRXTSTMP: u32 = 33554432;
pub const IFCAP_MEXTPG: u32 = 67108864;
pub const IFCAP_TXTLS4: u32 = 134217728;
pub const IFCAP_TXTLS6: u32 = 268435456;
pub const IFCAP_VXLAN_HWCSUM: u32 = 536870912;
pub const IFCAP_VXLAN_HWTSO: u32 = 1073741824;
pub const IFCAP_TXTLS_RTLMT: u32 = 2147483648;
pub const IFCAP_HWCSUM_IPV6: u32 = 6291456;
pub const IFCAP_HWCSUM: u32 = 3;
pub const IFCAP_TSO: u32 = 768;
pub const IFCAP_WOL: u32 = 14336;
pub const IFCAP_TOE: u32 = 49152;
pub const IFCAP_TXTLS: u32 = 402653184;
pub const IFCAP_CANTCHANGE: u32 = 1048576;
pub const IFQ_MAXLEN: u32 = 50;
pub const IFNET_SLOWHZ: u32 = 1;
pub const IFAN_ARRIVAL: u32 = 0;
pub const IFAN_DEPARTURE: u32 = 1;
pub const IFSTATMAX: u32 = 800;
pub const IFG_ALL: &[u8; 4] = b"all\0";
pub const IFG_EGRESS: &[u8; 7] = b"egress\0";
pub const RSS_FUNC_NONE: u32 = 0;
pub const RSS_FUNC_PRIVATE: u32 = 1;
pub const RSS_FUNC_TOEPLITZ: u32 = 2;
pub const RSS_TYPE_IPV4: u32 = 1;
pub const RSS_TYPE_TCP_IPV4: u32 = 2;
pub const RSS_TYPE_IPV6: u32 = 4;
pub const RSS_TYPE_IPV6_EX: u32 = 8;
pub const RSS_TYPE_TCP_IPV6: u32 = 16;
pub const RSS_TYPE_TCP_IPV6_EX: u32 = 32;
pub const RSS_TYPE_UDP_IPV4: u32 = 64;
pub const RSS_TYPE_UDP_IPV6: u32 = 128;
pub const RSS_TYPE_UDP_IPV6_EX: u32 = 256;
pub const RSS_KEYLEN: u32 = 128;
pub const IFNET_PCP_NONE: u32 = 255;
pub const IFDR_MSG_SIZE: u32 = 64;
pub const IFDR_REASON_MSG: u32 = 1;
pub const IFDR_REASON_VENDOR: u32 = 2;
pub type __int8_t = ::std::os::raw::c_schar;
pub type __uint8_t = ::std::os::raw::c_uchar;
pub type __int16_t = ::std::os::raw::c_short;
pub type __uint16_t = ::std::os::raw::c_ushort;
pub type __int32_t = ::std::os::raw::c_int;
pub type __uint32_t = ::std::os::raw::c_uint;
pub type __int64_t = ::std::os::raw::c_long;
pub type __uint64_t = ::std::os::raw::c_ulong;
pub type __clock_t = __int32_t;
pub type __critical_t = __int64_t;
pub type __double_t = f64;
pub type __float_t = f32;
pub type __intfptr_t = __int64_t;
pub type __intptr_t = __int64_t;
pub type __intmax_t = __int64_t;
pub type __int_fast8_t = __int32_t;
pub type __int_fast16_t = __int32_t;
pub type __int_fast32_t = __int32_t;
pub type __int_fast64_t = __int64_t;
pub type __int_least8_t = __int8_t;
pub type __int_least16_t = __int16_t;
pub type __int_least32_t = __int32_t;
pub type __int_least64_t = __int64_t;
pub type __ptrdiff_t = __int64_t;
pub type __register_t = __int64_t;
pub type __segsz_t = __int64_t;
pub type __size_t = __uint64_t;
pub type __ssize_t = __int64_t;
pub type __time_t = __int64_t;
pub type __uintfptr_t = __uint64_t;
pub type __uintptr_t = __uint64_t;
pub type __uintmax_t = __uint64_t;
pub type __uint_fast8_t = __uint32_t;
pub type __uint_fast16_t = __uint32_t;
pub type __uint_fast32_t = __uint32_t;
pub type __uint_fast64_t = __uint64_t;
pub type __uint_least8_t = __uint8_t;
pub type __uint_least16_t = __uint16_t;
pub type __uint_least32_t = __uint32_t;
pub type __uint_least64_t = __uint64_t;
pub type __u_register_t = __uint64_t;
pub type __vm_offset_t = __uint64_t;
pub type __vm_paddr_t = __uint64_t;
pub type __vm_size_t = __uint64_t;
pub type ___wchar_t = ::std::os::raw::c_int;
pub type __blksize_t = __int32_t;
pub type __blkcnt_t = __int64_t;
pub type __clockid_t = __int32_t;
pub type __fflags_t = __uint32_t;
pub type __fsblkcnt_t = __uint64_t;
pub type __fsfilcnt_t = __uint64_t;
pub type __gid_t = __uint32_t;
pub type __id_t = __int64_t;
pub type __ino_t = __uint64_t;
pub type __key_t = ::std::os::raw::c_long;
pub type __lwpid_t = __int32_t;
pub type __mode_t = __uint16_t;
pub type __accmode_t = ::std::os::raw::c_int;
pub type __nl_item = ::std::os::raw::c_int;
pub type __nlink_t = __uint64_t;
pub type __off_t = __int64_t;
pub type __off64_t = __int64_t;
pub type __pid_t = __int32_t;
pub type __rlim_t = __int64_t;
pub type __sa_family_t = __uint8_t;
pub type __socklen_t = __uint32_t;
pub type __suseconds_t = ::std::os::raw::c_long;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __timer {
    _unused: [u8; 0],
}
pub type __timer_t = *mut __timer;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __mq {
    _unused: [u8; 0],
}
pub type __mqd_t = *mut __mq;
pub type __uid_t = __uint32_t;
pub type __useconds_t = ::std::os::raw::c_uint;
pub type __cpuwhich_t = ::std::os::raw::c_int;
pub type __cpulevel_t = ::std::os::raw::c_int;
pub type __cpusetid_t = ::std::os::raw::c_int;
pub type __daddr_t = __int64_t;
pub type __ct_rune_t = ::std::os::raw::c_int;
pub type __rune_t = __ct_rune_t;
pub type __wint_t = __ct_rune_t;
pub type __char16_t = __uint_least16_t;
pub type __char32_t = __uint_least32_t;
#[repr(C)]
#[repr(align(16))]
#[derive(Debug, Copy, Clone)]
pub struct __max_align_t {
    pub __max_align1: ::std::os::raw::c_longlong,
    pub __bindgen_padding_0: u64,
    pub __max_align2: u128,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of __max_align_t"][::std::mem::size_of::<__max_align_t>() - 32usize];
    ["Alignment of __max_align_t"][::std::mem::align_of::<__max_align_t>() - 16usize];
    ["Offset of field: __max_align_t::__max_align1"]
        [::std::mem::offset_of!(__max_align_t, __max_align1) - 0usize];
    ["Offset of field: __max_align_t::__max_align2"]
        [::std::mem::offset_of!(__max_align_t, __max_align2) - 16usize];
};
pub type __dev_t = __uint64_t;
pub type __fixpt_t = __uint32_t;
#[repr(C)]
#[derive(Copy, Clone)]
pub union __mbstate_t {
    pub __mbstate8: [::std::os::raw::c_char; 128usize],
    pub _mbstateL: __int64_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of __mbstate_t"][::std::mem::size_of::<__mbstate_t>() - 128usize];
    ["Alignment of __mbstate_t"][::std::mem::align_of::<__mbstate_t>() - 8usize];
    ["Offset of field: __mbstate_t::__mbstate8"]
        [::std::mem::offset_of!(__mbstate_t, __mbstate8) - 0usize];
    ["Offset of field: __mbstate_t::_mbstateL"]
        [::std::mem::offset_of!(__mbstate_t, _mbstateL) - 0usize];
};
pub type __rman_res_t = __uintmax_t;
pub type __va_list = __builtin_va_list;
pub type __gnuc_va_list = __va_list;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct pthread {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct pthread_attr {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct pthread_cond {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct pthread_cond_attr {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct pthread_mutex {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct pthread_mutex_attr {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct pthread_rwlock {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct pthread_rwlockattr {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct pthread_barrier {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct pthread_barrier_attr {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct pthread_spinlock {
    _unused: [u8; 0],
}
pub type pthread_t = *mut pthread;
pub type pthread_attr_t = *mut pthread_attr;
pub type pthread_mutex_t = *mut pthread_mutex;
pub type pthread_mutexattr_t = *mut pthread_mutex_attr;
pub type pthread_cond_t = *mut pthread_cond;
pub type pthread_condattr_t = *mut pthread_cond_attr;
pub type pthread_key_t = ::std::os::raw::c_int;
pub type pthread_once_t = pthread_once;
pub type pthread_rwlock_t = *mut pthread_rwlock;
pub type pthread_rwlockattr_t = *mut pthread_rwlockattr;
pub type pthread_barrier_t = *mut pthread_barrier;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct pthread_barrierattr {
    _unused: [u8; 0],
}
pub type pthread_barrierattr_t = *mut pthread_barrierattr;
pub type pthread_spinlock_t = *mut pthread_spinlock;
pub type pthread_addr_t = *mut ::std::os::raw::c_void;
pub type pthread_startroutine_t = ::std::option::Option<
    unsafe extern "C" fn(arg1: *mut ::std::os::raw::c_void) -> *mut ::std::os::raw::c_void,
>;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct pthread_once {
    pub state: ::std::os::raw::c_int,
    pub mutex: pthread_mutex_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of pthread_once"][::std::mem::size_of::<pthread_once>() - 16usize];
    ["Alignment of pthread_once"][::std::mem::align_of::<pthread_once>() - 8usize];
    ["Offset of field: pthread_once::state"][::std::mem::offset_of!(pthread_once, state) - 0usize];
    ["Offset of field: pthread_once::mutex"][::std::mem::offset_of!(pthread_once, mutex) - 8usize];
};
pub type u_char = ::std::os::raw::c_uchar;
pub type u_short = ::std::os::raw::c_ushort;
pub type u_int = ::std::os::raw::c_uint;
pub type u_long = ::std::os::raw::c_ulong;
pub type ushort = ::std::os::raw::c_ushort;
pub type uint = ::std::os::raw::c_uint;
pub type intmax_t = __intmax_t;
pub type uintmax_t = __uintmax_t;
pub type u_int8_t = __uint8_t;
pub type u_int16_t = __uint16_t;
pub type u_int32_t = __uint32_t;
pub type u_int64_t = __uint64_t;
pub type u_quad_t = __uint64_t;
pub type quad_t = __int64_t;
pub type qaddr_t = *mut quad_t;
pub type caddr_t = *mut ::std::os::raw::c_char;
pub type c_caddr_t = *const ::std::os::raw::c_char;
pub type blksize_t = __blksize_t;
pub type cpuwhich_t = __cpuwhich_t;
pub type cpulevel_t = __cpulevel_t;
pub type cpusetid_t = __cpusetid_t;
pub type blkcnt_t = __blkcnt_t;
pub type clock_t = __clock_t;
pub type clockid_t = __clockid_t;
pub type critical_t = __critical_t;
pub type daddr_t = __daddr_t;
pub type dev_t = __dev_t;
pub type fflags_t = __fflags_t;
pub type fixpt_t = __fixpt_t;
pub type fsblkcnt_t = __fsblkcnt_t;
pub type fsfilcnt_t = __fsfilcnt_t;
pub type gid_t = __gid_t;
pub type in_addr_t = __uint32_t;
pub type in_port_t = __uint16_t;
pub type id_t = __id_t;
pub type ino_t = __ino_t;
pub type key_t = __key_t;
pub type lwpid_t = __lwpid_t;
pub type mode_t = __mode_t;
pub type accmode_t = __accmode_t;
pub type nlink_t = __nlink_t;
pub type off_t = __off_t;
pub type off64_t = __off64_t;
pub type pid_t = __pid_t;
pub type register_t = __register_t;
pub type rlim_t = __rlim_t;
pub type sbintime_t = __int64_t;
pub type segsz_t = __segsz_t;
pub type suseconds_t = __suseconds_t;
pub type time_t = __time_t;
pub type timer_t = __timer_t;
pub type mqd_t = __mqd_t;
pub type u_register_t = __u_register_t;
pub type uid_t = __uid_t;
pub type useconds_t = __useconds_t;
pub type cap_ioctl_t = ::std::os::raw::c_ulong;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct cap_rights {
    _unused: [u8; 0],
}
pub type cap_rights_t = cap_rights;
pub type kpaddr_t = __uint64_t;
pub type kvaddr_t = __uint64_t;
pub type ksize_t = __uint64_t;
pub type kssize_t = __int64_t;
pub type vm_offset_t = __vm_offset_t;
pub type vm_ooffset_t = __uint64_t;
pub type vm_paddr_t = __vm_paddr_t;
pub type vm_pindex_t = __uint64_t;
pub type vm_size_t = __vm_size_t;
pub type rman_res_t = __rman_res_t;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __sigset {
    pub __bits: [__uint32_t; 4usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of __sigset"][::std::mem::size_of::<__sigset>() - 16usize];
    ["Alignment of __sigset"][::std::mem::align_of::<__sigset>() - 4usize];
    ["Offset of field: __sigset::__bits"][::std::mem::offset_of!(__sigset, __bits) - 0usize];
};
pub type __sigset_t = __sigset;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct timeval {
    pub tv_sec: time_t,
    pub tv_usec: suseconds_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of timeval"][::std::mem::size_of::<timeval>() - 16usize];
    ["Alignment of timeval"][::std::mem::align_of::<timeval>() - 8usize];
    ["Offset of field: timeval::tv_sec"][::std::mem::offset_of!(timeval, tv_sec) - 0usize];
    ["Offset of field: timeval::tv_usec"][::std::mem::offset_of!(timeval, tv_usec) - 8usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct timespec {
    pub tv_sec: time_t,
    pub tv_nsec: ::std::os::raw::c_long,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of timespec"][::std::mem::size_of::<timespec>() - 16usize];
    ["Alignment of timespec"][::std::mem::align_of::<timespec>() - 8usize];
    ["Offset of field: timespec::tv_sec"][::std::mem::offset_of!(timespec, tv_sec) - 0usize];
    ["Offset of field: timespec::tv_nsec"][::std::mem::offset_of!(timespec, tv_nsec) - 8usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct itimerspec {
    pub it_interval: timespec,
    pub it_value: timespec,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of itimerspec"][::std::mem::size_of::<itimerspec>() - 32usize];
    ["Alignment of itimerspec"][::std::mem::align_of::<itimerspec>() - 8usize];
    ["Offset of field: itimerspec::it_interval"]
        [::std::mem::offset_of!(itimerspec, it_interval) - 0usize];
    ["Offset of field: itimerspec::it_value"]
        [::std::mem::offset_of!(itimerspec, it_value) - 16usize];
};
pub type __fd_mask = ::std::os::raw::c_ulong;
pub type fd_mask = __fd_mask;
pub type sigset_t = __sigset_t;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct fd_set {
    pub __fds_bits: [__fd_mask; 16usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of fd_set"][::std::mem::size_of::<fd_set>() - 128usize];
    ["Alignment of fd_set"][::std::mem::align_of::<fd_set>() - 8usize];
    ["Offset of field: fd_set::__fds_bits"][::std::mem::offset_of!(fd_set, __fds_bits) - 0usize];
};
unsafe extern "C" {
    pub fn pselect(
        arg1: ::std::os::raw::c_int,
        arg2: *mut fd_set,
        arg3: *mut fd_set,
        arg4: *mut fd_set,
        arg5: *const timespec,
        arg6: *const sigset_t,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn select(
        arg1: ::std::os::raw::c_int,
        arg2: *mut fd_set,
        arg3: *mut fd_set,
        arg4: *mut fd_set,
        arg5: *mut timeval,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn ftruncate(arg1: ::std::os::raw::c_int, arg2: off_t) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn lseek(arg1: ::std::os::raw::c_int, arg2: off_t, arg3: ::std::os::raw::c_int) -> off_t;
}
unsafe extern "C" {
    pub fn mmap(
        arg1: *mut ::std::os::raw::c_void,
        arg2: usize,
        arg3: ::std::os::raw::c_int,
        arg4: ::std::os::raw::c_int,
        arg5: ::std::os::raw::c_int,
        arg6: off_t,
    ) -> *mut ::std::os::raw::c_void;
}
unsafe extern "C" {
    pub fn truncate(arg1: *const ::std::os::raw::c_char, arg2: off_t) -> ::std::os::raw::c_int;
}
pub type sig_atomic_t = ::std::os::raw::c_long;
#[repr(C)]
#[repr(align(16))]
#[derive(Debug, Copy, Clone)]
pub struct sigcontext {
    pub sc_mask: __sigset,
    pub sc_onstack: ::std::os::raw::c_long,
    pub sc_rdi: ::std::os::raw::c_long,
    pub sc_rsi: ::std::os::raw::c_long,
    pub sc_rdx: ::std::os::raw::c_long,
    pub sc_rcx: ::std::os::raw::c_long,
    pub sc_r8: ::std::os::raw::c_long,
    pub sc_r9: ::std::os::raw::c_long,
    pub sc_rax: ::std::os::raw::c_long,
    pub sc_rbx: ::std::os::raw::c_long,
    pub sc_rbp: ::std::os::raw::c_long,
    pub sc_r10: ::std::os::raw::c_long,
    pub sc_r11: ::std::os::raw::c_long,
    pub sc_r12: ::std::os::raw::c_long,
    pub sc_r13: ::std::os::raw::c_long,
    pub sc_r14: ::std::os::raw::c_long,
    pub sc_r15: ::std::os::raw::c_long,
    pub sc_trapno: ::std::os::raw::c_int,
    pub sc_fs: ::std::os::raw::c_short,
    pub sc_gs: ::std::os::raw::c_short,
    pub sc_addr: ::std::os::raw::c_long,
    pub sc_flags: ::std::os::raw::c_int,
    pub sc_es: ::std::os::raw::c_short,
    pub sc_ds: ::std::os::raw::c_short,
    pub sc_err: ::std::os::raw::c_long,
    pub sc_rip: ::std::os::raw::c_long,
    pub sc_cs: ::std::os::raw::c_long,
    pub sc_rflags: ::std::os::raw::c_long,
    pub sc_rsp: ::std::os::raw::c_long,
    pub sc_ss: ::std::os::raw::c_long,
    pub sc_len: ::std::os::raw::c_long,
    pub sc_fpformat: ::std::os::raw::c_long,
    pub sc_ownedfp: ::std::os::raw::c_long,
    pub sc_fpstate: [::std::os::raw::c_long; 64usize],
    pub sc_fsbase: ::std::os::raw::c_long,
    pub sc_gsbase: ::std::os::raw::c_long,
    pub sc_xfpustate: ::std::os::raw::c_long,
    pub sc_xfpustate_len: ::std::os::raw::c_long,
    pub sc_spare: [::std::os::raw::c_long; 4usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of sigcontext"][::std::mem::size_of::<sigcontext>() - 816usize];
    ["Alignment of sigcontext"][::std::mem::align_of::<sigcontext>() - 16usize];
    ["Offset of field: sigcontext::sc_mask"][::std::mem::offset_of!(sigcontext, sc_mask) - 0usize];
    ["Offset of field: sigcontext::sc_onstack"]
        [::std::mem::offset_of!(sigcontext, sc_onstack) - 16usize];
    ["Offset of field: sigcontext::sc_rdi"][::std::mem::offset_of!(sigcontext, sc_rdi) - 24usize];
    ["Offset of field: sigcontext::sc_rsi"][::std::mem::offset_of!(sigcontext, sc_rsi) - 32usize];
    ["Offset of field: sigcontext::sc_rdx"][::std::mem::offset_of!(sigcontext, sc_rdx) - 40usize];
    ["Offset of field: sigcontext::sc_rcx"][::std::mem::offset_of!(sigcontext, sc_rcx) - 48usize];
    ["Offset of field: sigcontext::sc_r8"][::std::mem::offset_of!(sigcontext, sc_r8) - 56usize];
    ["Offset of field: sigcontext::sc_r9"][::std::mem::offset_of!(sigcontext, sc_r9) - 64usize];
    ["Offset of field: sigcontext::sc_rax"][::std::mem::offset_of!(sigcontext, sc_rax) - 72usize];
    ["Offset of field: sigcontext::sc_rbx"][::std::mem::offset_of!(sigcontext, sc_rbx) - 80usize];
    ["Offset of field: sigcontext::sc_rbp"][::std::mem::offset_of!(sigcontext, sc_rbp) - 88usize];
    ["Offset of field: sigcontext::sc_r10"][::std::mem::offset_of!(sigcontext, sc_r10) - 96usize];
    ["Offset of field: sigcontext::sc_r11"][::std::mem::offset_of!(sigcontext, sc_r11) - 104usize];
    ["Offset of field: sigcontext::sc_r12"][::std::mem::offset_of!(sigcontext, sc_r12) - 112usize];
    ["Offset of field: sigcontext::sc_r13"][::std::mem::offset_of!(sigcontext, sc_r13) - 120usize];
    ["Offset of field: sigcontext::sc_r14"][::std::mem::offset_of!(sigcontext, sc_r14) - 128usize];
    ["Offset of field: sigcontext::sc_r15"][::std::mem::offset_of!(sigcontext, sc_r15) - 136usize];
    ["Offset of field: sigcontext::sc_trapno"]
        [::std::mem::offset_of!(sigcontext, sc_trapno) - 144usize];
    ["Offset of field: sigcontext::sc_fs"][::std::mem::offset_of!(sigcontext, sc_fs) - 148usize];
    ["Offset of field: sigcontext::sc_gs"][::std::mem::offset_of!(sigcontext, sc_gs) - 150usize];
    ["Offset of field: sigcontext::sc_addr"]
        [::std::mem::offset_of!(sigcontext, sc_addr) - 152usize];
    ["Offset of field: sigcontext::sc_flags"]
        [::std::mem::offset_of!(sigcontext, sc_flags) - 160usize];
    ["Offset of field: sigcontext::sc_es"][::std::mem::offset_of!(sigcontext, sc_es) - 164usize];
    ["Offset of field: sigcontext::sc_ds"][::std::mem::offset_of!(sigcontext, sc_ds) - 166usize];
    ["Offset of field: sigcontext::sc_err"][::std::mem::offset_of!(sigcontext, sc_err) - 168usize];
    ["Offset of field: sigcontext::sc_rip"][::std::mem::offset_of!(sigcontext, sc_rip) - 176usize];
    ["Offset of field: sigcontext::sc_cs"][::std::mem::offset_of!(sigcontext, sc_cs) - 184usize];
    ["Offset of field: sigcontext::sc_rflags"]
        [::std::mem::offset_of!(sigcontext, sc_rflags) - 192usize];
    ["Offset of field: sigcontext::sc_rsp"][::std::mem::offset_of!(sigcontext, sc_rsp) - 200usize];
    ["Offset of field: sigcontext::sc_ss"][::std::mem::offset_of!(sigcontext, sc_ss) - 208usize];
    ["Offset of field: sigcontext::sc_len"][::std::mem::offset_of!(sigcontext, sc_len) - 216usize];
    ["Offset of field: sigcontext::sc_fpformat"]
        [::std::mem::offset_of!(sigcontext, sc_fpformat) - 224usize];
    ["Offset of field: sigcontext::sc_ownedfp"]
        [::std::mem::offset_of!(sigcontext, sc_ownedfp) - 232usize];
    ["Offset of field: sigcontext::sc_fpstate"]
        [::std::mem::offset_of!(sigcontext, sc_fpstate) - 240usize];
    ["Offset of field: sigcontext::sc_fsbase"]
        [::std::mem::offset_of!(sigcontext, sc_fsbase) - 752usize];
    ["Offset of field: sigcontext::sc_gsbase"]
        [::std::mem::offset_of!(sigcontext, sc_gsbase) - 760usize];
    ["Offset of field: sigcontext::sc_xfpustate"]
        [::std::mem::offset_of!(sigcontext, sc_xfpustate) - 768usize];
    ["Offset of field: sigcontext::sc_xfpustate_len"]
        [::std::mem::offset_of!(sigcontext, sc_xfpustate_len) - 776usize];
    ["Offset of field: sigcontext::sc_spare"]
        [::std::mem::offset_of!(sigcontext, sc_spare) - 784usize];
};
pub type __sighandler_t = ::std::option::Option<unsafe extern "C" fn(arg1: ::std::os::raw::c_int)>;
#[repr(C)]
#[derive(Copy, Clone)]
pub union sigval {
    pub sival_int: ::std::os::raw::c_int,
    pub sival_ptr: *mut ::std::os::raw::c_void,
    pub sigval_int: ::std::os::raw::c_int,
    pub sigval_ptr: *mut ::std::os::raw::c_void,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of sigval"][::std::mem::size_of::<sigval>() - 8usize];
    ["Alignment of sigval"][::std::mem::align_of::<sigval>() - 8usize];
    ["Offset of field: sigval::sival_int"][::std::mem::offset_of!(sigval, sival_int) - 0usize];
    ["Offset of field: sigval::sival_ptr"][::std::mem::offset_of!(sigval, sival_ptr) - 0usize];
    ["Offset of field: sigval::sigval_int"][::std::mem::offset_of!(sigval, sigval_int) - 0usize];
    ["Offset of field: sigval::sigval_ptr"][::std::mem::offset_of!(sigval, sigval_ptr) - 0usize];
};
#[repr(C)]
#[derive(Copy, Clone)]
pub struct sigevent {
    pub sigev_notify: ::std::os::raw::c_int,
    pub sigev_signo: ::std::os::raw::c_int,
    pub sigev_value: sigval,
    pub _sigev_un: sigevent__bindgen_ty_1,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union sigevent__bindgen_ty_1 {
    pub _threadid: __lwpid_t,
    pub _sigev_thread: sigevent__bindgen_ty_1__bindgen_ty_1,
    pub _kevent_flags: ::std::os::raw::c_ushort,
    pub __spare__: [::std::os::raw::c_long; 8usize],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct sigevent__bindgen_ty_1__bindgen_ty_1 {
    pub _function: ::std::option::Option<unsafe extern "C" fn(arg1: sigval)>,
    pub _attribute: *mut *mut pthread_attr,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of sigevent__bindgen_ty_1__bindgen_ty_1"]
        [::std::mem::size_of::<sigevent__bindgen_ty_1__bindgen_ty_1>() - 16usize];
    ["Alignment of sigevent__bindgen_ty_1__bindgen_ty_1"]
        [::std::mem::align_of::<sigevent__bindgen_ty_1__bindgen_ty_1>() - 8usize];
    ["Offset of field: sigevent__bindgen_ty_1__bindgen_ty_1::_function"]
        [::std::mem::offset_of!(sigevent__bindgen_ty_1__bindgen_ty_1, _function) - 0usize];
    ["Offset of field: sigevent__bindgen_ty_1__bindgen_ty_1::_attribute"]
        [::std::mem::offset_of!(sigevent__bindgen_ty_1__bindgen_ty_1, _attribute) - 8usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of sigevent__bindgen_ty_1"][::std::mem::size_of::<sigevent__bindgen_ty_1>() - 64usize];
    ["Alignment of sigevent__bindgen_ty_1"]
        [::std::mem::align_of::<sigevent__bindgen_ty_1>() - 8usize];
    ["Offset of field: sigevent__bindgen_ty_1::_threadid"]
        [::std::mem::offset_of!(sigevent__bindgen_ty_1, _threadid) - 0usize];
    ["Offset of field: sigevent__bindgen_ty_1::_sigev_thread"]
        [::std::mem::offset_of!(sigevent__bindgen_ty_1, _sigev_thread) - 0usize];
    ["Offset of field: sigevent__bindgen_ty_1::_kevent_flags"]
        [::std::mem::offset_of!(sigevent__bindgen_ty_1, _kevent_flags) - 0usize];
    ["Offset of field: sigevent__bindgen_ty_1::__spare__"]
        [::std::mem::offset_of!(sigevent__bindgen_ty_1, __spare__) - 0usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of sigevent"][::std::mem::size_of::<sigevent>() - 80usize];
    ["Alignment of sigevent"][::std::mem::align_of::<sigevent>() - 8usize];
    ["Offset of field: sigevent::sigev_notify"]
        [::std::mem::offset_of!(sigevent, sigev_notify) - 0usize];
    ["Offset of field: sigevent::sigev_signo"]
        [::std::mem::offset_of!(sigevent, sigev_signo) - 4usize];
    ["Offset of field: sigevent::sigev_value"]
        [::std::mem::offset_of!(sigevent, sigev_value) - 8usize];
    ["Offset of field: sigevent::_sigev_un"][::std::mem::offset_of!(sigevent, _sigev_un) - 16usize];
};
#[repr(C)]
#[derive(Copy, Clone)]
pub struct __siginfo {
    pub si_signo: ::std::os::raw::c_int,
    pub si_errno: ::std::os::raw::c_int,
    pub si_code: ::std::os::raw::c_int,
    pub si_pid: __pid_t,
    pub si_uid: __uid_t,
    pub si_status: ::std::os::raw::c_int,
    pub si_addr: *mut ::std::os::raw::c_void,
    pub si_value: sigval,
    pub _reason: __siginfo__bindgen_ty_1,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union __siginfo__bindgen_ty_1 {
    pub _fault: __siginfo__bindgen_ty_1__bindgen_ty_1,
    pub _timer: __siginfo__bindgen_ty_1__bindgen_ty_2,
    pub _mesgq: __siginfo__bindgen_ty_1__bindgen_ty_3,
    pub _poll: __siginfo__bindgen_ty_1__bindgen_ty_4,
    pub __spare__: __siginfo__bindgen_ty_1__bindgen_ty_5,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __siginfo__bindgen_ty_1__bindgen_ty_1 {
    pub _trapno: ::std::os::raw::c_int,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of __siginfo__bindgen_ty_1__bindgen_ty_1"]
        [::std::mem::size_of::<__siginfo__bindgen_ty_1__bindgen_ty_1>() - 4usize];
    ["Alignment of __siginfo__bindgen_ty_1__bindgen_ty_1"]
        [::std::mem::align_of::<__siginfo__bindgen_ty_1__bindgen_ty_1>() - 4usize];
    ["Offset of field: __siginfo__bindgen_ty_1__bindgen_ty_1::_trapno"]
        [::std::mem::offset_of!(__siginfo__bindgen_ty_1__bindgen_ty_1, _trapno) - 0usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __siginfo__bindgen_ty_1__bindgen_ty_2 {
    pub _timerid: ::std::os::raw::c_int,
    pub _overrun: ::std::os::raw::c_int,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of __siginfo__bindgen_ty_1__bindgen_ty_2"]
        [::std::mem::size_of::<__siginfo__bindgen_ty_1__bindgen_ty_2>() - 8usize];
    ["Alignment of __siginfo__bindgen_ty_1__bindgen_ty_2"]
        [::std::mem::align_of::<__siginfo__bindgen_ty_1__bindgen_ty_2>() - 4usize];
    ["Offset of field: __siginfo__bindgen_ty_1__bindgen_ty_2::_timerid"]
        [::std::mem::offset_of!(__siginfo__bindgen_ty_1__bindgen_ty_2, _timerid) - 0usize];
    ["Offset of field: __siginfo__bindgen_ty_1__bindgen_ty_2::_overrun"]
        [::std::mem::offset_of!(__siginfo__bindgen_ty_1__bindgen_ty_2, _overrun) - 4usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __siginfo__bindgen_ty_1__bindgen_ty_3 {
    pub _mqd: ::std::os::raw::c_int,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of __siginfo__bindgen_ty_1__bindgen_ty_3"]
        [::std::mem::size_of::<__siginfo__bindgen_ty_1__bindgen_ty_3>() - 4usize];
    ["Alignment of __siginfo__bindgen_ty_1__bindgen_ty_3"]
        [::std::mem::align_of::<__siginfo__bindgen_ty_1__bindgen_ty_3>() - 4usize];
    ["Offset of field: __siginfo__bindgen_ty_1__bindgen_ty_3::_mqd"]
        [::std::mem::offset_of!(__siginfo__bindgen_ty_1__bindgen_ty_3, _mqd) - 0usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __siginfo__bindgen_ty_1__bindgen_ty_4 {
    pub _band: ::std::os::raw::c_long,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of __siginfo__bindgen_ty_1__bindgen_ty_4"]
        [::std::mem::size_of::<__siginfo__bindgen_ty_1__bindgen_ty_4>() - 8usize];
    ["Alignment of __siginfo__bindgen_ty_1__bindgen_ty_4"]
        [::std::mem::align_of::<__siginfo__bindgen_ty_1__bindgen_ty_4>() - 8usize];
    ["Offset of field: __siginfo__bindgen_ty_1__bindgen_ty_4::_band"]
        [::std::mem::offset_of!(__siginfo__bindgen_ty_1__bindgen_ty_4, _band) - 0usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __siginfo__bindgen_ty_1__bindgen_ty_5 {
    pub __spare1__: ::std::os::raw::c_long,
    pub __spare2__: [::std::os::raw::c_int; 7usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of __siginfo__bindgen_ty_1__bindgen_ty_5"]
        [::std::mem::size_of::<__siginfo__bindgen_ty_1__bindgen_ty_5>() - 40usize];
    ["Alignment of __siginfo__bindgen_ty_1__bindgen_ty_5"]
        [::std::mem::align_of::<__siginfo__bindgen_ty_1__bindgen_ty_5>() - 8usize];
    ["Offset of field: __siginfo__bindgen_ty_1__bindgen_ty_5::__spare1__"]
        [::std::mem::offset_of!(__siginfo__bindgen_ty_1__bindgen_ty_5, __spare1__) - 0usize];
    ["Offset of field: __siginfo__bindgen_ty_1__bindgen_ty_5::__spare2__"]
        [::std::mem::offset_of!(__siginfo__bindgen_ty_1__bindgen_ty_5, __spare2__) - 8usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of __siginfo__bindgen_ty_1"][::std::mem::size_of::<__siginfo__bindgen_ty_1>() - 40usize];
    ["Alignment of __siginfo__bindgen_ty_1"]
        [::std::mem::align_of::<__siginfo__bindgen_ty_1>() - 8usize];
    ["Offset of field: __siginfo__bindgen_ty_1::_fault"]
        [::std::mem::offset_of!(__siginfo__bindgen_ty_1, _fault) - 0usize];
    ["Offset of field: __siginfo__bindgen_ty_1::_timer"]
        [::std::mem::offset_of!(__siginfo__bindgen_ty_1, _timer) - 0usize];
    ["Offset of field: __siginfo__bindgen_ty_1::_mesgq"]
        [::std::mem::offset_of!(__siginfo__bindgen_ty_1, _mesgq) - 0usize];
    ["Offset of field: __siginfo__bindgen_ty_1::_poll"]
        [::std::mem::offset_of!(__siginfo__bindgen_ty_1, _poll) - 0usize];
    ["Offset of field: __siginfo__bindgen_ty_1::__spare__"]
        [::std::mem::offset_of!(__siginfo__bindgen_ty_1, __spare__) - 0usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of __siginfo"][::std::mem::size_of::<__siginfo>() - 80usize];
    ["Alignment of __siginfo"][::std::mem::align_of::<__siginfo>() - 8usize];
    ["Offset of field: __siginfo::si_signo"][::std::mem::offset_of!(__siginfo, si_signo) - 0usize];
    ["Offset of field: __siginfo::si_errno"][::std::mem::offset_of!(__siginfo, si_errno) - 4usize];
    ["Offset of field: __siginfo::si_code"][::std::mem::offset_of!(__siginfo, si_code) - 8usize];
    ["Offset of field: __siginfo::si_pid"][::std::mem::offset_of!(__siginfo, si_pid) - 12usize];
    ["Offset of field: __siginfo::si_uid"][::std::mem::offset_of!(__siginfo, si_uid) - 16usize];
    ["Offset of field: __siginfo::si_status"]
        [::std::mem::offset_of!(__siginfo, si_status) - 20usize];
    ["Offset of field: __siginfo::si_addr"][::std::mem::offset_of!(__siginfo, si_addr) - 24usize];
    ["Offset of field: __siginfo::si_value"][::std::mem::offset_of!(__siginfo, si_value) - 32usize];
    ["Offset of field: __siginfo::_reason"][::std::mem::offset_of!(__siginfo, _reason) - 40usize];
};
pub type siginfo_t = __siginfo;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct sigaction {
    pub __sigaction_u: sigaction__bindgen_ty_1,
    pub sa_flags: ::std::os::raw::c_int,
    pub sa_mask: sigset_t,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union sigaction__bindgen_ty_1 {
    pub __sa_handler: ::std::option::Option<unsafe extern "C" fn(arg1: ::std::os::raw::c_int)>,
    pub __sa_sigaction: ::std::option::Option<
        unsafe extern "C" fn(
            arg1: ::std::os::raw::c_int,
            arg2: *mut __siginfo,
            arg3: *mut ::std::os::raw::c_void,
        ),
    >,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of sigaction__bindgen_ty_1"][::std::mem::size_of::<sigaction__bindgen_ty_1>() - 8usize];
    ["Alignment of sigaction__bindgen_ty_1"]
        [::std::mem::align_of::<sigaction__bindgen_ty_1>() - 8usize];
    ["Offset of field: sigaction__bindgen_ty_1::__sa_handler"]
        [::std::mem::offset_of!(sigaction__bindgen_ty_1, __sa_handler) - 0usize];
    ["Offset of field: sigaction__bindgen_ty_1::__sa_sigaction"]
        [::std::mem::offset_of!(sigaction__bindgen_ty_1, __sa_sigaction) - 0usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of sigaction"][::std::mem::size_of::<sigaction>() - 32usize];
    ["Alignment of sigaction"][::std::mem::align_of::<sigaction>() - 8usize];
    ["Offset of field: sigaction::__sigaction_u"]
        [::std::mem::offset_of!(sigaction, __sigaction_u) - 0usize];
    ["Offset of field: sigaction::sa_flags"][::std::mem::offset_of!(sigaction, sa_flags) - 8usize];
    ["Offset of field: sigaction::sa_mask"][::std::mem::offset_of!(sigaction, sa_mask) - 12usize];
};
pub type sig_t = __sighandler_t;
pub type __siginfohandler_t = ::std::option::Option<
    unsafe extern "C" fn(
        arg1: ::std::os::raw::c_int,
        arg2: *mut __siginfo,
        arg3: *mut ::std::os::raw::c_void,
    ),
>;
pub type stack_t = sigaltstack;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct sigaltstack {
    pub ss_sp: *mut ::std::os::raw::c_void,
    pub ss_size: __size_t,
    pub ss_flags: ::std::os::raw::c_int,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of sigaltstack"][::std::mem::size_of::<sigaltstack>() - 24usize];
    ["Alignment of sigaltstack"][::std::mem::align_of::<sigaltstack>() - 8usize];
    ["Offset of field: sigaltstack::ss_sp"][::std::mem::offset_of!(sigaltstack, ss_sp) - 0usize];
    ["Offset of field: sigaltstack::ss_size"]
        [::std::mem::offset_of!(sigaltstack, ss_size) - 8usize];
    ["Offset of field: sigaltstack::ss_flags"]
        [::std::mem::offset_of!(sigaltstack, ss_flags) - 16usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct sigvec {
    pub sv_handler: __sighandler_t,
    pub sv_mask: ::std::os::raw::c_int,
    pub sv_flags: ::std::os::raw::c_int,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of sigvec"][::std::mem::size_of::<sigvec>() - 16usize];
    ["Alignment of sigvec"][::std::mem::align_of::<sigvec>() - 8usize];
    ["Offset of field: sigvec::sv_handler"][::std::mem::offset_of!(sigvec, sv_handler) - 0usize];
    ["Offset of field: sigvec::sv_mask"][::std::mem::offset_of!(sigvec, sv_mask) - 8usize];
    ["Offset of field: sigvec::sv_flags"][::std::mem::offset_of!(sigvec, sv_flags) - 12usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct sigstack {
    pub ss_sp: *mut ::std::os::raw::c_void,
    pub ss_onstack: ::std::os::raw::c_int,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of sigstack"][::std::mem::size_of::<sigstack>() - 16usize];
    ["Alignment of sigstack"][::std::mem::align_of::<sigstack>() - 8usize];
    ["Offset of field: sigstack::ss_sp"][::std::mem::offset_of!(sigstack, ss_sp) - 0usize];
    ["Offset of field: sigstack::ss_onstack"]
        [::std::mem::offset_of!(sigstack, ss_onstack) - 8usize];
};
unsafe extern "C" {
    pub fn signal(arg1: ::std::os::raw::c_int, arg2: __sighandler_t) -> __sighandler_t;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct thread {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ctlname {
    pub ctl_name: *mut ::std::os::raw::c_char,
    pub ctl_type: ::std::os::raw::c_int,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of ctlname"][::std::mem::size_of::<ctlname>() - 16usize];
    ["Alignment of ctlname"][::std::mem::align_of::<ctlname>() - 8usize];
    ["Offset of field: ctlname::ctl_name"][::std::mem::offset_of!(ctlname, ctl_name) - 0usize];
    ["Offset of field: ctlname::ctl_type"][::std::mem::offset_of!(ctlname, ctl_type) - 8usize];
};
unsafe extern "C" {
    pub fn sysctl(
        arg1: *const ::std::os::raw::c_int,
        arg2: u_int,
        arg3: *mut ::std::os::raw::c_void,
        arg4: *mut usize,
        arg5: *const ::std::os::raw::c_void,
        arg6: usize,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn sysctlbyname(
        arg1: *const ::std::os::raw::c_char,
        arg2: *mut ::std::os::raw::c_void,
        arg3: *mut usize,
        arg4: *const ::std::os::raw::c_void,
        arg5: usize,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn sysctlnametomib(
        arg1: *const ::std::os::raw::c_char,
        arg2: *mut ::std::os::raw::c_int,
        arg3: *mut usize,
    ) -> ::std::os::raw::c_int;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct iovec {
    pub iov_base: *mut ::std::os::raw::c_void,
    pub iov_len: usize,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of iovec"][::std::mem::size_of::<iovec>() - 16usize];
    ["Alignment of iovec"][::std::mem::align_of::<iovec>() - 8usize];
    ["Offset of field: iovec::iov_base"][::std::mem::offset_of!(iovec, iov_base) - 0usize];
    ["Offset of field: iovec::iov_len"][::std::mem::offset_of!(iovec, iov_len) - 8usize];
};
pub type sa_family_t = __sa_family_t;
pub type socklen_t = __socklen_t;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct linger {
    pub l_onoff: ::std::os::raw::c_int,
    pub l_linger: ::std::os::raw::c_int,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of linger"][::std::mem::size_of::<linger>() - 8usize];
    ["Alignment of linger"][::std::mem::align_of::<linger>() - 4usize];
    ["Offset of field: linger::l_onoff"][::std::mem::offset_of!(linger, l_onoff) - 0usize];
    ["Offset of field: linger::l_linger"][::std::mem::offset_of!(linger, l_linger) - 4usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct accept_filter_arg {
    pub af_name: [::std::os::raw::c_char; 16usize],
    pub af_arg: [::std::os::raw::c_char; 240usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of accept_filter_arg"][::std::mem::size_of::<accept_filter_arg>() - 256usize];
    ["Alignment of accept_filter_arg"][::std::mem::align_of::<accept_filter_arg>() - 1usize];
    ["Offset of field: accept_filter_arg::af_name"]
        [::std::mem::offset_of!(accept_filter_arg, af_name) - 0usize];
    ["Offset of field: accept_filter_arg::af_arg"]
        [::std::mem::offset_of!(accept_filter_arg, af_arg) - 16usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct sockaddr {
    pub sa_len: ::std::os::raw::c_uchar,
    pub sa_family: sa_family_t,
    pub sa_data: [::std::os::raw::c_char; 14usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of sockaddr"][::std::mem::size_of::<sockaddr>() - 16usize];
    ["Alignment of sockaddr"][::std::mem::align_of::<sockaddr>() - 1usize];
    ["Offset of field: sockaddr::sa_len"][::std::mem::offset_of!(sockaddr, sa_len) - 0usize];
    ["Offset of field: sockaddr::sa_family"][::std::mem::offset_of!(sockaddr, sa_family) - 1usize];
    ["Offset of field: sockaddr::sa_data"][::std::mem::offset_of!(sockaddr, sa_data) - 2usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct sockproto {
    pub sp_family: ::std::os::raw::c_ushort,
    pub sp_protocol: ::std::os::raw::c_ushort,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of sockproto"][::std::mem::size_of::<sockproto>() - 4usize];
    ["Alignment of sockproto"][::std::mem::align_of::<sockproto>() - 2usize];
    ["Offset of field: sockproto::sp_family"]
        [::std::mem::offset_of!(sockproto, sp_family) - 0usize];
    ["Offset of field: sockproto::sp_protocol"]
        [::std::mem::offset_of!(sockproto, sp_protocol) - 2usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct sockaddr_storage {
    pub ss_len: ::std::os::raw::c_uchar,
    pub ss_family: sa_family_t,
    pub __ss_pad1: [::std::os::raw::c_char; 6usize],
    pub __ss_align: __int64_t,
    pub __ss_pad2: [::std::os::raw::c_char; 112usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of sockaddr_storage"][::std::mem::size_of::<sockaddr_storage>() - 128usize];
    ["Alignment of sockaddr_storage"][::std::mem::align_of::<sockaddr_storage>() - 8usize];
    ["Offset of field: sockaddr_storage::ss_len"]
        [::std::mem::offset_of!(sockaddr_storage, ss_len) - 0usize];
    ["Offset of field: sockaddr_storage::ss_family"]
        [::std::mem::offset_of!(sockaddr_storage, ss_family) - 1usize];
    ["Offset of field: sockaddr_storage::__ss_pad1"]
        [::std::mem::offset_of!(sockaddr_storage, __ss_pad1) - 2usize];
    ["Offset of field: sockaddr_storage::__ss_align"]
        [::std::mem::offset_of!(sockaddr_storage, __ss_align) - 8usize];
    ["Offset of field: sockaddr_storage::__ss_pad2"]
        [::std::mem::offset_of!(sockaddr_storage, __ss_pad2) - 16usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct msghdr {
    pub msg_name: *mut ::std::os::raw::c_void,
    pub msg_namelen: socklen_t,
    pub msg_iov: *mut iovec,
    pub msg_iovlen: ::std::os::raw::c_int,
    pub msg_control: *mut ::std::os::raw::c_void,
    pub msg_controllen: socklen_t,
    pub msg_flags: ::std::os::raw::c_int,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of msghdr"][::std::mem::size_of::<msghdr>() - 48usize];
    ["Alignment of msghdr"][::std::mem::align_of::<msghdr>() - 8usize];
    ["Offset of field: msghdr::msg_name"][::std::mem::offset_of!(msghdr, msg_name) - 0usize];
    ["Offset of field: msghdr::msg_namelen"][::std::mem::offset_of!(msghdr, msg_namelen) - 8usize];
    ["Offset of field: msghdr::msg_iov"][::std::mem::offset_of!(msghdr, msg_iov) - 16usize];
    ["Offset of field: msghdr::msg_iovlen"][::std::mem::offset_of!(msghdr, msg_iovlen) - 24usize];
    ["Offset of field: msghdr::msg_control"][::std::mem::offset_of!(msghdr, msg_control) - 32usize];
    ["Offset of field: msghdr::msg_controllen"]
        [::std::mem::offset_of!(msghdr, msg_controllen) - 40usize];
    ["Offset of field: msghdr::msg_flags"][::std::mem::offset_of!(msghdr, msg_flags) - 44usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct cmsghdr {
    pub cmsg_len: socklen_t,
    pub cmsg_level: ::std::os::raw::c_int,
    pub cmsg_type: ::std::os::raw::c_int,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of cmsghdr"][::std::mem::size_of::<cmsghdr>() - 12usize];
    ["Alignment of cmsghdr"][::std::mem::align_of::<cmsghdr>() - 4usize];
    ["Offset of field: cmsghdr::cmsg_len"][::std::mem::offset_of!(cmsghdr, cmsg_len) - 0usize];
    ["Offset of field: cmsghdr::cmsg_level"][::std::mem::offset_of!(cmsghdr, cmsg_level) - 4usize];
    ["Offset of field: cmsghdr::cmsg_type"][::std::mem::offset_of!(cmsghdr, cmsg_type) - 8usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct cmsgcred {
    pub cmcred_pid: pid_t,
    pub cmcred_uid: uid_t,
    pub cmcred_euid: uid_t,
    pub cmcred_gid: gid_t,
    pub cmcred_ngroups: ::std::os::raw::c_short,
    pub cmcred_groups: [gid_t; 16usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of cmsgcred"][::std::mem::size_of::<cmsgcred>() - 84usize];
    ["Alignment of cmsgcred"][::std::mem::align_of::<cmsgcred>() - 4usize];
    ["Offset of field: cmsgcred::cmcred_pid"]
        [::std::mem::offset_of!(cmsgcred, cmcred_pid) - 0usize];
    ["Offset of field: cmsgcred::cmcred_uid"]
        [::std::mem::offset_of!(cmsgcred, cmcred_uid) - 4usize];
    ["Offset of field: cmsgcred::cmcred_euid"]
        [::std::mem::offset_of!(cmsgcred, cmcred_euid) - 8usize];
    ["Offset of field: cmsgcred::cmcred_gid"]
        [::std::mem::offset_of!(cmsgcred, cmcred_gid) - 12usize];
    ["Offset of field: cmsgcred::cmcred_ngroups"]
        [::std::mem::offset_of!(cmsgcred, cmcred_ngroups) - 16usize];
    ["Offset of field: cmsgcred::cmcred_groups"]
        [::std::mem::offset_of!(cmsgcred, cmcred_groups) - 20usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct sockcred {
    pub sc_uid: uid_t,
    pub sc_euid: uid_t,
    pub sc_gid: gid_t,
    pub sc_egid: gid_t,
    pub sc_ngroups: ::std::os::raw::c_int,
    pub sc_groups: [gid_t; 1usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of sockcred"][::std::mem::size_of::<sockcred>() - 24usize];
    ["Alignment of sockcred"][::std::mem::align_of::<sockcred>() - 4usize];
    ["Offset of field: sockcred::sc_uid"][::std::mem::offset_of!(sockcred, sc_uid) - 0usize];
    ["Offset of field: sockcred::sc_euid"][::std::mem::offset_of!(sockcred, sc_euid) - 4usize];
    ["Offset of field: sockcred::sc_gid"][::std::mem::offset_of!(sockcred, sc_gid) - 8usize];
    ["Offset of field: sockcred::sc_egid"][::std::mem::offset_of!(sockcred, sc_egid) - 12usize];
    ["Offset of field: sockcred::sc_ngroups"]
        [::std::mem::offset_of!(sockcred, sc_ngroups) - 16usize];
    ["Offset of field: sockcred::sc_groups"][::std::mem::offset_of!(sockcred, sc_groups) - 20usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct sockcred2 {
    pub sc_version: ::std::os::raw::c_int,
    pub sc_pid: pid_t,
    pub sc_uid: uid_t,
    pub sc_euid: uid_t,
    pub sc_gid: gid_t,
    pub sc_egid: gid_t,
    pub sc_ngroups: ::std::os::raw::c_int,
    pub sc_groups: [gid_t; 1usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of sockcred2"][::std::mem::size_of::<sockcred2>() - 32usize];
    ["Alignment of sockcred2"][::std::mem::align_of::<sockcred2>() - 4usize];
    ["Offset of field: sockcred2::sc_version"]
        [::std::mem::offset_of!(sockcred2, sc_version) - 0usize];
    ["Offset of field: sockcred2::sc_pid"][::std::mem::offset_of!(sockcred2, sc_pid) - 4usize];
    ["Offset of field: sockcred2::sc_uid"][::std::mem::offset_of!(sockcred2, sc_uid) - 8usize];
    ["Offset of field: sockcred2::sc_euid"][::std::mem::offset_of!(sockcred2, sc_euid) - 12usize];
    ["Offset of field: sockcred2::sc_gid"][::std::mem::offset_of!(sockcred2, sc_gid) - 16usize];
    ["Offset of field: sockcred2::sc_egid"][::std::mem::offset_of!(sockcred2, sc_egid) - 20usize];
    ["Offset of field: sockcred2::sc_ngroups"]
        [::std::mem::offset_of!(sockcred2, sc_ngroups) - 24usize];
    ["Offset of field: sockcred2::sc_groups"]
        [::std::mem::offset_of!(sockcred2, sc_groups) - 28usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct sock_timestamp_info {
    pub st_info_flags: __uint32_t,
    pub st_info_pad0: __uint32_t,
    pub st_info_rsv: [__uint64_t; 7usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of sock_timestamp_info"][::std::mem::size_of::<sock_timestamp_info>() - 64usize];
    ["Alignment of sock_timestamp_info"][::std::mem::align_of::<sock_timestamp_info>() - 8usize];
    ["Offset of field: sock_timestamp_info::st_info_flags"]
        [::std::mem::offset_of!(sock_timestamp_info, st_info_flags) - 0usize];
    ["Offset of field: sock_timestamp_info::st_info_pad0"]
        [::std::mem::offset_of!(sock_timestamp_info, st_info_pad0) - 4usize];
    ["Offset of field: sock_timestamp_info::st_info_rsv"]
        [::std::mem::offset_of!(sock_timestamp_info, st_info_rsv) - 8usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct osockaddr {
    pub sa_family: ::std::os::raw::c_ushort,
    pub sa_data: [::std::os::raw::c_char; 14usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of osockaddr"][::std::mem::size_of::<osockaddr>() - 16usize];
    ["Alignment of osockaddr"][::std::mem::align_of::<osockaddr>() - 2usize];
    ["Offset of field: osockaddr::sa_family"]
        [::std::mem::offset_of!(osockaddr, sa_family) - 0usize];
    ["Offset of field: osockaddr::sa_data"][::std::mem::offset_of!(osockaddr, sa_data) - 2usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct omsghdr {
    pub msg_name: *mut ::std::os::raw::c_char,
    pub msg_namelen: ::std::os::raw::c_int,
    pub msg_iov: *mut iovec,
    pub msg_iovlen: ::std::os::raw::c_int,
    pub msg_accrights: *mut ::std::os::raw::c_char,
    pub msg_accrightslen: ::std::os::raw::c_int,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of omsghdr"][::std::mem::size_of::<omsghdr>() - 48usize];
    ["Alignment of omsghdr"][::std::mem::align_of::<omsghdr>() - 8usize];
    ["Offset of field: omsghdr::msg_name"][::std::mem::offset_of!(omsghdr, msg_name) - 0usize];
    ["Offset of field: omsghdr::msg_namelen"]
        [::std::mem::offset_of!(omsghdr, msg_namelen) - 8usize];
    ["Offset of field: omsghdr::msg_iov"][::std::mem::offset_of!(omsghdr, msg_iov) - 16usize];
    ["Offset of field: omsghdr::msg_iovlen"][::std::mem::offset_of!(omsghdr, msg_iovlen) - 24usize];
    ["Offset of field: omsghdr::msg_accrights"]
        [::std::mem::offset_of!(omsghdr, msg_accrights) - 32usize];
    ["Offset of field: omsghdr::msg_accrightslen"]
        [::std::mem::offset_of!(omsghdr, msg_accrightslen) - 40usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct sf_hdtr {
    pub headers: *mut iovec,
    pub hdr_cnt: ::std::os::raw::c_int,
    pub trailers: *mut iovec,
    pub trl_cnt: ::std::os::raw::c_int,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of sf_hdtr"][::std::mem::size_of::<sf_hdtr>() - 32usize];
    ["Alignment of sf_hdtr"][::std::mem::align_of::<sf_hdtr>() - 8usize];
    ["Offset of field: sf_hdtr::headers"][::std::mem::offset_of!(sf_hdtr, headers) - 0usize];
    ["Offset of field: sf_hdtr::hdr_cnt"][::std::mem::offset_of!(sf_hdtr, hdr_cnt) - 8usize];
    ["Offset of field: sf_hdtr::trailers"][::std::mem::offset_of!(sf_hdtr, trailers) - 16usize];
    ["Offset of field: sf_hdtr::trl_cnt"][::std::mem::offset_of!(sf_hdtr, trl_cnt) - 24usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct mmsghdr {
    pub msg_hdr: msghdr,
    pub msg_len: isize,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of mmsghdr"][::std::mem::size_of::<mmsghdr>() - 56usize];
    ["Alignment of mmsghdr"][::std::mem::align_of::<mmsghdr>() - 8usize];
    ["Offset of field: mmsghdr::msg_hdr"][::std::mem::offset_of!(mmsghdr, msg_hdr) - 0usize];
    ["Offset of field: mmsghdr::msg_len"][::std::mem::offset_of!(mmsghdr, msg_len) - 48usize];
};
unsafe extern "C" {
    pub fn accept(
        arg1: ::std::os::raw::c_int,
        arg2: *mut sockaddr,
        arg3: *mut socklen_t,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn bind(
        arg1: ::std::os::raw::c_int,
        arg2: *const sockaddr,
        arg3: socklen_t,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn connect(
        arg1: ::std::os::raw::c_int,
        arg2: *const sockaddr,
        arg3: socklen_t,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn accept4(
        arg1: ::std::os::raw::c_int,
        arg2: *mut sockaddr,
        arg3: *mut socklen_t,
        arg4: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn bindat(
        arg1: ::std::os::raw::c_int,
        arg2: ::std::os::raw::c_int,
        arg3: *const sockaddr,
        arg4: socklen_t,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn connectat(
        arg1: ::std::os::raw::c_int,
        arg2: ::std::os::raw::c_int,
        arg3: *const sockaddr,
        arg4: socklen_t,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn getpeername(
        arg1: ::std::os::raw::c_int,
        arg2: *mut sockaddr,
        arg3: *mut socklen_t,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn getsockname(
        arg1: ::std::os::raw::c_int,
        arg2: *mut sockaddr,
        arg3: *mut socklen_t,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn getsockopt(
        arg1: ::std::os::raw::c_int,
        arg2: ::std::os::raw::c_int,
        arg3: ::std::os::raw::c_int,
        arg4: *mut ::std::os::raw::c_void,
        arg5: *mut socklen_t,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn listen(
        arg1: ::std::os::raw::c_int,
        arg2: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn recv(
        arg1: ::std::os::raw::c_int,
        arg2: *mut ::std::os::raw::c_void,
        arg3: usize,
        arg4: ::std::os::raw::c_int,
    ) -> isize;
}
unsafe extern "C" {
    pub fn recvfrom(
        arg1: ::std::os::raw::c_int,
        arg2: *mut ::std::os::raw::c_void,
        arg3: usize,
        arg4: ::std::os::raw::c_int,
        arg5: *mut sockaddr,
        arg6: *mut socklen_t,
    ) -> isize;
}
unsafe extern "C" {
    pub fn recvmsg(
        arg1: ::std::os::raw::c_int,
        arg2: *mut msghdr,
        arg3: ::std::os::raw::c_int,
    ) -> isize;
}
unsafe extern "C" {
    pub fn recvmmsg(
        arg1: ::std::os::raw::c_int,
        arg2: *mut mmsghdr,
        arg3: usize,
        arg4: ::std::os::raw::c_int,
        arg5: *const timespec,
    ) -> isize;
}
unsafe extern "C" {
    pub fn send(
        arg1: ::std::os::raw::c_int,
        arg2: *const ::std::os::raw::c_void,
        arg3: usize,
        arg4: ::std::os::raw::c_int,
    ) -> isize;
}
unsafe extern "C" {
    pub fn sendto(
        arg1: ::std::os::raw::c_int,
        arg2: *const ::std::os::raw::c_void,
        arg3: usize,
        arg4: ::std::os::raw::c_int,
        arg5: *const sockaddr,
        arg6: socklen_t,
    ) -> isize;
}
unsafe extern "C" {
    pub fn sendmsg(
        arg1: ::std::os::raw::c_int,
        arg2: *const msghdr,
        arg3: ::std::os::raw::c_int,
    ) -> isize;
}
unsafe extern "C" {
    pub fn sendfile(
        arg1: ::std::os::raw::c_int,
        arg2: ::std::os::raw::c_int,
        arg3: off_t,
        arg4: usize,
        arg5: *mut sf_hdtr,
        arg6: *mut off_t,
        arg7: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn sendmmsg(
        arg1: ::std::os::raw::c_int,
        arg2: *mut mmsghdr,
        arg3: usize,
        arg4: ::std::os::raw::c_int,
    ) -> isize;
}
unsafe extern "C" {
    pub fn setfib(arg1: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn setsockopt(
        arg1: ::std::os::raw::c_int,
        arg2: ::std::os::raw::c_int,
        arg3: ::std::os::raw::c_int,
        arg4: *const ::std::os::raw::c_void,
        arg5: socklen_t,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn shutdown(
        arg1: ::std::os::raw::c_int,
        arg2: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn sockatmark(arg1: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn socket(
        arg1: ::std::os::raw::c_int,
        arg2: ::std::os::raw::c_int,
        arg3: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn socketpair(
        arg1: ::std::os::raw::c_int,
        arg2: ::std::os::raw::c_int,
        arg3: ::std::os::raw::c_int,
        arg4: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct in_addr {
    pub s_addr: in_addr_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of in_addr"][::std::mem::size_of::<in_addr>() - 4usize];
    ["Alignment of in_addr"][::std::mem::align_of::<in_addr>() - 4usize];
    ["Offset of field: in_addr::s_addr"][::std::mem::offset_of!(in_addr, s_addr) - 0usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct sockaddr_in {
    pub sin_len: u8,
    pub sin_family: sa_family_t,
    pub sin_port: in_port_t,
    pub sin_addr: in_addr,
    pub sin_zero: [::std::os::raw::c_char; 8usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of sockaddr_in"][::std::mem::size_of::<sockaddr_in>() - 16usize];
    ["Alignment of sockaddr_in"][::std::mem::align_of::<sockaddr_in>() - 4usize];
    ["Offset of field: sockaddr_in::sin_len"]
        [::std::mem::offset_of!(sockaddr_in, sin_len) - 0usize];
    ["Offset of field: sockaddr_in::sin_family"]
        [::std::mem::offset_of!(sockaddr_in, sin_family) - 1usize];
    ["Offset of field: sockaddr_in::sin_port"]
        [::std::mem::offset_of!(sockaddr_in, sin_port) - 2usize];
    ["Offset of field: sockaddr_in::sin_addr"]
        [::std::mem::offset_of!(sockaddr_in, sin_addr) - 4usize];
    ["Offset of field: sockaddr_in::sin_zero"]
        [::std::mem::offset_of!(sockaddr_in, sin_zero) - 8usize];
};
unsafe extern "C" {
    pub fn htonl(arg1: u32) -> u32;
}
unsafe extern "C" {
    pub fn htons(arg1: u16) -> u16;
}
unsafe extern "C" {
    pub fn ntohl(arg1: u32) -> u32;
}
unsafe extern "C" {
    pub fn ntohs(arg1: u16) -> u16;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ip_mreq {
    pub imr_multiaddr: in_addr,
    pub imr_interface: in_addr,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of ip_mreq"][::std::mem::size_of::<ip_mreq>() - 8usize];
    ["Alignment of ip_mreq"][::std::mem::align_of::<ip_mreq>() - 4usize];
    ["Offset of field: ip_mreq::imr_multiaddr"]
        [::std::mem::offset_of!(ip_mreq, imr_multiaddr) - 0usize];
    ["Offset of field: ip_mreq::imr_interface"]
        [::std::mem::offset_of!(ip_mreq, imr_interface) - 4usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ip_mreqn {
    pub imr_multiaddr: in_addr,
    pub imr_address: in_addr,
    pub imr_ifindex: ::std::os::raw::c_int,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of ip_mreqn"][::std::mem::size_of::<ip_mreqn>() - 12usize];
    ["Alignment of ip_mreqn"][::std::mem::align_of::<ip_mreqn>() - 4usize];
    ["Offset of field: ip_mreqn::imr_multiaddr"]
        [::std::mem::offset_of!(ip_mreqn, imr_multiaddr) - 0usize];
    ["Offset of field: ip_mreqn::imr_address"]
        [::std::mem::offset_of!(ip_mreqn, imr_address) - 4usize];
    ["Offset of field: ip_mreqn::imr_ifindex"]
        [::std::mem::offset_of!(ip_mreqn, imr_ifindex) - 8usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ip_mreq_source {
    pub imr_multiaddr: in_addr,
    pub imr_sourceaddr: in_addr,
    pub imr_interface: in_addr,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of ip_mreq_source"][::std::mem::size_of::<ip_mreq_source>() - 12usize];
    ["Alignment of ip_mreq_source"][::std::mem::align_of::<ip_mreq_source>() - 4usize];
    ["Offset of field: ip_mreq_source::imr_multiaddr"]
        [::std::mem::offset_of!(ip_mreq_source, imr_multiaddr) - 0usize];
    ["Offset of field: ip_mreq_source::imr_sourceaddr"]
        [::std::mem::offset_of!(ip_mreq_source, imr_sourceaddr) - 4usize];
    ["Offset of field: ip_mreq_source::imr_interface"]
        [::std::mem::offset_of!(ip_mreq_source, imr_interface) - 8usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct group_req {
    pub gr_interface: u32,
    pub gr_group: sockaddr_storage,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of group_req"][::std::mem::size_of::<group_req>() - 136usize];
    ["Alignment of group_req"][::std::mem::align_of::<group_req>() - 8usize];
    ["Offset of field: group_req::gr_interface"]
        [::std::mem::offset_of!(group_req, gr_interface) - 0usize];
    ["Offset of field: group_req::gr_group"][::std::mem::offset_of!(group_req, gr_group) - 8usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct group_source_req {
    pub gsr_interface: u32,
    pub gsr_group: sockaddr_storage,
    pub gsr_source: sockaddr_storage,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of group_source_req"][::std::mem::size_of::<group_source_req>() - 264usize];
    ["Alignment of group_source_req"][::std::mem::align_of::<group_source_req>() - 8usize];
    ["Offset of field: group_source_req::gsr_interface"]
        [::std::mem::offset_of!(group_source_req, gsr_interface) - 0usize];
    ["Offset of field: group_source_req::gsr_group"]
        [::std::mem::offset_of!(group_source_req, gsr_group) - 8usize];
    ["Offset of field: group_source_req::gsr_source"]
        [::std::mem::offset_of!(group_source_req, gsr_source) - 136usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __msfilterreq {
    pub msfr_ifindex: u32,
    pub msfr_fmode: u32,
    pub msfr_nsrcs: u32,
    pub msfr_group: sockaddr_storage,
    pub msfr_srcs: *mut sockaddr_storage,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of __msfilterreq"][::std::mem::size_of::<__msfilterreq>() - 152usize];
    ["Alignment of __msfilterreq"][::std::mem::align_of::<__msfilterreq>() - 8usize];
    ["Offset of field: __msfilterreq::msfr_ifindex"]
        [::std::mem::offset_of!(__msfilterreq, msfr_ifindex) - 0usize];
    ["Offset of field: __msfilterreq::msfr_fmode"]
        [::std::mem::offset_of!(__msfilterreq, msfr_fmode) - 4usize];
    ["Offset of field: __msfilterreq::msfr_nsrcs"]
        [::std::mem::offset_of!(__msfilterreq, msfr_nsrcs) - 8usize];
    ["Offset of field: __msfilterreq::msfr_group"]
        [::std::mem::offset_of!(__msfilterreq, msfr_group) - 16usize];
    ["Offset of field: __msfilterreq::msfr_srcs"]
        [::std::mem::offset_of!(__msfilterreq, msfr_srcs) - 144usize];
};
unsafe extern "C" {
    pub fn setipv4sourcefilter(
        arg1: ::std::os::raw::c_int,
        arg2: in_addr,
        arg3: in_addr,
        arg4: u32,
        arg5: u32,
        arg6: *mut in_addr,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn getipv4sourcefilter(
        arg1: ::std::os::raw::c_int,
        arg2: in_addr,
        arg3: in_addr,
        arg4: *mut u32,
        arg5: *mut u32,
        arg6: *mut in_addr,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn setsourcefilter(
        arg1: ::std::os::raw::c_int,
        arg2: u32,
        arg3: *mut sockaddr,
        arg4: socklen_t,
        arg5: u32,
        arg6: u32,
        arg7: *mut sockaddr_storage,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn getsourcefilter(
        arg1: ::std::os::raw::c_int,
        arg2: u32,
        arg3: *mut sockaddr,
        arg4: socklen_t,
        arg5: *mut u32,
        arg6: *mut u32,
        arg7: *mut sockaddr_storage,
    ) -> ::std::os::raw::c_int;
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct in6_addr {
    pub __u6_addr: in6_addr__bindgen_ty_1,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union in6_addr__bindgen_ty_1 {
    pub __u6_addr8: [u8; 16usize],
    pub __u6_addr16: [u16; 8usize],
    pub __u6_addr32: [u32; 4usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of in6_addr__bindgen_ty_1"][::std::mem::size_of::<in6_addr__bindgen_ty_1>() - 16usize];
    ["Alignment of in6_addr__bindgen_ty_1"]
        [::std::mem::align_of::<in6_addr__bindgen_ty_1>() - 4usize];
    ["Offset of field: in6_addr__bindgen_ty_1::__u6_addr8"]
        [::std::mem::offset_of!(in6_addr__bindgen_ty_1, __u6_addr8) - 0usize];
    ["Offset of field: in6_addr__bindgen_ty_1::__u6_addr16"]
        [::std::mem::offset_of!(in6_addr__bindgen_ty_1, __u6_addr16) - 0usize];
    ["Offset of field: in6_addr__bindgen_ty_1::__u6_addr32"]
        [::std::mem::offset_of!(in6_addr__bindgen_ty_1, __u6_addr32) - 0usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of in6_addr"][::std::mem::size_of::<in6_addr>() - 16usize];
    ["Alignment of in6_addr"][::std::mem::align_of::<in6_addr>() - 4usize];
    ["Offset of field: in6_addr::__u6_addr"][::std::mem::offset_of!(in6_addr, __u6_addr) - 0usize];
};
#[repr(C)]
#[derive(Copy, Clone)]
pub struct sockaddr_in6 {
    pub sin6_len: u8,
    pub sin6_family: sa_family_t,
    pub sin6_port: in_port_t,
    pub sin6_flowinfo: u32,
    pub sin6_addr: in6_addr,
    pub sin6_scope_id: u32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of sockaddr_in6"][::std::mem::size_of::<sockaddr_in6>() - 28usize];
    ["Alignment of sockaddr_in6"][::std::mem::align_of::<sockaddr_in6>() - 4usize];
    ["Offset of field: sockaddr_in6::sin6_len"]
        [::std::mem::offset_of!(sockaddr_in6, sin6_len) - 0usize];
    ["Offset of field: sockaddr_in6::sin6_family"]
        [::std::mem::offset_of!(sockaddr_in6, sin6_family) - 1usize];
    ["Offset of field: sockaddr_in6::sin6_port"]
        [::std::mem::offset_of!(sockaddr_in6, sin6_port) - 2usize];
    ["Offset of field: sockaddr_in6::sin6_flowinfo"]
        [::std::mem::offset_of!(sockaddr_in6, sin6_flowinfo) - 4usize];
    ["Offset of field: sockaddr_in6::sin6_addr"]
        [::std::mem::offset_of!(sockaddr_in6, sin6_addr) - 8usize];
    ["Offset of field: sockaddr_in6::sin6_scope_id"]
        [::std::mem::offset_of!(sockaddr_in6, sin6_scope_id) - 24usize];
};
unsafe extern "C" {
    pub static in6addr_any: in6_addr;
}
unsafe extern "C" {
    pub static in6addr_loopback: in6_addr;
}
unsafe extern "C" {
    pub static in6addr_nodelocal_allnodes: in6_addr;
}
unsafe extern "C" {
    pub static in6addr_linklocal_allnodes: in6_addr;
}
unsafe extern "C" {
    pub static in6addr_linklocal_allrouters: in6_addr;
}
unsafe extern "C" {
    pub static in6addr_linklocal_allv2routers: in6_addr;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct nhop_object {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct route_in6 {
    pub ro_nh: *mut nhop_object,
    pub ro_lle: *mut llentry,
    pub ro_prepend: *mut ::std::os::raw::c_char,
    pub ro_plen: u16,
    pub ro_flags: u16,
    pub ro_mtu: u16,
    pub spare: u16,
    pub ro_dst: sockaddr_in6,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of route_in6"][::std::mem::size_of::<route_in6>() - 64usize];
    ["Alignment of route_in6"][::std::mem::align_of::<route_in6>() - 8usize];
    ["Offset of field: route_in6::ro_nh"][::std::mem::offset_of!(route_in6, ro_nh) - 0usize];
    ["Offset of field: route_in6::ro_lle"][::std::mem::offset_of!(route_in6, ro_lle) - 8usize];
    ["Offset of field: route_in6::ro_prepend"]
        [::std::mem::offset_of!(route_in6, ro_prepend) - 16usize];
    ["Offset of field: route_in6::ro_plen"][::std::mem::offset_of!(route_in6, ro_plen) - 24usize];
    ["Offset of field: route_in6::ro_flags"][::std::mem::offset_of!(route_in6, ro_flags) - 26usize];
    ["Offset of field: route_in6::ro_mtu"][::std::mem::offset_of!(route_in6, ro_mtu) - 28usize];
    ["Offset of field: route_in6::spare"][::std::mem::offset_of!(route_in6, spare) - 30usize];
    ["Offset of field: route_in6::ro_dst"][::std::mem::offset_of!(route_in6, ro_dst) - 32usize];
};
#[repr(C)]
#[derive(Copy, Clone)]
pub struct ipv6_mreq {
    pub ipv6mr_multiaddr: in6_addr,
    pub ipv6mr_interface: ::std::os::raw::c_uint,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of ipv6_mreq"][::std::mem::size_of::<ipv6_mreq>() - 20usize];
    ["Alignment of ipv6_mreq"][::std::mem::align_of::<ipv6_mreq>() - 4usize];
    ["Offset of field: ipv6_mreq::ipv6mr_multiaddr"]
        [::std::mem::offset_of!(ipv6_mreq, ipv6mr_multiaddr) - 0usize];
    ["Offset of field: ipv6_mreq::ipv6mr_interface"]
        [::std::mem::offset_of!(ipv6_mreq, ipv6mr_interface) - 16usize];
};
#[repr(C)]
#[derive(Copy, Clone)]
pub struct in6_pktinfo {
    pub ipi6_addr: in6_addr,
    pub ipi6_ifindex: ::std::os::raw::c_uint,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of in6_pktinfo"][::std::mem::size_of::<in6_pktinfo>() - 20usize];
    ["Alignment of in6_pktinfo"][::std::mem::align_of::<in6_pktinfo>() - 4usize];
    ["Offset of field: in6_pktinfo::ipi6_addr"]
        [::std::mem::offset_of!(in6_pktinfo, ipi6_addr) - 0usize];
    ["Offset of field: in6_pktinfo::ipi6_ifindex"]
        [::std::mem::offset_of!(in6_pktinfo, ipi6_ifindex) - 16usize];
};
#[repr(C)]
#[derive(Copy, Clone)]
pub struct ip6_mtuinfo {
    pub ip6m_addr: sockaddr_in6,
    pub ip6m_mtu: u32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of ip6_mtuinfo"][::std::mem::size_of::<ip6_mtuinfo>() - 32usize];
    ["Alignment of ip6_mtuinfo"][::std::mem::align_of::<ip6_mtuinfo>() - 4usize];
    ["Offset of field: ip6_mtuinfo::ip6m_addr"]
        [::std::mem::offset_of!(ip6_mtuinfo, ip6m_addr) - 0usize];
    ["Offset of field: ip6_mtuinfo::ip6m_mtu"]
        [::std::mem::offset_of!(ip6_mtuinfo, ip6m_mtu) - 28usize];
};
unsafe extern "C" {
    pub fn inet6_option_space(arg1: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn inet6_option_init(
        arg1: *mut ::std::os::raw::c_void,
        arg2: *mut *mut cmsghdr,
        arg3: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn inet6_option_append(
        arg1: *mut cmsghdr,
        arg2: *const u8,
        arg3: ::std::os::raw::c_int,
        arg4: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn inet6_option_alloc(
        arg1: *mut cmsghdr,
        arg2: ::std::os::raw::c_int,
        arg3: ::std::os::raw::c_int,
        arg4: ::std::os::raw::c_int,
    ) -> *mut u8;
}
unsafe extern "C" {
    pub fn inet6_option_next(arg1: *const cmsghdr, arg2: *mut *mut u8) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn inet6_option_find(
        arg1: *const cmsghdr,
        arg2: *mut *mut u8,
        arg3: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn inet6_rthdr_space(arg1: ::std::os::raw::c_int, arg2: ::std::os::raw::c_int) -> usize;
}
unsafe extern "C" {
    pub fn inet6_rthdr_init(
        arg1: *mut ::std::os::raw::c_void,
        arg2: ::std::os::raw::c_int,
    ) -> *mut cmsghdr;
}
unsafe extern "C" {
    pub fn inet6_rthdr_add(
        arg1: *mut cmsghdr,
        arg2: *const in6_addr,
        arg3: ::std::os::raw::c_uint,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn inet6_rthdr_lasthop(
        arg1: *mut cmsghdr,
        arg2: ::std::os::raw::c_uint,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn inet6_rthdr_segments(arg1: *const cmsghdr) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn inet6_rthdr_getaddr(arg1: *mut cmsghdr, arg2: ::std::os::raw::c_int) -> *mut in6_addr;
}
unsafe extern "C" {
    pub fn inet6_rthdr_getflags(
        arg1: *const cmsghdr,
        arg2: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn inet6_opt_init(
        arg1: *mut ::std::os::raw::c_void,
        arg2: socklen_t,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn inet6_opt_append(
        arg1: *mut ::std::os::raw::c_void,
        arg2: socklen_t,
        arg3: ::std::os::raw::c_int,
        arg4: u8,
        arg5: socklen_t,
        arg6: u8,
        arg7: *mut *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn inet6_opt_finish(
        arg1: *mut ::std::os::raw::c_void,
        arg2: socklen_t,
        arg3: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn inet6_opt_set_val(
        arg1: *mut ::std::os::raw::c_void,
        arg2: ::std::os::raw::c_int,
        arg3: *mut ::std::os::raw::c_void,
        arg4: socklen_t,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn inet6_opt_next(
        arg1: *mut ::std::os::raw::c_void,
        arg2: socklen_t,
        arg3: ::std::os::raw::c_int,
        arg4: *mut u8,
        arg5: *mut socklen_t,
        arg6: *mut *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn inet6_opt_find(
        arg1: *mut ::std::os::raw::c_void,
        arg2: socklen_t,
        arg3: ::std::os::raw::c_int,
        arg4: u8,
        arg5: *mut socklen_t,
        arg6: *mut *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn inet6_opt_get_val(
        arg1: *mut ::std::os::raw::c_void,
        arg2: ::std::os::raw::c_int,
        arg3: *mut ::std::os::raw::c_void,
        arg4: socklen_t,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn inet6_rth_space(arg1: ::std::os::raw::c_int, arg2: ::std::os::raw::c_int) -> socklen_t;
}
unsafe extern "C" {
    pub fn inet6_rth_init(
        arg1: *mut ::std::os::raw::c_void,
        arg2: socklen_t,
        arg3: ::std::os::raw::c_int,
        arg4: ::std::os::raw::c_int,
    ) -> *mut ::std::os::raw::c_void;
}
unsafe extern "C" {
    pub fn inet6_rth_add(
        arg1: *mut ::std::os::raw::c_void,
        arg2: *const in6_addr,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn inet6_rth_reverse(
        arg1: *const ::std::os::raw::c_void,
        arg2: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn inet6_rth_segments(arg1: *const ::std::os::raw::c_void) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn inet6_rth_getaddr(
        arg1: *const ::std::os::raw::c_void,
        arg2: ::std::os::raw::c_int,
    ) -> *mut in6_addr;
}
unsafe extern "C" {
    pub fn __inet_addr(arg1: *const ::std::os::raw::c_char) -> in_addr_t;
}
unsafe extern "C" {
    pub fn __inet_ntoa(arg1: in_addr) -> *mut ::std::os::raw::c_char;
}
unsafe extern "C" {
    pub fn __inet_ntop(
        arg1: ::std::os::raw::c_int,
        arg2: *const ::std::os::raw::c_void,
        arg3: *mut ::std::os::raw::c_char,
        arg4: socklen_t,
    ) -> *const ::std::os::raw::c_char;
}
unsafe extern "C" {
    pub fn __inet_pton(
        arg1: ::std::os::raw::c_int,
        arg2: *const ::std::os::raw::c_char,
        arg3: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn __inet_aton(
        arg1: *const ::std::os::raw::c_char,
        arg2: *mut in_addr,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn __inet_lnaof(arg1: in_addr) -> in_addr_t;
}
unsafe extern "C" {
    pub fn __inet_makeaddr(arg1: in_addr_t, arg2: in_addr_t) -> in_addr;
}
unsafe extern "C" {
    pub fn __inet_neta(
        arg1: in_addr_t,
        arg2: *mut ::std::os::raw::c_char,
        arg3: usize,
    ) -> *mut ::std::os::raw::c_char;
}
unsafe extern "C" {
    pub fn __inet_netof(arg1: in_addr) -> in_addr_t;
}
unsafe extern "C" {
    pub fn __inet_network(arg1: *const ::std::os::raw::c_char) -> in_addr_t;
}
unsafe extern "C" {
    pub fn __inet_net_ntop(
        arg1: ::std::os::raw::c_int,
        arg2: *const ::std::os::raw::c_void,
        arg3: ::std::os::raw::c_int,
        arg4: *mut ::std::os::raw::c_char,
        arg5: usize,
    ) -> *mut ::std::os::raw::c_char;
}
unsafe extern "C" {
    pub fn __inet_net_pton(
        arg1: ::std::os::raw::c_int,
        arg2: *const ::std::os::raw::c_char,
        arg3: *mut ::std::os::raw::c_void,
        arg4: usize,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn __inet_ntoa_r(
        arg1: in_addr,
        buf: *mut ::std::os::raw::c_char,
        size: socklen_t,
    ) -> *mut ::std::os::raw::c_char;
}
unsafe extern "C" {
    pub fn __inet_cidr_ntop(
        arg1: ::std::os::raw::c_int,
        arg2: *const ::std::os::raw::c_void,
        arg3: ::std::os::raw::c_int,
        arg4: *mut ::std::os::raw::c_char,
        arg5: usize,
    ) -> *mut ::std::os::raw::c_char;
}
unsafe extern "C" {
    pub fn __inet_cidr_pton(
        arg1: ::std::os::raw::c_int,
        arg2: *const ::std::os::raw::c_char,
        arg3: *mut ::std::os::raw::c_void,
        arg4: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn __inet_nsap_addr(
        arg1: *const ::std::os::raw::c_char,
        arg2: *mut ::std::os::raw::c_uchar,
        arg3: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_uint;
}
unsafe extern "C" {
    pub fn __inet_nsap_ntoa(
        arg1: ::std::os::raw::c_int,
        arg2: *const ::std::os::raw::c_uchar,
        arg3: *mut ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_char;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct route {
    pub ro_nh: *mut nhop_object,
    pub ro_lle: *mut llentry,
    pub ro_prepend: *mut ::std::os::raw::c_char,
    pub ro_plen: u16,
    pub ro_flags: u16,
    pub ro_mtu: u16,
    pub spare: u16,
    pub ro_dst: sockaddr,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of route"][::std::mem::size_of::<route>() - 48usize];
    ["Alignment of route"][::std::mem::align_of::<route>() - 8usize];
    ["Offset of field: route::ro_nh"][::std::mem::offset_of!(route, ro_nh) - 0usize];
    ["Offset of field: route::ro_lle"][::std::mem::offset_of!(route, ro_lle) - 8usize];
    ["Offset of field: route::ro_prepend"][::std::mem::offset_of!(route, ro_prepend) - 16usize];
    ["Offset of field: route::ro_plen"][::std::mem::offset_of!(route, ro_plen) - 24usize];
    ["Offset of field: route::ro_flags"][::std::mem::offset_of!(route, ro_flags) - 26usize];
    ["Offset of field: route::ro_mtu"][::std::mem::offset_of!(route, ro_mtu) - 28usize];
    ["Offset of field: route::spare"][::std::mem::offset_of!(route, spare) - 30usize];
    ["Offset of field: route::ro_dst"][::std::mem::offset_of!(route, ro_dst) - 32usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct rt_metrics {
    pub rmx_locks: u_long,
    pub rmx_mtu: u_long,
    pub rmx_hopcount: u_long,
    pub rmx_expire: u_long,
    pub rmx_recvpipe: u_long,
    pub rmx_sendpipe: u_long,
    pub rmx_ssthresh: u_long,
    pub rmx_rtt: u_long,
    pub rmx_rttvar: u_long,
    pub rmx_pksent: u_long,
    pub rmx_weight: u_long,
    pub rmx_nhidx: u_long,
    pub rmx_filler: [u_long; 2usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of rt_metrics"][::std::mem::size_of::<rt_metrics>() - 112usize];
    ["Alignment of rt_metrics"][::std::mem::align_of::<rt_metrics>() - 8usize];
    ["Offset of field: rt_metrics::rmx_locks"]
        [::std::mem::offset_of!(rt_metrics, rmx_locks) - 0usize];
    ["Offset of field: rt_metrics::rmx_mtu"][::std::mem::offset_of!(rt_metrics, rmx_mtu) - 8usize];
    ["Offset of field: rt_metrics::rmx_hopcount"]
        [::std::mem::offset_of!(rt_metrics, rmx_hopcount) - 16usize];
    ["Offset of field: rt_metrics::rmx_expire"]
        [::std::mem::offset_of!(rt_metrics, rmx_expire) - 24usize];
    ["Offset of field: rt_metrics::rmx_recvpipe"]
        [::std::mem::offset_of!(rt_metrics, rmx_recvpipe) - 32usize];
    ["Offset of field: rt_metrics::rmx_sendpipe"]
        [::std::mem::offset_of!(rt_metrics, rmx_sendpipe) - 40usize];
    ["Offset of field: rt_metrics::rmx_ssthresh"]
        [::std::mem::offset_of!(rt_metrics, rmx_ssthresh) - 48usize];
    ["Offset of field: rt_metrics::rmx_rtt"][::std::mem::offset_of!(rt_metrics, rmx_rtt) - 56usize];
    ["Offset of field: rt_metrics::rmx_rttvar"]
        [::std::mem::offset_of!(rt_metrics, rmx_rttvar) - 64usize];
    ["Offset of field: rt_metrics::rmx_pksent"]
        [::std::mem::offset_of!(rt_metrics, rmx_pksent) - 72usize];
    ["Offset of field: rt_metrics::rmx_weight"]
        [::std::mem::offset_of!(rt_metrics, rmx_weight) - 80usize];
    ["Offset of field: rt_metrics::rmx_nhidx"]
        [::std::mem::offset_of!(rt_metrics, rmx_nhidx) - 88usize];
    ["Offset of field: rt_metrics::rmx_filler"]
        [::std::mem::offset_of!(rt_metrics, rmx_filler) - 96usize];
};
pub type rt_gen_t = u_int;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct rtstat {
    pub rts_badredirect: u64,
    pub rts_dynamic: u64,
    pub rts_newgateway: u64,
    pub rts_unreach: u64,
    pub rts_wildcard: u64,
    pub rts_nh_idx_alloc_failure: u64,
    pub rts_nh_alloc_failure: u64,
    pub rts_add_failure: u64,
    pub rts_add_retry: u64,
    pub rts_del_failure: u64,
    pub rts_del_retry: u64,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of rtstat"][::std::mem::size_of::<rtstat>() - 88usize];
    ["Alignment of rtstat"][::std::mem::align_of::<rtstat>() - 8usize];
    ["Offset of field: rtstat::rts_badredirect"]
        [::std::mem::offset_of!(rtstat, rts_badredirect) - 0usize];
    ["Offset of field: rtstat::rts_dynamic"][::std::mem::offset_of!(rtstat, rts_dynamic) - 8usize];
    ["Offset of field: rtstat::rts_newgateway"]
        [::std::mem::offset_of!(rtstat, rts_newgateway) - 16usize];
    ["Offset of field: rtstat::rts_unreach"][::std::mem::offset_of!(rtstat, rts_unreach) - 24usize];
    ["Offset of field: rtstat::rts_wildcard"]
        [::std::mem::offset_of!(rtstat, rts_wildcard) - 32usize];
    ["Offset of field: rtstat::rts_nh_idx_alloc_failure"]
        [::std::mem::offset_of!(rtstat, rts_nh_idx_alloc_failure) - 40usize];
    ["Offset of field: rtstat::rts_nh_alloc_failure"]
        [::std::mem::offset_of!(rtstat, rts_nh_alloc_failure) - 48usize];
    ["Offset of field: rtstat::rts_add_failure"]
        [::std::mem::offset_of!(rtstat, rts_add_failure) - 56usize];
    ["Offset of field: rtstat::rts_add_retry"]
        [::std::mem::offset_of!(rtstat, rts_add_retry) - 64usize];
    ["Offset of field: rtstat::rts_del_failure"]
        [::std::mem::offset_of!(rtstat, rts_del_failure) - 72usize];
    ["Offset of field: rtstat::rts_del_retry"]
        [::std::mem::offset_of!(rtstat, rts_del_retry) - 80usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct rt_msghdr {
    pub rtm_msglen: u_short,
    pub rtm_version: u_char,
    pub rtm_type: u_char,
    pub rtm_index: u_short,
    pub _rtm_spare1: u_short,
    pub rtm_flags: ::std::os::raw::c_int,
    pub rtm_addrs: ::std::os::raw::c_int,
    pub rtm_pid: pid_t,
    pub rtm_seq: ::std::os::raw::c_int,
    pub rtm_errno: ::std::os::raw::c_int,
    pub rtm_fmask: ::std::os::raw::c_int,
    pub rtm_inits: u_long,
    pub rtm_rmx: rt_metrics,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of rt_msghdr"][::std::mem::size_of::<rt_msghdr>() - 152usize];
    ["Alignment of rt_msghdr"][::std::mem::align_of::<rt_msghdr>() - 8usize];
    ["Offset of field: rt_msghdr::rtm_msglen"]
        [::std::mem::offset_of!(rt_msghdr, rtm_msglen) - 0usize];
    ["Offset of field: rt_msghdr::rtm_version"]
        [::std::mem::offset_of!(rt_msghdr, rtm_version) - 2usize];
    ["Offset of field: rt_msghdr::rtm_type"][::std::mem::offset_of!(rt_msghdr, rtm_type) - 3usize];
    ["Offset of field: rt_msghdr::rtm_index"]
        [::std::mem::offset_of!(rt_msghdr, rtm_index) - 4usize];
    ["Offset of field: rt_msghdr::_rtm_spare1"]
        [::std::mem::offset_of!(rt_msghdr, _rtm_spare1) - 6usize];
    ["Offset of field: rt_msghdr::rtm_flags"]
        [::std::mem::offset_of!(rt_msghdr, rtm_flags) - 8usize];
    ["Offset of field: rt_msghdr::rtm_addrs"]
        [::std::mem::offset_of!(rt_msghdr, rtm_addrs) - 12usize];
    ["Offset of field: rt_msghdr::rtm_pid"][::std::mem::offset_of!(rt_msghdr, rtm_pid) - 16usize];
    ["Offset of field: rt_msghdr::rtm_seq"][::std::mem::offset_of!(rt_msghdr, rtm_seq) - 20usize];
    ["Offset of field: rt_msghdr::rtm_errno"]
        [::std::mem::offset_of!(rt_msghdr, rtm_errno) - 24usize];
    ["Offset of field: rt_msghdr::rtm_fmask"]
        [::std::mem::offset_of!(rt_msghdr, rtm_fmask) - 28usize];
    ["Offset of field: rt_msghdr::rtm_inits"]
        [::std::mem::offset_of!(rt_msghdr, rtm_inits) - 32usize];
    ["Offset of field: rt_msghdr::rtm_rmx"][::std::mem::offset_of!(rt_msghdr, rtm_rmx) - 40usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct rtentry {
    _unused: [u8; 0],
}
pub type rib_filter_f_t = ::std::option::Option<
    unsafe extern "C" fn(
        arg1: *const rtentry,
        arg2: *const nhop_object,
        arg3: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int,
>;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct rt_addrinfo {
    pub rti_addrs: ::std::os::raw::c_int,
    pub rti_flags: ::std::os::raw::c_int,
    pub rti_info: [*mut sockaddr; 8usize],
    pub rti_ifa: *mut ifaddr,
    pub rti_ifp: *mut ifnet,
    pub rti_filter: rib_filter_f_t,
    pub rti_filterdata: *mut ::std::os::raw::c_void,
    pub rti_mflags: u_long,
    pub rti_spare: u_long,
    pub rti_rmx: *mut rt_metrics,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of rt_addrinfo"][::std::mem::size_of::<rt_addrinfo>() - 128usize];
    ["Alignment of rt_addrinfo"][::std::mem::align_of::<rt_addrinfo>() - 8usize];
    ["Offset of field: rt_addrinfo::rti_addrs"]
        [::std::mem::offset_of!(rt_addrinfo, rti_addrs) - 0usize];
    ["Offset of field: rt_addrinfo::rti_flags"]
        [::std::mem::offset_of!(rt_addrinfo, rti_flags) - 4usize];
    ["Offset of field: rt_addrinfo::rti_info"]
        [::std::mem::offset_of!(rt_addrinfo, rti_info) - 8usize];
    ["Offset of field: rt_addrinfo::rti_ifa"]
        [::std::mem::offset_of!(rt_addrinfo, rti_ifa) - 72usize];
    ["Offset of field: rt_addrinfo::rti_ifp"]
        [::std::mem::offset_of!(rt_addrinfo, rti_ifp) - 80usize];
    ["Offset of field: rt_addrinfo::rti_filter"]
        [::std::mem::offset_of!(rt_addrinfo, rti_filter) - 88usize];
    ["Offset of field: rt_addrinfo::rti_filterdata"]
        [::std::mem::offset_of!(rt_addrinfo, rti_filterdata) - 96usize];
    ["Offset of field: rt_addrinfo::rti_mflags"]
        [::std::mem::offset_of!(rt_addrinfo, rti_mflags) - 104usize];
    ["Offset of field: rt_addrinfo::rti_spare"]
        [::std::mem::offset_of!(rt_addrinfo, rti_spare) - 112usize];
    ["Offset of field: rt_addrinfo::rti_rmx"]
        [::std::mem::offset_of!(rt_addrinfo, rti_rmx) - 120usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct sockaddr_dl {
    pub sdl_len: u_char,
    pub sdl_family: u_char,
    pub sdl_index: u_short,
    pub sdl_type: u_char,
    pub sdl_nlen: u_char,
    pub sdl_alen: u_char,
    pub sdl_slen: u_char,
    pub sdl_data: [::std::os::raw::c_char; 46usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of sockaddr_dl"][::std::mem::size_of::<sockaddr_dl>() - 54usize];
    ["Alignment of sockaddr_dl"][::std::mem::align_of::<sockaddr_dl>() - 2usize];
    ["Offset of field: sockaddr_dl::sdl_len"]
        [::std::mem::offset_of!(sockaddr_dl, sdl_len) - 0usize];
    ["Offset of field: sockaddr_dl::sdl_family"]
        [::std::mem::offset_of!(sockaddr_dl, sdl_family) - 1usize];
    ["Offset of field: sockaddr_dl::sdl_index"]
        [::std::mem::offset_of!(sockaddr_dl, sdl_index) - 2usize];
    ["Offset of field: sockaddr_dl::sdl_type"]
        [::std::mem::offset_of!(sockaddr_dl, sdl_type) - 4usize];
    ["Offset of field: sockaddr_dl::sdl_nlen"]
        [::std::mem::offset_of!(sockaddr_dl, sdl_nlen) - 5usize];
    ["Offset of field: sockaddr_dl::sdl_alen"]
        [::std::mem::offset_of!(sockaddr_dl, sdl_alen) - 6usize];
    ["Offset of field: sockaddr_dl::sdl_slen"]
        [::std::mem::offset_of!(sockaddr_dl, sdl_slen) - 7usize];
    ["Offset of field: sockaddr_dl::sdl_data"]
        [::std::mem::offset_of!(sockaddr_dl, sdl_data) - 8usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ifnet {
    _unused: [u8; 0],
}
unsafe extern "C" {
    pub fn link_alloc_sdl(arg1: usize, arg2: ::std::os::raw::c_int) -> *mut sockaddr_dl;
}
unsafe extern "C" {
    pub fn link_free_sdl(sa: *mut sockaddr);
}
unsafe extern "C" {
    pub fn link_init_sdl(arg1: *mut ifnet, arg2: *mut sockaddr, arg3: u_char) -> *mut sockaddr_dl;
}
unsafe extern "C" {
    pub fn link_addr(arg1: *const ::std::os::raw::c_char, arg2: *mut sockaddr_dl);
}
unsafe extern "C" {
    pub fn link_ntoa(arg1: *const sockaddr_dl) -> *mut ::std::os::raw::c_char;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct timezone {
    pub tz_minuteswest: ::std::os::raw::c_int,
    pub tz_dsttime: ::std::os::raw::c_int,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of timezone"][::std::mem::size_of::<timezone>() - 8usize];
    ["Alignment of timezone"][::std::mem::align_of::<timezone>() - 4usize];
    ["Offset of field: timezone::tz_minuteswest"]
        [::std::mem::offset_of!(timezone, tz_minuteswest) - 0usize];
    ["Offset of field: timezone::tz_dsttime"]
        [::std::mem::offset_of!(timezone, tz_dsttime) - 4usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct bintime {
    pub sec: time_t,
    pub frac: u64,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of bintime"][::std::mem::size_of::<bintime>() - 16usize];
    ["Alignment of bintime"][::std::mem::align_of::<bintime>() - 8usize];
    ["Offset of field: bintime::sec"][::std::mem::offset_of!(bintime, sec) - 0usize];
    ["Offset of field: bintime::frac"][::std::mem::offset_of!(bintime, frac) - 8usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct itimerval {
    pub it_interval: timeval,
    pub it_value: timeval,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of itimerval"][::std::mem::size_of::<itimerval>() - 32usize];
    ["Alignment of itimerval"][::std::mem::align_of::<itimerval>() - 8usize];
    ["Offset of field: itimerval::it_interval"]
        [::std::mem::offset_of!(itimerval, it_interval) - 0usize];
    ["Offset of field: itimerval::it_value"][::std::mem::offset_of!(itimerval, it_value) - 16usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct clockinfo {
    pub hz: ::std::os::raw::c_int,
    pub tick: ::std::os::raw::c_int,
    pub spare: ::std::os::raw::c_int,
    pub stathz: ::std::os::raw::c_int,
    pub profhz: ::std::os::raw::c_int,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of clockinfo"][::std::mem::size_of::<clockinfo>() - 20usize];
    ["Alignment of clockinfo"][::std::mem::align_of::<clockinfo>() - 4usize];
    ["Offset of field: clockinfo::hz"][::std::mem::offset_of!(clockinfo, hz) - 0usize];
    ["Offset of field: clockinfo::tick"][::std::mem::offset_of!(clockinfo, tick) - 4usize];
    ["Offset of field: clockinfo::spare"][::std::mem::offset_of!(clockinfo, spare) - 8usize];
    ["Offset of field: clockinfo::stathz"][::std::mem::offset_of!(clockinfo, stathz) - 12usize];
    ["Offset of field: clockinfo::profhz"][::std::mem::offset_of!(clockinfo, profhz) - 16usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct tm {
    pub tm_sec: ::std::os::raw::c_int,
    pub tm_min: ::std::os::raw::c_int,
    pub tm_hour: ::std::os::raw::c_int,
    pub tm_mday: ::std::os::raw::c_int,
    pub tm_mon: ::std::os::raw::c_int,
    pub tm_year: ::std::os::raw::c_int,
    pub tm_wday: ::std::os::raw::c_int,
    pub tm_yday: ::std::os::raw::c_int,
    pub tm_isdst: ::std::os::raw::c_int,
    pub tm_gmtoff: ::std::os::raw::c_long,
    pub tm_zone: *mut ::std::os::raw::c_char,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of tm"][::std::mem::size_of::<tm>() - 56usize];
    ["Alignment of tm"][::std::mem::align_of::<tm>() - 8usize];
    ["Offset of field: tm::tm_sec"][::std::mem::offset_of!(tm, tm_sec) - 0usize];
    ["Offset of field: tm::tm_min"][::std::mem::offset_of!(tm, tm_min) - 4usize];
    ["Offset of field: tm::tm_hour"][::std::mem::offset_of!(tm, tm_hour) - 8usize];
    ["Offset of field: tm::tm_mday"][::std::mem::offset_of!(tm, tm_mday) - 12usize];
    ["Offset of field: tm::tm_mon"][::std::mem::offset_of!(tm, tm_mon) - 16usize];
    ["Offset of field: tm::tm_year"][::std::mem::offset_of!(tm, tm_year) - 20usize];
    ["Offset of field: tm::tm_wday"][::std::mem::offset_of!(tm, tm_wday) - 24usize];
    ["Offset of field: tm::tm_yday"][::std::mem::offset_of!(tm, tm_yday) - 28usize];
    ["Offset of field: tm::tm_isdst"][::std::mem::offset_of!(tm, tm_isdst) - 32usize];
    ["Offset of field: tm::tm_gmtoff"][::std::mem::offset_of!(tm, tm_gmtoff) - 40usize];
    ["Offset of field: tm::tm_zone"][::std::mem::offset_of!(tm, tm_zone) - 48usize];
};
unsafe extern "C" {
    pub static mut tzname: [*mut ::std::os::raw::c_char; 0usize];
}
unsafe extern "C" {
    pub fn asctime(arg1: *const tm) -> *mut ::std::os::raw::c_char;
}
unsafe extern "C" {
    pub fn clock() -> clock_t;
}
unsafe extern "C" {
    pub fn ctime(arg1: *const time_t) -> *mut ::std::os::raw::c_char;
}
unsafe extern "C" {
    pub fn difftime(arg1: time_t, arg2: time_t) -> f64;
}
unsafe extern "C" {
    pub fn gmtime(arg1: *const time_t) -> *mut tm;
}
unsafe extern "C" {
    pub fn localtime(arg1: *const time_t) -> *mut tm;
}
unsafe extern "C" {
    pub fn mktime(arg1: *mut tm) -> time_t;
}
unsafe extern "C" {
    pub fn strftime(
        arg1: *mut ::std::os::raw::c_char,
        arg2: usize,
        arg3: *const ::std::os::raw::c_char,
        arg4: *const tm,
    ) -> usize;
}
unsafe extern "C" {
    pub fn time(arg1: *mut time_t) -> time_t;
}
unsafe extern "C" {
    pub fn timer_create(
        arg1: clockid_t,
        arg2: *mut sigevent,
        arg3: *mut timer_t,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn timer_delete(arg1: timer_t) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn timer_gettime(arg1: timer_t, arg2: *mut itimerspec) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn timer_getoverrun(arg1: timer_t) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn timer_settime(
        arg1: timer_t,
        arg2: ::std::os::raw::c_int,
        arg3: *const itimerspec,
        arg4: *mut itimerspec,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn tzset();
}
unsafe extern "C" {
    pub fn clock_getres(arg1: clockid_t, arg2: *mut timespec) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn clock_gettime(arg1: clockid_t, arg2: *mut timespec) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn clock_settime(arg1: clockid_t, arg2: *const timespec) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn nanosleep(arg1: *const timespec, arg2: *mut timespec) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn clock_getcpuclockid(arg1: pid_t, arg2: *mut clockid_t) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn clock_nanosleep(
        arg1: clockid_t,
        arg2: ::std::os::raw::c_int,
        arg3: *const timespec,
        arg4: *mut timespec,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn asctime_r(
        arg1: *const tm,
        arg2: *mut ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_char;
}
unsafe extern "C" {
    pub fn ctime_r(
        arg1: *const time_t,
        arg2: *mut ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_char;
}
unsafe extern "C" {
    pub fn gmtime_r(arg1: *const time_t, arg2: *mut tm) -> *mut tm;
}
unsafe extern "C" {
    pub fn localtime_r(arg1: *const time_t, arg2: *mut tm) -> *mut tm;
}
unsafe extern "C" {
    pub fn strptime(
        arg1: *const ::std::os::raw::c_char,
        arg2: *const ::std::os::raw::c_char,
        arg3: *mut tm,
    ) -> *mut ::std::os::raw::c_char;
}
unsafe extern "C" {
    pub fn timezone(
        arg1: ::std::os::raw::c_int,
        arg2: ::std::os::raw::c_int,
    ) -> *mut ::std::os::raw::c_char;
}
unsafe extern "C" {
    pub fn tzsetwall();
}
unsafe extern "C" {
    pub fn timelocal(arg1: *mut tm) -> time_t;
}
unsafe extern "C" {
    pub fn timegm(arg1: *mut tm) -> time_t;
}
unsafe extern "C" {
    pub fn timer_oshandle_np(timerid: timer_t) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn time2posix(t: time_t) -> time_t;
}
unsafe extern "C" {
    pub fn posix2time(t: time_t) -> time_t;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _xlocale {
    _unused: [u8; 0],
}
pub type locale_t = *mut _xlocale;
unsafe extern "C" {
    pub fn strftime_l(
        arg1: *mut ::std::os::raw::c_char,
        arg2: usize,
        arg3: *const ::std::os::raw::c_char,
        arg4: *const tm,
        arg5: locale_t,
    ) -> usize;
}
unsafe extern "C" {
    pub fn timespec_get(ts: *mut timespec, base: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn setitimer(
        arg1: ::std::os::raw::c_int,
        arg2: *const itimerval,
        arg3: *mut itimerval,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn utimes(
        arg1: *const ::std::os::raw::c_char,
        arg2: *const timeval,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn adjtime(arg1: *const timeval, arg2: *mut timeval) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn clock_getcpuclockid2(
        arg1: id_t,
        arg2: ::std::os::raw::c_int,
        arg3: *mut clockid_t,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn futimes(arg1: ::std::os::raw::c_int, arg2: *const timeval) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn futimesat(
        arg1: ::std::os::raw::c_int,
        arg2: *const ::std::os::raw::c_char,
        arg3: *const timeval,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn lutimes(
        arg1: *const ::std::os::raw::c_char,
        arg2: *const timeval,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn settimeofday(arg1: *const timeval, arg2: *const timezone) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn getitimer(arg1: ::std::os::raw::c_int, arg2: *mut itimerval) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn gettimeofday(arg1: *mut timeval, arg2: *mut timezone) -> ::std::os::raw::c_int;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct if_clonereq {
    pub ifcr_total: ::std::os::raw::c_int,
    pub ifcr_count: ::std::os::raw::c_int,
    pub ifcr_buffer: *mut ::std::os::raw::c_char,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of if_clonereq"][::std::mem::size_of::<if_clonereq>() - 16usize];
    ["Alignment of if_clonereq"][::std::mem::align_of::<if_clonereq>() - 8usize];
    ["Offset of field: if_clonereq::ifcr_total"]
        [::std::mem::offset_of!(if_clonereq, ifcr_total) - 0usize];
    ["Offset of field: if_clonereq::ifcr_count"]
        [::std::mem::offset_of!(if_clonereq, ifcr_count) - 4usize];
    ["Offset of field: if_clonereq::ifcr_buffer"]
        [::std::mem::offset_of!(if_clonereq, ifcr_buffer) - 8usize];
};
#[repr(C)]
#[derive(Copy, Clone)]
pub struct if_data {
    pub ifi_type: u8,
    pub ifi_physical: u8,
    pub ifi_addrlen: u8,
    pub ifi_hdrlen: u8,
    pub ifi_link_state: u8,
    pub ifi_vhid: u8,
    pub ifi_datalen: u16,
    pub ifi_mtu: u32,
    pub ifi_metric: u32,
    pub ifi_baudrate: u64,
    pub ifi_ipackets: u64,
    pub ifi_ierrors: u64,
    pub ifi_opackets: u64,
    pub ifi_oerrors: u64,
    pub ifi_collisions: u64,
    pub ifi_ibytes: u64,
    pub ifi_obytes: u64,
    pub ifi_imcasts: u64,
    pub ifi_omcasts: u64,
    pub ifi_iqdrops: u64,
    pub ifi_oqdrops: u64,
    pub ifi_noproto: u64,
    pub ifi_hwassist: u64,
    pub __ifi_epoch: if_data__bindgen_ty_1,
    pub __ifi_lastchange: if_data__bindgen_ty_2,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union if_data__bindgen_ty_1 {
    pub tt: time_t,
    pub ph: u64,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of if_data__bindgen_ty_1"][::std::mem::size_of::<if_data__bindgen_ty_1>() - 8usize];
    ["Alignment of if_data__bindgen_ty_1"]
        [::std::mem::align_of::<if_data__bindgen_ty_1>() - 8usize];
    ["Offset of field: if_data__bindgen_ty_1::tt"]
        [::std::mem::offset_of!(if_data__bindgen_ty_1, tt) - 0usize];
    ["Offset of field: if_data__bindgen_ty_1::ph"]
        [::std::mem::offset_of!(if_data__bindgen_ty_1, ph) - 0usize];
};
#[repr(C)]
#[derive(Copy, Clone)]
pub union if_data__bindgen_ty_2 {
    pub tv: timeval,
    pub ph: if_data__bindgen_ty_2__bindgen_ty_1,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct if_data__bindgen_ty_2__bindgen_ty_1 {
    pub ph1: u64,
    pub ph2: u64,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of if_data__bindgen_ty_2__bindgen_ty_1"]
        [::std::mem::size_of::<if_data__bindgen_ty_2__bindgen_ty_1>() - 16usize];
    ["Alignment of if_data__bindgen_ty_2__bindgen_ty_1"]
        [::std::mem::align_of::<if_data__bindgen_ty_2__bindgen_ty_1>() - 8usize];
    ["Offset of field: if_data__bindgen_ty_2__bindgen_ty_1::ph1"]
        [::std::mem::offset_of!(if_data__bindgen_ty_2__bindgen_ty_1, ph1) - 0usize];
    ["Offset of field: if_data__bindgen_ty_2__bindgen_ty_1::ph2"]
        [::std::mem::offset_of!(if_data__bindgen_ty_2__bindgen_ty_1, ph2) - 8usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of if_data__bindgen_ty_2"][::std::mem::size_of::<if_data__bindgen_ty_2>() - 16usize];
    ["Alignment of if_data__bindgen_ty_2"]
        [::std::mem::align_of::<if_data__bindgen_ty_2>() - 8usize];
    ["Offset of field: if_data__bindgen_ty_2::tv"]
        [::std::mem::offset_of!(if_data__bindgen_ty_2, tv) - 0usize];
    ["Offset of field: if_data__bindgen_ty_2::ph"]
        [::std::mem::offset_of!(if_data__bindgen_ty_2, ph) - 0usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of if_data"][::std::mem::size_of::<if_data>() - 152usize];
    ["Alignment of if_data"][::std::mem::align_of::<if_data>() - 8usize];
    ["Offset of field: if_data::ifi_type"][::std::mem::offset_of!(if_data, ifi_type) - 0usize];
    ["Offset of field: if_data::ifi_physical"]
        [::std::mem::offset_of!(if_data, ifi_physical) - 1usize];
    ["Offset of field: if_data::ifi_addrlen"]
        [::std::mem::offset_of!(if_data, ifi_addrlen) - 2usize];
    ["Offset of field: if_data::ifi_hdrlen"][::std::mem::offset_of!(if_data, ifi_hdrlen) - 3usize];
    ["Offset of field: if_data::ifi_link_state"]
        [::std::mem::offset_of!(if_data, ifi_link_state) - 4usize];
    ["Offset of field: if_data::ifi_vhid"][::std::mem::offset_of!(if_data, ifi_vhid) - 5usize];
    ["Offset of field: if_data::ifi_datalen"]
        [::std::mem::offset_of!(if_data, ifi_datalen) - 6usize];
    ["Offset of field: if_data::ifi_mtu"][::std::mem::offset_of!(if_data, ifi_mtu) - 8usize];
    ["Offset of field: if_data::ifi_metric"][::std::mem::offset_of!(if_data, ifi_metric) - 12usize];
    ["Offset of field: if_data::ifi_baudrate"]
        [::std::mem::offset_of!(if_data, ifi_baudrate) - 16usize];
    ["Offset of field: if_data::ifi_ipackets"]
        [::std::mem::offset_of!(if_data, ifi_ipackets) - 24usize];
    ["Offset of field: if_data::ifi_ierrors"]
        [::std::mem::offset_of!(if_data, ifi_ierrors) - 32usize];
    ["Offset of field: if_data::ifi_opackets"]
        [::std::mem::offset_of!(if_data, ifi_opackets) - 40usize];
    ["Offset of field: if_data::ifi_oerrors"]
        [::std::mem::offset_of!(if_data, ifi_oerrors) - 48usize];
    ["Offset of field: if_data::ifi_collisions"]
        [::std::mem::offset_of!(if_data, ifi_collisions) - 56usize];
    ["Offset of field: if_data::ifi_ibytes"][::std::mem::offset_of!(if_data, ifi_ibytes) - 64usize];
    ["Offset of field: if_data::ifi_obytes"][::std::mem::offset_of!(if_data, ifi_obytes) - 72usize];
    ["Offset of field: if_data::ifi_imcasts"]
        [::std::mem::offset_of!(if_data, ifi_imcasts) - 80usize];
    ["Offset of field: if_data::ifi_omcasts"]
        [::std::mem::offset_of!(if_data, ifi_omcasts) - 88usize];
    ["Offset of field: if_data::ifi_iqdrops"]
        [::std::mem::offset_of!(if_data, ifi_iqdrops) - 96usize];
    ["Offset of field: if_data::ifi_oqdrops"]
        [::std::mem::offset_of!(if_data, ifi_oqdrops) - 104usize];
    ["Offset of field: if_data::ifi_noproto"]
        [::std::mem::offset_of!(if_data, ifi_noproto) - 112usize];
    ["Offset of field: if_data::ifi_hwassist"]
        [::std::mem::offset_of!(if_data, ifi_hwassist) - 120usize];
    ["Offset of field: if_data::__ifi_epoch"]
        [::std::mem::offset_of!(if_data, __ifi_epoch) - 128usize];
    ["Offset of field: if_data::__ifi_lastchange"]
        [::std::mem::offset_of!(if_data, __ifi_lastchange) - 136usize];
};
#[repr(C)]
#[derive(Copy, Clone)]
pub struct if_msghdr {
    pub ifm_msglen: u_short,
    pub ifm_version: u_char,
    pub ifm_type: u_char,
    pub ifm_addrs: ::std::os::raw::c_int,
    pub ifm_flags: ::std::os::raw::c_int,
    pub ifm_index: u_short,
    pub _ifm_spare1: u_short,
    pub ifm_data: if_data,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of if_msghdr"][::std::mem::size_of::<if_msghdr>() - 168usize];
    ["Alignment of if_msghdr"][::std::mem::align_of::<if_msghdr>() - 8usize];
    ["Offset of field: if_msghdr::ifm_msglen"]
        [::std::mem::offset_of!(if_msghdr, ifm_msglen) - 0usize];
    ["Offset of field: if_msghdr::ifm_version"]
        [::std::mem::offset_of!(if_msghdr, ifm_version) - 2usize];
    ["Offset of field: if_msghdr::ifm_type"][::std::mem::offset_of!(if_msghdr, ifm_type) - 3usize];
    ["Offset of field: if_msghdr::ifm_addrs"]
        [::std::mem::offset_of!(if_msghdr, ifm_addrs) - 4usize];
    ["Offset of field: if_msghdr::ifm_flags"]
        [::std::mem::offset_of!(if_msghdr, ifm_flags) - 8usize];
    ["Offset of field: if_msghdr::ifm_index"]
        [::std::mem::offset_of!(if_msghdr, ifm_index) - 12usize];
    ["Offset of field: if_msghdr::_ifm_spare1"]
        [::std::mem::offset_of!(if_msghdr, _ifm_spare1) - 14usize];
    ["Offset of field: if_msghdr::ifm_data"][::std::mem::offset_of!(if_msghdr, ifm_data) - 16usize];
};
#[repr(C)]
#[derive(Copy, Clone)]
pub struct if_msghdrl {
    pub ifm_msglen: u_short,
    pub ifm_version: u_char,
    pub ifm_type: u_char,
    pub ifm_addrs: ::std::os::raw::c_int,
    pub ifm_flags: ::std::os::raw::c_int,
    pub ifm_index: u_short,
    pub _ifm_spare1: u_short,
    pub ifm_len: u_short,
    pub ifm_data_off: u_short,
    pub _ifm_spare2: ::std::os::raw::c_int,
    pub ifm_data: if_data,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of if_msghdrl"][::std::mem::size_of::<if_msghdrl>() - 176usize];
    ["Alignment of if_msghdrl"][::std::mem::align_of::<if_msghdrl>() - 8usize];
    ["Offset of field: if_msghdrl::ifm_msglen"]
        [::std::mem::offset_of!(if_msghdrl, ifm_msglen) - 0usize];
    ["Offset of field: if_msghdrl::ifm_version"]
        [::std::mem::offset_of!(if_msghdrl, ifm_version) - 2usize];
    ["Offset of field: if_msghdrl::ifm_type"]
        [::std::mem::offset_of!(if_msghdrl, ifm_type) - 3usize];
    ["Offset of field: if_msghdrl::ifm_addrs"]
        [::std::mem::offset_of!(if_msghdrl, ifm_addrs) - 4usize];
    ["Offset of field: if_msghdrl::ifm_flags"]
        [::std::mem::offset_of!(if_msghdrl, ifm_flags) - 8usize];
    ["Offset of field: if_msghdrl::ifm_index"]
        [::std::mem::offset_of!(if_msghdrl, ifm_index) - 12usize];
    ["Offset of field: if_msghdrl::_ifm_spare1"]
        [::std::mem::offset_of!(if_msghdrl, _ifm_spare1) - 14usize];
    ["Offset of field: if_msghdrl::ifm_len"][::std::mem::offset_of!(if_msghdrl, ifm_len) - 16usize];
    ["Offset of field: if_msghdrl::ifm_data_off"]
        [::std::mem::offset_of!(if_msghdrl, ifm_data_off) - 18usize];
    ["Offset of field: if_msghdrl::_ifm_spare2"]
        [::std::mem::offset_of!(if_msghdrl, _ifm_spare2) - 20usize];
    ["Offset of field: if_msghdrl::ifm_data"]
        [::std::mem::offset_of!(if_msghdrl, ifm_data) - 24usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ifa_msghdr {
    pub ifam_msglen: u_short,
    pub ifam_version: u_char,
    pub ifam_type: u_char,
    pub ifam_addrs: ::std::os::raw::c_int,
    pub ifam_flags: ::std::os::raw::c_int,
    pub ifam_index: u_short,
    pub _ifam_spare1: u_short,
    pub ifam_metric: ::std::os::raw::c_int,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of ifa_msghdr"][::std::mem::size_of::<ifa_msghdr>() - 20usize];
    ["Alignment of ifa_msghdr"][::std::mem::align_of::<ifa_msghdr>() - 4usize];
    ["Offset of field: ifa_msghdr::ifam_msglen"]
        [::std::mem::offset_of!(ifa_msghdr, ifam_msglen) - 0usize];
    ["Offset of field: ifa_msghdr::ifam_version"]
        [::std::mem::offset_of!(ifa_msghdr, ifam_version) - 2usize];
    ["Offset of field: ifa_msghdr::ifam_type"]
        [::std::mem::offset_of!(ifa_msghdr, ifam_type) - 3usize];
    ["Offset of field: ifa_msghdr::ifam_addrs"]
        [::std::mem::offset_of!(ifa_msghdr, ifam_addrs) - 4usize];
    ["Offset of field: ifa_msghdr::ifam_flags"]
        [::std::mem::offset_of!(ifa_msghdr, ifam_flags) - 8usize];
    ["Offset of field: ifa_msghdr::ifam_index"]
        [::std::mem::offset_of!(ifa_msghdr, ifam_index) - 12usize];
    ["Offset of field: ifa_msghdr::_ifam_spare1"]
        [::std::mem::offset_of!(ifa_msghdr, _ifam_spare1) - 14usize];
    ["Offset of field: ifa_msghdr::ifam_metric"]
        [::std::mem::offset_of!(ifa_msghdr, ifam_metric) - 16usize];
};
#[repr(C)]
#[derive(Copy, Clone)]
pub struct ifa_msghdrl {
    pub ifam_msglen: u_short,
    pub ifam_version: u_char,
    pub ifam_type: u_char,
    pub ifam_addrs: ::std::os::raw::c_int,
    pub ifam_flags: ::std::os::raw::c_int,
    pub ifam_index: u_short,
    pub _ifam_spare1: u_short,
    pub ifam_len: u_short,
    pub ifam_data_off: u_short,
    pub ifam_metric: ::std::os::raw::c_int,
    pub ifam_data: if_data,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of ifa_msghdrl"][::std::mem::size_of::<ifa_msghdrl>() - 176usize];
    ["Alignment of ifa_msghdrl"][::std::mem::align_of::<ifa_msghdrl>() - 8usize];
    ["Offset of field: ifa_msghdrl::ifam_msglen"]
        [::std::mem::offset_of!(ifa_msghdrl, ifam_msglen) - 0usize];
    ["Offset of field: ifa_msghdrl::ifam_version"]
        [::std::mem::offset_of!(ifa_msghdrl, ifam_version) - 2usize];
    ["Offset of field: ifa_msghdrl::ifam_type"]
        [::std::mem::offset_of!(ifa_msghdrl, ifam_type) - 3usize];
    ["Offset of field: ifa_msghdrl::ifam_addrs"]
        [::std::mem::offset_of!(ifa_msghdrl, ifam_addrs) - 4usize];
    ["Offset of field: ifa_msghdrl::ifam_flags"]
        [::std::mem::offset_of!(ifa_msghdrl, ifam_flags) - 8usize];
    ["Offset of field: ifa_msghdrl::ifam_index"]
        [::std::mem::offset_of!(ifa_msghdrl, ifam_index) - 12usize];
    ["Offset of field: ifa_msghdrl::_ifam_spare1"]
        [::std::mem::offset_of!(ifa_msghdrl, _ifam_spare1) - 14usize];
    ["Offset of field: ifa_msghdrl::ifam_len"]
        [::std::mem::offset_of!(ifa_msghdrl, ifam_len) - 16usize];
    ["Offset of field: ifa_msghdrl::ifam_data_off"]
        [::std::mem::offset_of!(ifa_msghdrl, ifam_data_off) - 18usize];
    ["Offset of field: ifa_msghdrl::ifam_metric"]
        [::std::mem::offset_of!(ifa_msghdrl, ifam_metric) - 20usize];
    ["Offset of field: ifa_msghdrl::ifam_data"]
        [::std::mem::offset_of!(ifa_msghdrl, ifam_data) - 24usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ifma_msghdr {
    pub ifmam_msglen: u_short,
    pub ifmam_version: u_char,
    pub ifmam_type: u_char,
    pub ifmam_addrs: ::std::os::raw::c_int,
    pub ifmam_flags: ::std::os::raw::c_int,
    pub ifmam_index: u_short,
    pub _ifmam_spare1: u_short,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of ifma_msghdr"][::std::mem::size_of::<ifma_msghdr>() - 16usize];
    ["Alignment of ifma_msghdr"][::std::mem::align_of::<ifma_msghdr>() - 4usize];
    ["Offset of field: ifma_msghdr::ifmam_msglen"]
        [::std::mem::offset_of!(ifma_msghdr, ifmam_msglen) - 0usize];
    ["Offset of field: ifma_msghdr::ifmam_version"]
        [::std::mem::offset_of!(ifma_msghdr, ifmam_version) - 2usize];
    ["Offset of field: ifma_msghdr::ifmam_type"]
        [::std::mem::offset_of!(ifma_msghdr, ifmam_type) - 3usize];
    ["Offset of field: ifma_msghdr::ifmam_addrs"]
        [::std::mem::offset_of!(ifma_msghdr, ifmam_addrs) - 4usize];
    ["Offset of field: ifma_msghdr::ifmam_flags"]
        [::std::mem::offset_of!(ifma_msghdr, ifmam_flags) - 8usize];
    ["Offset of field: ifma_msghdr::ifmam_index"]
        [::std::mem::offset_of!(ifma_msghdr, ifmam_index) - 12usize];
    ["Offset of field: ifma_msghdr::_ifmam_spare1"]
        [::std::mem::offset_of!(ifma_msghdr, _ifmam_spare1) - 14usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct if_announcemsghdr {
    pub ifan_msglen: u_short,
    pub ifan_version: u_char,
    pub ifan_type: u_char,
    pub ifan_index: u_short,
    pub ifan_name: [::std::os::raw::c_char; 16usize],
    pub ifan_what: u_short,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of if_announcemsghdr"][::std::mem::size_of::<if_announcemsghdr>() - 24usize];
    ["Alignment of if_announcemsghdr"][::std::mem::align_of::<if_announcemsghdr>() - 2usize];
    ["Offset of field: if_announcemsghdr::ifan_msglen"]
        [::std::mem::offset_of!(if_announcemsghdr, ifan_msglen) - 0usize];
    ["Offset of field: if_announcemsghdr::ifan_version"]
        [::std::mem::offset_of!(if_announcemsghdr, ifan_version) - 2usize];
    ["Offset of field: if_announcemsghdr::ifan_type"]
        [::std::mem::offset_of!(if_announcemsghdr, ifan_type) - 3usize];
    ["Offset of field: if_announcemsghdr::ifan_index"]
        [::std::mem::offset_of!(if_announcemsghdr, ifan_index) - 4usize];
    ["Offset of field: if_announcemsghdr::ifan_name"]
        [::std::mem::offset_of!(if_announcemsghdr, ifan_name) - 6usize];
    ["Offset of field: if_announcemsghdr::ifan_what"]
        [::std::mem::offset_of!(if_announcemsghdr, ifan_what) - 22usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ifreq_buffer {
    pub length: usize,
    pub buffer: *mut ::std::os::raw::c_void,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of ifreq_buffer"][::std::mem::size_of::<ifreq_buffer>() - 16usize];
    ["Alignment of ifreq_buffer"][::std::mem::align_of::<ifreq_buffer>() - 8usize];
    ["Offset of field: ifreq_buffer::length"]
        [::std::mem::offset_of!(ifreq_buffer, length) - 0usize];
    ["Offset of field: ifreq_buffer::buffer"]
        [::std::mem::offset_of!(ifreq_buffer, buffer) - 8usize];
};
#[repr(C)]
#[derive(Copy, Clone)]
pub struct ifreq {
    pub ifr_name: [::std::os::raw::c_char; 16usize],
    pub ifr_ifru: ifreq__bindgen_ty_1,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union ifreq__bindgen_ty_1 {
    pub ifru_addr: sockaddr,
    pub ifru_dstaddr: sockaddr,
    pub ifru_broadaddr: sockaddr,
    pub ifru_buffer: ifreq_buffer,
    pub ifru_flags: [::std::os::raw::c_short; 2usize],
    pub ifru_index: ::std::os::raw::c_short,
    pub ifru_jid: ::std::os::raw::c_int,
    pub ifru_metric: ::std::os::raw::c_int,
    pub ifru_mtu: ::std::os::raw::c_int,
    pub ifru_phys: ::std::os::raw::c_int,
    pub ifru_media: ::std::os::raw::c_int,
    pub ifru_data: caddr_t,
    pub ifru_cap: [::std::os::raw::c_int; 2usize],
    pub ifru_fib: u_int,
    pub ifru_vlan_pcp: u_char,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of ifreq__bindgen_ty_1"][::std::mem::size_of::<ifreq__bindgen_ty_1>() - 16usize];
    ["Alignment of ifreq__bindgen_ty_1"][::std::mem::align_of::<ifreq__bindgen_ty_1>() - 8usize];
    ["Offset of field: ifreq__bindgen_ty_1::ifru_addr"]
        [::std::mem::offset_of!(ifreq__bindgen_ty_1, ifru_addr) - 0usize];
    ["Offset of field: ifreq__bindgen_ty_1::ifru_dstaddr"]
        [::std::mem::offset_of!(ifreq__bindgen_ty_1, ifru_dstaddr) - 0usize];
    ["Offset of field: ifreq__bindgen_ty_1::ifru_broadaddr"]
        [::std::mem::offset_of!(ifreq__bindgen_ty_1, ifru_broadaddr) - 0usize];
    ["Offset of field: ifreq__bindgen_ty_1::ifru_buffer"]
        [::std::mem::offset_of!(ifreq__bindgen_ty_1, ifru_buffer) - 0usize];
    ["Offset of field: ifreq__bindgen_ty_1::ifru_flags"]
        [::std::mem::offset_of!(ifreq__bindgen_ty_1, ifru_flags) - 0usize];
    ["Offset of field: ifreq__bindgen_ty_1::ifru_index"]
        [::std::mem::offset_of!(ifreq__bindgen_ty_1, ifru_index) - 0usize];
    ["Offset of field: ifreq__bindgen_ty_1::ifru_jid"]
        [::std::mem::offset_of!(ifreq__bindgen_ty_1, ifru_jid) - 0usize];
    ["Offset of field: ifreq__bindgen_ty_1::ifru_metric"]
        [::std::mem::offset_of!(ifreq__bindgen_ty_1, ifru_metric) - 0usize];
    ["Offset of field: ifreq__bindgen_ty_1::ifru_mtu"]
        [::std::mem::offset_of!(ifreq__bindgen_ty_1, ifru_mtu) - 0usize];
    ["Offset of field: ifreq__bindgen_ty_1::ifru_phys"]
        [::std::mem::offset_of!(ifreq__bindgen_ty_1, ifru_phys) - 0usize];
    ["Offset of field: ifreq__bindgen_ty_1::ifru_media"]
        [::std::mem::offset_of!(ifreq__bindgen_ty_1, ifru_media) - 0usize];
    ["Offset of field: ifreq__bindgen_ty_1::ifru_data"]
        [::std::mem::offset_of!(ifreq__bindgen_ty_1, ifru_data) - 0usize];
    ["Offset of field: ifreq__bindgen_ty_1::ifru_cap"]
        [::std::mem::offset_of!(ifreq__bindgen_ty_1, ifru_cap) - 0usize];
    ["Offset of field: ifreq__bindgen_ty_1::ifru_fib"]
        [::std::mem::offset_of!(ifreq__bindgen_ty_1, ifru_fib) - 0usize];
    ["Offset of field: ifreq__bindgen_ty_1::ifru_vlan_pcp"]
        [::std::mem::offset_of!(ifreq__bindgen_ty_1, ifru_vlan_pcp) - 0usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of ifreq"][::std::mem::size_of::<ifreq>() - 32usize];
    ["Alignment of ifreq"][::std::mem::align_of::<ifreq>() - 8usize];
    ["Offset of field: ifreq::ifr_name"][::std::mem::offset_of!(ifreq, ifr_name) - 0usize];
    ["Offset of field: ifreq::ifr_ifru"][::std::mem::offset_of!(ifreq, ifr_ifru) - 16usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ifaliasreq {
    pub ifra_name: [::std::os::raw::c_char; 16usize],
    pub ifra_addr: sockaddr,
    pub ifra_broadaddr: sockaddr,
    pub ifra_mask: sockaddr,
    pub ifra_vhid: ::std::os::raw::c_int,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of ifaliasreq"][::std::mem::size_of::<ifaliasreq>() - 68usize];
    ["Alignment of ifaliasreq"][::std::mem::align_of::<ifaliasreq>() - 4usize];
    ["Offset of field: ifaliasreq::ifra_name"]
        [::std::mem::offset_of!(ifaliasreq, ifra_name) - 0usize];
    ["Offset of field: ifaliasreq::ifra_addr"]
        [::std::mem::offset_of!(ifaliasreq, ifra_addr) - 16usize];
    ["Offset of field: ifaliasreq::ifra_broadaddr"]
        [::std::mem::offset_of!(ifaliasreq, ifra_broadaddr) - 32usize];
    ["Offset of field: ifaliasreq::ifra_mask"]
        [::std::mem::offset_of!(ifaliasreq, ifra_mask) - 48usize];
    ["Offset of field: ifaliasreq::ifra_vhid"]
        [::std::mem::offset_of!(ifaliasreq, ifra_vhid) - 64usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct oifaliasreq {
    pub ifra_name: [::std::os::raw::c_char; 16usize],
    pub ifra_addr: sockaddr,
    pub ifra_broadaddr: sockaddr,
    pub ifra_mask: sockaddr,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of oifaliasreq"][::std::mem::size_of::<oifaliasreq>() - 64usize];
    ["Alignment of oifaliasreq"][::std::mem::align_of::<oifaliasreq>() - 1usize];
    ["Offset of field: oifaliasreq::ifra_name"]
        [::std::mem::offset_of!(oifaliasreq, ifra_name) - 0usize];
    ["Offset of field: oifaliasreq::ifra_addr"]
        [::std::mem::offset_of!(oifaliasreq, ifra_addr) - 16usize];
    ["Offset of field: oifaliasreq::ifra_broadaddr"]
        [::std::mem::offset_of!(oifaliasreq, ifra_broadaddr) - 32usize];
    ["Offset of field: oifaliasreq::ifra_mask"]
        [::std::mem::offset_of!(oifaliasreq, ifra_mask) - 48usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ifmediareq {
    pub ifm_name: [::std::os::raw::c_char; 16usize],
    pub ifm_current: ::std::os::raw::c_int,
    pub ifm_mask: ::std::os::raw::c_int,
    pub ifm_status: ::std::os::raw::c_int,
    pub ifm_active: ::std::os::raw::c_int,
    pub ifm_count: ::std::os::raw::c_int,
    pub ifm_ulist: *mut ::std::os::raw::c_int,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of ifmediareq"][::std::mem::size_of::<ifmediareq>() - 48usize];
    ["Alignment of ifmediareq"][::std::mem::align_of::<ifmediareq>() - 8usize];
    ["Offset of field: ifmediareq::ifm_name"]
        [::std::mem::offset_of!(ifmediareq, ifm_name) - 0usize];
    ["Offset of field: ifmediareq::ifm_current"]
        [::std::mem::offset_of!(ifmediareq, ifm_current) - 16usize];
    ["Offset of field: ifmediareq::ifm_mask"]
        [::std::mem::offset_of!(ifmediareq, ifm_mask) - 20usize];
    ["Offset of field: ifmediareq::ifm_status"]
        [::std::mem::offset_of!(ifmediareq, ifm_status) - 24usize];
    ["Offset of field: ifmediareq::ifm_active"]
        [::std::mem::offset_of!(ifmediareq, ifm_active) - 28usize];
    ["Offset of field: ifmediareq::ifm_count"]
        [::std::mem::offset_of!(ifmediareq, ifm_count) - 32usize];
    ["Offset of field: ifmediareq::ifm_ulist"]
        [::std::mem::offset_of!(ifmediareq, ifm_ulist) - 40usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ifdrv {
    pub ifd_name: [::std::os::raw::c_char; 16usize],
    pub ifd_cmd: ::std::os::raw::c_ulong,
    pub ifd_len: usize,
    pub ifd_data: *mut ::std::os::raw::c_void,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of ifdrv"][::std::mem::size_of::<ifdrv>() - 40usize];
    ["Alignment of ifdrv"][::std::mem::align_of::<ifdrv>() - 8usize];
    ["Offset of field: ifdrv::ifd_name"][::std::mem::offset_of!(ifdrv, ifd_name) - 0usize];
    ["Offset of field: ifdrv::ifd_cmd"][::std::mem::offset_of!(ifdrv, ifd_cmd) - 16usize];
    ["Offset of field: ifdrv::ifd_len"][::std::mem::offset_of!(ifdrv, ifd_len) - 24usize];
    ["Offset of field: ifdrv::ifd_data"][::std::mem::offset_of!(ifdrv, ifd_data) - 32usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ifstat {
    pub ifs_name: [::std::os::raw::c_char; 16usize],
    pub ascii: [::std::os::raw::c_char; 801usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of ifstat"][::std::mem::size_of::<ifstat>() - 817usize];
    ["Alignment of ifstat"][::std::mem::align_of::<ifstat>() - 1usize];
    ["Offset of field: ifstat::ifs_name"][::std::mem::offset_of!(ifstat, ifs_name) - 0usize];
    ["Offset of field: ifstat::ascii"][::std::mem::offset_of!(ifstat, ascii) - 16usize];
};
#[repr(C)]
#[derive(Copy, Clone)]
pub struct ifconf {
    pub ifc_len: ::std::os::raw::c_int,
    pub ifc_ifcu: ifconf__bindgen_ty_1,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union ifconf__bindgen_ty_1 {
    pub ifcu_buf: caddr_t,
    pub ifcu_req: *mut ifreq,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of ifconf__bindgen_ty_1"][::std::mem::size_of::<ifconf__bindgen_ty_1>() - 8usize];
    ["Alignment of ifconf__bindgen_ty_1"][::std::mem::align_of::<ifconf__bindgen_ty_1>() - 8usize];
    ["Offset of field: ifconf__bindgen_ty_1::ifcu_buf"]
        [::std::mem::offset_of!(ifconf__bindgen_ty_1, ifcu_buf) - 0usize];
    ["Offset of field: ifconf__bindgen_ty_1::ifcu_req"]
        [::std::mem::offset_of!(ifconf__bindgen_ty_1, ifcu_req) - 0usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of ifconf"][::std::mem::size_of::<ifconf>() - 16usize];
    ["Alignment of ifconf"][::std::mem::align_of::<ifconf>() - 8usize];
    ["Offset of field: ifconf::ifc_len"][::std::mem::offset_of!(ifconf, ifc_len) - 0usize];
    ["Offset of field: ifconf::ifc_ifcu"][::std::mem::offset_of!(ifconf, ifc_ifcu) - 8usize];
};
#[repr(C)]
#[derive(Copy, Clone)]
pub struct ifg_req {
    pub ifgrq_ifgrqu: ifg_req__bindgen_ty_1,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union ifg_req__bindgen_ty_1 {
    pub ifgrqu_group: [::std::os::raw::c_char; 16usize],
    pub ifgrqu_member: [::std::os::raw::c_char; 16usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of ifg_req__bindgen_ty_1"][::std::mem::size_of::<ifg_req__bindgen_ty_1>() - 16usize];
    ["Alignment of ifg_req__bindgen_ty_1"]
        [::std::mem::align_of::<ifg_req__bindgen_ty_1>() - 1usize];
    ["Offset of field: ifg_req__bindgen_ty_1::ifgrqu_group"]
        [::std::mem::offset_of!(ifg_req__bindgen_ty_1, ifgrqu_group) - 0usize];
    ["Offset of field: ifg_req__bindgen_ty_1::ifgrqu_member"]
        [::std::mem::offset_of!(ifg_req__bindgen_ty_1, ifgrqu_member) - 0usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of ifg_req"][::std::mem::size_of::<ifg_req>() - 16usize];
    ["Alignment of ifg_req"][::std::mem::align_of::<ifg_req>() - 1usize];
    ["Offset of field: ifg_req::ifgrq_ifgrqu"]
        [::std::mem::offset_of!(ifg_req, ifgrq_ifgrqu) - 0usize];
};
#[repr(C)]
#[derive(Copy, Clone)]
pub struct ifgroupreq {
    pub ifgr_name: [::std::os::raw::c_char; 16usize],
    pub ifgr_len: u_int,
    pub ifgr_ifgru: ifgroupreq__bindgen_ty_1,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union ifgroupreq__bindgen_ty_1 {
    pub ifgru_group: [::std::os::raw::c_char; 16usize],
    pub ifgru_groups: *mut ifg_req,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of ifgroupreq__bindgen_ty_1"]
        [::std::mem::size_of::<ifgroupreq__bindgen_ty_1>() - 16usize];
    ["Alignment of ifgroupreq__bindgen_ty_1"]
        [::std::mem::align_of::<ifgroupreq__bindgen_ty_1>() - 8usize];
    ["Offset of field: ifgroupreq__bindgen_ty_1::ifgru_group"]
        [::std::mem::offset_of!(ifgroupreq__bindgen_ty_1, ifgru_group) - 0usize];
    ["Offset of field: ifgroupreq__bindgen_ty_1::ifgru_groups"]
        [::std::mem::offset_of!(ifgroupreq__bindgen_ty_1, ifgru_groups) - 0usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of ifgroupreq"][::std::mem::size_of::<ifgroupreq>() - 40usize];
    ["Alignment of ifgroupreq"][::std::mem::align_of::<ifgroupreq>() - 8usize];
    ["Offset of field: ifgroupreq::ifgr_name"]
        [::std::mem::offset_of!(ifgroupreq, ifgr_name) - 0usize];
    ["Offset of field: ifgroupreq::ifgr_len"]
        [::std::mem::offset_of!(ifgroupreq, ifgr_len) - 16usize];
    ["Offset of field: ifgroupreq::ifgr_ifgru"]
        [::std::mem::offset_of!(ifgroupreq, ifgr_ifgru) - 24usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ifi2creq {
    pub dev_addr: u8,
    pub offset: u8,
    pub len: u8,
    pub spare0: u8,
    pub spare1: u32,
    pub data: [u8; 8usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of ifi2creq"][::std::mem::size_of::<ifi2creq>() - 16usize];
    ["Alignment of ifi2creq"][::std::mem::align_of::<ifi2creq>() - 4usize];
    ["Offset of field: ifi2creq::dev_addr"][::std::mem::offset_of!(ifi2creq, dev_addr) - 0usize];
    ["Offset of field: ifi2creq::offset"][::std::mem::offset_of!(ifi2creq, offset) - 1usize];
    ["Offset of field: ifi2creq::len"][::std::mem::offset_of!(ifi2creq, len) - 2usize];
    ["Offset of field: ifi2creq::spare0"][::std::mem::offset_of!(ifi2creq, spare0) - 3usize];
    ["Offset of field: ifi2creq::spare1"][::std::mem::offset_of!(ifi2creq, spare1) - 4usize];
    ["Offset of field: ifi2creq::data"][::std::mem::offset_of!(ifi2creq, data) - 8usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ifrsskey {
    pub ifrk_name: [::std::os::raw::c_char; 16usize],
    pub ifrk_func: u8,
    pub ifrk_spare0: u8,
    pub ifrk_keylen: u16,
    pub ifrk_key: [u8; 128usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of ifrsskey"][::std::mem::size_of::<ifrsskey>() - 148usize];
    ["Alignment of ifrsskey"][::std::mem::align_of::<ifrsskey>() - 2usize];
    ["Offset of field: ifrsskey::ifrk_name"][::std::mem::offset_of!(ifrsskey, ifrk_name) - 0usize];
    ["Offset of field: ifrsskey::ifrk_func"][::std::mem::offset_of!(ifrsskey, ifrk_func) - 16usize];
    ["Offset of field: ifrsskey::ifrk_spare0"]
        [::std::mem::offset_of!(ifrsskey, ifrk_spare0) - 17usize];
    ["Offset of field: ifrsskey::ifrk_keylen"]
        [::std::mem::offset_of!(ifrsskey, ifrk_keylen) - 18usize];
    ["Offset of field: ifrsskey::ifrk_key"][::std::mem::offset_of!(ifrsskey, ifrk_key) - 20usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ifrsshash {
    pub ifrh_name: [::std::os::raw::c_char; 16usize],
    pub ifrh_func: u8,
    pub ifrh_spare0: u8,
    pub ifrh_spare1: u16,
    pub ifrh_types: u32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of ifrsshash"][::std::mem::size_of::<ifrsshash>() - 24usize];
    ["Alignment of ifrsshash"][::std::mem::align_of::<ifrsshash>() - 4usize];
    ["Offset of field: ifrsshash::ifrh_name"]
        [::std::mem::offset_of!(ifrsshash, ifrh_name) - 0usize];
    ["Offset of field: ifrsshash::ifrh_func"]
        [::std::mem::offset_of!(ifrsshash, ifrh_func) - 16usize];
    ["Offset of field: ifrsshash::ifrh_spare0"]
        [::std::mem::offset_of!(ifrsshash, ifrh_spare0) - 17usize];
    ["Offset of field: ifrsshash::ifrh_spare1"]
        [::std::mem::offset_of!(ifrsshash, ifrh_spare1) - 18usize];
    ["Offset of field: ifrsshash::ifrh_types"]
        [::std::mem::offset_of!(ifrsshash, ifrh_types) - 20usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ifdownreason {
    pub ifdr_name: [::std::os::raw::c_char; 16usize],
    pub ifdr_reason: u32,
    pub ifdr_vendor: u32,
    pub ifdr_msg: [::std::os::raw::c_char; 64usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of ifdownreason"][::std::mem::size_of::<ifdownreason>() - 88usize];
    ["Alignment of ifdownreason"][::std::mem::align_of::<ifdownreason>() - 4usize];
    ["Offset of field: ifdownreason::ifdr_name"]
        [::std::mem::offset_of!(ifdownreason, ifdr_name) - 0usize];
    ["Offset of field: ifdownreason::ifdr_reason"]
        [::std::mem::offset_of!(ifdownreason, ifdr_reason) - 16usize];
    ["Offset of field: ifdownreason::ifdr_vendor"]
        [::std::mem::offset_of!(ifdownreason, ifdr_vendor) - 20usize];
    ["Offset of field: ifdownreason::ifdr_msg"]
        [::std::mem::offset_of!(ifdownreason, ifdr_msg) - 24usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct if_nameindex {
    pub if_index: ::std::os::raw::c_uint,
    pub if_name: *mut ::std::os::raw::c_char,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of if_nameindex"][::std::mem::size_of::<if_nameindex>() - 16usize];
    ["Alignment of if_nameindex"][::std::mem::align_of::<if_nameindex>() - 8usize];
    ["Offset of field: if_nameindex::if_index"]
        [::std::mem::offset_of!(if_nameindex, if_index) - 0usize];
    ["Offset of field: if_nameindex::if_name"]
        [::std::mem::offset_of!(if_nameindex, if_name) - 8usize];
};
unsafe extern "C" {
    pub fn if_freenameindex(arg1: *mut if_nameindex);
}
unsafe extern "C" {
    pub fn if_indextoname(
        arg1: ::std::os::raw::c_uint,
        arg2: *mut ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_char;
}
unsafe extern "C" {
    pub fn if_nameindex() -> *mut if_nameindex;
}
unsafe extern "C" {
    pub fn if_nametoindex(arg1: *const ::std::os::raw::c_char) -> ::std::os::raw::c_uint;
}
pub type __builtin_va_list = [__va_list_tag; 1usize];
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __va_list_tag {
    pub gp_offset: ::std::os::raw::c_uint,
    pub fp_offset: ::std::os::raw::c_uint,
    pub overflow_arg_area: *mut ::std::os::raw::c_void,
    pub reg_save_area: *mut ::std::os::raw::c_void,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of __va_list_tag"][::std::mem::size_of::<__va_list_tag>() - 24usize];
    ["Alignment of __va_list_tag"][::std::mem::align_of::<__va_list_tag>() - 8usize];
    ["Offset of field: __va_list_tag::gp_offset"]
        [::std::mem::offset_of!(__va_list_tag, gp_offset) - 0usize];
    ["Offset of field: __va_list_tag::fp_offset"]
        [::std::mem::offset_of!(__va_list_tag, fp_offset) - 4usize];
    ["Offset of field: __va_list_tag::overflow_arg_area"]
        [::std::mem::offset_of!(__va_list_tag, overflow_arg_area) - 8usize];
    ["Offset of field: __va_list_tag::reg_save_area"]
        [::std::mem::offset_of!(__va_list_tag, reg_save_area) - 16usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct llentry {
    pub _address: u8,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ifaddr {
    pub _address: u8,
}
