/* automatically generated by rust-bindgen 0.71.1 */

pub const BSD : u32 = 199306 ; pub const BSD4_3 : u32 = 1 ; pub const BSD4_4 : u32 = 1 ; pub const OpenBSD : u32 = 202504 ; pub const OpenBSD7_7 : u32 = 1 ; pub const __ISO_C_VISIBLE : u32 = 2011 ; pub const __XPG_VISIBLE : u32 = 800 ; pub const __POSIX_VISIBLE : u32 = 202405 ; pub const __BSD_VISIBLE : u32 = 1 ; pub const _STACKALIGNBYTES : u32 = 15 ; pub const _MAX_PAGE_SHIFT : u32 = 12 ; pub const _LITTLE_ENDIAN : u32 = 1234 ; pub const _BIG_ENDIAN : u32 = 4321 ; pub const _PDP_ENDIAN : u32 = 3412 ; pub const _QUAD_HIGHWORD : u32 = 1 ; pub const _QUAD_LOWWORD : u32 = 0 ; pub const LITTLE_ENDIAN : u32 = 1234 ; pub const BIG_ENDIAN : u32 = 4321 ; pub const PDP_ENDIAN : u32 = 3412 ; pub const ARG_MAX : u32 = 524288 ; pub const CHILD_MAX : u32 = 80 ; pub const LINK_MAX : u32 = 32767 ; pub const MAX_CANON : u32 = 255 ; pub const MAX_INPUT : u32 = 255 ; pub const NAME_MAX : u32 = 255 ; pub const NGROUPS_MAX : u32 = 16 ; pub const OPEN_MAX : u32 = 64 ; pub const PATH_MAX : u32 = 1024 ; pub const PIPE_BUF : u32 = 512 ; pub const SYMLINK_MAX : u32 = 1024 ; pub const SYMLOOP_MAX : u32 = 32 ; pub const BC_DIM_MAX : u32 = 65535 ; pub const COLL_WEIGHTS_MAX : u32 = 2 ; pub const EXPR_NEST_MAX : u32 = 32 ; pub const LINE_MAX : u32 = 2048 ; pub const RE_DUP_MAX : u32 = 255 ; pub const IOV_MAX : u32 = 1024 ; pub const NZERO : u32 = 20 ; pub const TTY_NAME_MAX : u32 = 260 ; pub const LOGIN_NAME_MAX : u32 = 32 ; pub const HOST_NAME_MAX : u32 = 255 ; pub const GETENTROPY_MAX : u32 = 256 ; pub const _MAXCOMLEN : u32 = 24 ; pub const MAXCOMLEN : u32 = 23 ; pub const MAXINTERP : u32 = 128 ; pub const MAXLOGNAME : u32 = 32 ; pub const MAXUPRC : u32 = 80 ; pub const NCARGS : u32 = 524288 ; pub const NGROUPS : u32 = 16 ; pub const NOFILE : u32 = 64 ; pub const NOFILE_MAX : u32 = 1024 ; pub const NOGROUP : u32 = 65535 ; pub const MAXHOSTNAMELEN : u32 = 256 ; pub const _NSIG : u32 = 33 ; pub const NSIG : u32 = 33 ; pub const SIGHUP : u32 = 1 ; pub const SIGINT : u32 = 2 ; pub const SIGQUIT : u32 = 3 ; pub const SIGILL : u32 = 4 ; pub const SIGTRAP : u32 = 5 ; pub const SIGABRT : u32 = 6 ; pub const SIGIOT : u32 = 6 ; pub const SIGEMT : u32 = 7 ; pub const SIGFPE : u32 = 8 ; pub const SIGKILL : u32 = 9 ; pub const SIGBUS : u32 = 10 ; pub const SIGSEGV : u32 = 11 ; pub const SIGSYS : u32 = 12 ; pub const SIGPIPE : u32 = 13 ; pub const SIGALRM : u32 = 14 ; pub const SIGTERM : u32 = 15 ; pub const SIGURG : u32 = 16 ; pub const SIGSTOP : u32 = 17 ; pub const SIGTSTP : u32 = 18 ; pub const SIGCONT : u32 = 19 ; pub const SIGCHLD : u32 = 20 ; pub const SIGTTIN : u32 = 21 ; pub const SIGTTOU : u32 = 22 ; pub const SIGIO : u32 = 23 ; pub const SIGXCPU : u32 = 24 ; pub const SIGXFSZ : u32 = 25 ; pub const SIGVTALRM : u32 = 26 ; pub const SIGPROF : u32 = 27 ; pub const SIGWINCH : u32 = 28 ; pub const SIGINFO : u32 = 29 ; pub const SIGUSR1 : u32 = 30 ; pub const SIGUSR2 : u32 = 31 ; pub const SIGTHR : u32 = 32 ; pub const SI_NOINFO : u32 = 32767 ; pub const SI_USER : u32 = 0 ; pub const SI_LWP : i32 = - 1 ; pub const SI_QUEUE : i32 = - 2 ; pub const SI_TIMER : i32 = - 3 ; pub const ILL_ILLOPC : u32 = 1 ; pub const ILL_ILLOPN : u32 = 2 ; pub const ILL_ILLADR : u32 = 3 ; pub const ILL_ILLTRP : u32 = 4 ; pub const ILL_PRVOPC : u32 = 5 ; pub const ILL_PRVREG : u32 = 6 ; pub const ILL_COPROC : u32 = 7 ; pub const ILL_BADSTK : u32 = 8 ; pub const ILL_BTCFI : u32 = 9 ; pub const NSIGILL : u32 = 9 ; pub const EMT_TAGOVF : u32 = 1 ; pub const NSIGEMT : u32 = 1 ; pub const FPE_INTDIV : u32 = 1 ; pub const FPE_INTOVF : u32 = 2 ; pub const FPE_FLTDIV : u32 = 3 ; pub const FPE_FLTOVF : u32 = 4 ; pub const FPE_FLTUND : u32 = 5 ; pub const FPE_FLTRES : u32 = 6 ; pub const FPE_FLTINV : u32 = 7 ; pub const FPE_FLTSUB : u32 = 8 ; pub const NSIGFPE : u32 = 8 ; pub const SEGV_MAPERR : u32 = 1 ; pub const SEGV_ACCERR : u32 = 2 ; pub const NSIGSEGV : u32 = 2 ; pub const BUS_ADRALN : u32 = 1 ; pub const BUS_ADRERR : u32 = 2 ; pub const BUS_OBJERR : u32 = 3 ; pub const NSIGBUS : u32 = 3 ; pub const TRAP_BRKPT : u32 = 1 ; pub const TRAP_TRACE : u32 = 2 ; pub const NSIGTRAP : u32 = 2 ; pub const CLD_EXITED : u32 = 1 ; pub const CLD_KILLED : u32 = 2 ; pub const CLD_DUMPED : u32 = 3 ; pub const CLD_TRAPPED : u32 = 4 ; pub const CLD_STOPPED : u32 = 5 ; pub const CLD_CONTINUED : u32 = 6 ; pub const NSIGCLD : u32 = 6 ; pub const SI_MAXSZ : u32 = 128 ; pub const FD_SETSIZE : u32 = 1024 ; pub const __NBBY : u32 = 8 ; pub const NBBY : u32 = 8 ; pub const DST_NONE : u32 = 0 ; pub const DST_USA : u32 = 1 ; pub const DST_AUST : u32 = 2 ; pub const DST_WET : u32 = 3 ; pub const DST_MET : u32 = 4 ; pub const DST_EET : u32 = 5 ; pub const DST_CAN : u32 = 6 ; pub const ITIMER_REAL : u32 = 0 ; pub const ITIMER_VIRTUAL : u32 = 1 ; pub const ITIMER_PROF : u32 = 2 ; pub const CLOCKS_PER_SEC : u32 = 100 ; pub const CLOCK_REALTIME : u32 = 0 ; pub const CLOCK_PROCESS_CPUTIME_ID : u32 = 2 ; pub const CLOCK_MONOTONIC : u32 = 3 ; pub const CLOCK_THREAD_CPUTIME_ID : u32 = 4 ; pub const CLOCK_UPTIME : u32 = 5 ; pub const CLOCK_BOOTTIME : u32 = 6 ; pub const TIMER_RELTIME : u32 = 0 ; pub const TIMER_ABSTIME : u32 = 1 ; pub const CLK_TCK : u32 = 100 ; pub const TIME_UTC : u32 = 1 ; pub const SA_ONSTACK : u32 = 1 ; pub const SA_RESTART : u32 = 2 ; pub const SA_RESETHAND : u32 = 4 ; pub const SA_NODEFER : u32 = 16 ; pub const SA_NOCLDWAIT : u32 = 32 ; pub const SA_NOCLDSTOP : u32 = 8 ; pub const SA_SIGINFO : u32 = 64 ; pub const SIG_BLOCK : u32 = 1 ; pub const SIG_UNBLOCK : u32 = 2 ; pub const SIG_SETMASK : u32 = 3 ; pub const SV_ONSTACK : u32 = 1 ; pub const SV_INTERRUPT : u32 = 2 ; pub const SV_RESETHAND : u32 = 4 ; pub const SS_ONSTACK : u32 = 1 ; pub const SS_DISABLE : u32 = 4 ; pub const MINSIGSTKSZ : u32 = 12288 ; pub const SIGSTKSZ : u32 = 28672 ; pub const UQUAD_MAX : i32 = - 1 ; pub const QUAD_MAX : u64 = 9223372036854775807 ; pub const QUAD_MIN : i64 = - 9223372036854775808 ; pub const CHAR_BIT : u32 = 8 ; pub const SCHAR_MAX : u32 = 127 ; pub const SCHAR_MIN : i32 = - 128 ; pub const UCHAR_MAX : u32 = 255 ; pub const CHAR_MAX : u32 = 127 ; pub const CHAR_MIN : i32 = - 128 ; pub const MB_LEN_MAX : u32 = 4 ; pub const USHRT_MAX : u32 = 65535 ; pub const SHRT_MAX : u32 = 32767 ; pub const SHRT_MIN : i32 = - 32768 ; pub const UINT_MAX : u32 = 4294967295 ; pub const INT_MAX : u32 = 2147483647 ; pub const INT_MIN : i32 = - 2147483648 ; pub const ULONG_MAX : i32 = - 1 ; pub const LONG_MAX : u64 = 9223372036854775807 ; pub const LONG_MIN : i64 = - 9223372036854775808 ; pub const ULLONG_MAX : i32 = - 1 ; pub const LLONG_MAX : u64 = 9223372036854775807 ; pub const LLONG_MIN : i64 = - 9223372036854775808 ; pub const UID_MAX : u32 = 4294967295 ; pub const GID_MAX : u32 = 4294967295 ; pub const LONG_BIT : u32 = 64 ; pub const WORD_BIT : u32 = 32 ; pub const MACHINE : & [u8 ; 6] = b"amd64\0" ; pub const MACHINE_ARCH : & [u8 ; 6] = b"amd64\0" ; pub const PAGE_SHIFT : u32 = 12 ; pub const PAGE_SIZE : u32 = 4096 ; pub const PAGE_MASK : u32 = 4095 ; pub const KERNBASE : i32 = - 2147483648 ; pub const PZERO : u32 = 22 ; pub const MAXBSIZE : u32 = 65536 ; pub const _DEV_BSHIFT : u32 = 9 ; pub const DEV_BSIZE : u32 = 512 ; pub const MAXPATHLEN : u32 = 1024 ; pub const MAXSYMLINKS : u32 = 32 ; pub const _FSHIFT : u32 = 11 ; pub const FSCALE : u32 = 2048 ; pub const BC_BASE_MAX : u32 = 2147483647 ; pub const BC_SCALE_MAX : u32 = 2147483647 ; pub const BC_STRING_MAX : u32 = 2147483647 ; pub const VM_METER : u32 = 1 ; pub const VM_LOADAVG : u32 = 2 ; pub const VM_PSSTRINGS : u32 = 3 ; pub const VM_UVMEXP : u32 = 4 ; pub const VM_SWAPENCRYPT : u32 = 5 ; pub const VM_NKMEMPAGES : u32 = 6 ; pub const VM_ANONMIN : u32 = 7 ; pub const VM_VTEXTMIN : u32 = 8 ; pub const VM_VNODEMIN : u32 = 9 ; pub const VM_MAXSLP : u32 = 10 ; pub const VM_USPACE : u32 = 11 ; pub const VM_MALLOC_CONF : u32 = 12 ; pub const VM_MAXID : u32 = 13 ; pub const CTL_MAXNAME : u32 = 12 ; pub const CTLTYPE_NODE : u32 = 1 ; pub const CTLTYPE_INT : u32 = 2 ; pub const CTLTYPE_STRING : u32 = 3 ; pub const CTLTYPE_QUAD : u32 = 4 ; pub const CTLTYPE_STRUCT : u32 = 5 ; pub const CTL_UNSPEC : u32 = 0 ; pub const CTL_KERN : u32 = 1 ; pub const CTL_VM : u32 = 2 ; pub const CTL_FS : u32 = 3 ; pub const CTL_NET : u32 = 4 ; pub const CTL_DEBUG : u32 = 5 ; pub const CTL_HW : u32 = 6 ; pub const CTL_MACHDEP : u32 = 7 ; pub const CTL_DDB : u32 = 9 ; pub const CTL_VFS : u32 = 10 ; pub const CTL_MAXID : u32 = 11 ; pub const KERN_OSTYPE : u32 = 1 ; pub const KERN_OSRELEASE : u32 = 2 ; pub const KERN_OSREV : u32 = 3 ; pub const KERN_VERSION : u32 = 4 ; pub const KERN_MAXVNODES : u32 = 5 ; pub const KERN_MAXPROC : u32 = 6 ; pub const KERN_MAXFILES : u32 = 7 ; pub const KERN_ARGMAX : u32 = 8 ; pub const KERN_SECURELVL : u32 = 9 ; pub const KERN_HOSTNAME : u32 = 10 ; pub const KERN_HOSTID : u32 = 11 ; pub const KERN_CLOCKRATE : u32 = 12 ; pub const KERN_PROF : u32 = 16 ; pub const KERN_POSIX1 : u32 = 17 ; pub const KERN_NGROUPS : u32 = 18 ; pub const KERN_JOB_CONTROL : u32 = 19 ; pub const KERN_SAVED_IDS : u32 = 20 ; pub const KERN_BOOTTIME : u32 = 21 ; pub const KERN_DOMAINNAME : u32 = 22 ; pub const KERN_MAXPARTITIONS : u32 = 23 ; pub const KERN_RAWPARTITION : u32 = 24 ; pub const KERN_MAXTHREAD : u32 = 25 ; pub const KERN_NTHREADS : u32 = 26 ; pub const KERN_OSVERSION : u32 = 27 ; pub const KERN_SOMAXCONN : u32 = 28 ; pub const KERN_SOMINCONN : u32 = 29 ; pub const KERN_NOSUIDCOREDUMP : u32 = 32 ; pub const KERN_FSYNC : u32 = 33 ; pub const KERN_SYSVMSG : u32 = 34 ; pub const KERN_SYSVSEM : u32 = 35 ; pub const KERN_SYSVSHM : u32 = 36 ; pub const KERN_MSGBUFSIZE : u32 = 38 ; pub const KERN_MALLOCSTATS : u32 = 39 ; pub const KERN_CPTIME : u32 = 40 ; pub const KERN_NCHSTATS : u32 = 41 ; pub const KERN_FORKSTAT : u32 = 42 ; pub const KERN_TTY : u32 = 44 ; pub const KERN_CCPU : u32 = 45 ; pub const KERN_FSCALE : u32 = 46 ; pub const KERN_NPROCS : u32 = 47 ; pub const KERN_MSGBUF : u32 = 48 ; pub const KERN_POOL : u32 = 49 ; pub const KERN_STACKGAPRANDOM : u32 = 50 ; pub const KERN_SYSVIPC_INFO : u32 = 51 ; pub const KERN_ALLOWKMEM : u32 = 52 ; pub const KERN_WITNESSWATCH : u32 = 53 ; pub const KERN_SPLASSERT : u32 = 54 ; pub const KERN_PROC_ARGS : u32 = 55 ; pub const KERN_NFILES : u32 = 56 ; pub const KERN_TTYCOUNT : u32 = 57 ; pub const KERN_NUMVNODES : u32 = 58 ; pub const KERN_MBSTAT : u32 = 59 ; pub const KERN_WITNESS : u32 = 60 ; pub const KERN_SEMINFO : u32 = 61 ; pub const KERN_SHMINFO : u32 = 62 ; pub const KERN_INTRCNT : u32 = 63 ; pub const KERN_WATCHDOG : u32 = 64 ; pub const KERN_ALLOWDT : u32 = 65 ; pub const KERN_PROC : u32 = 66 ; pub const KERN_MAXCLUSTERS : u32 = 67 ; pub const KERN_EVCOUNT : u32 = 68 ; pub const KERN_TIMECOUNTER : u32 = 69 ; pub const KERN_MAXLOCKSPERUID : u32 = 70 ; pub const KERN_CPTIME2 : u32 = 71 ; pub const KERN_CACHEPCT : u32 = 72 ; pub const KERN_FILE : u32 = 73 ; pub const KERN_WXABORT : u32 = 74 ; pub const KERN_CONSDEV : u32 = 75 ; pub const KERN_NETLIVELOCKS : u32 = 76 ; pub const KERN_POOL_DEBUG : u32 = 77 ; pub const KERN_PROC_CWD : u32 = 78 ; pub const KERN_PROC_NOBROADCASTKILL : u32 = 79 ; pub const KERN_PROC_VMMAP : u32 = 80 ; pub const KERN_GLOBAL_PTRACE : u32 = 81 ; pub const KERN_CONSBUFSIZE : u32 = 82 ; pub const KERN_CONSBUF : u32 = 83 ; pub const KERN_AUDIO : u32 = 84 ; pub const KERN_CPUSTATS : u32 = 85 ; pub const KERN_PFSTATUS : u32 = 86 ; pub const KERN_TIMEOUT_STATS : u32 = 87 ; pub const KERN_UTC_OFFSET : u32 = 88 ; pub const KERN_VIDEO : u32 = 89 ; pub const KERN_CLOCKINTR : u32 = 90 ; pub const KERN_AUTOCONF_SERIAL : u32 = 91 ; pub const KERN_MAXID : u32 = 92 ; pub const KERN_PROC_ALL : u32 = 0 ; pub const KERN_PROC_PID : u32 = 1 ; pub const KERN_PROC_PGRP : u32 = 2 ; pub const KERN_PROC_SESSION : u32 = 3 ; pub const KERN_PROC_TTY : u32 = 4 ; pub const KERN_PROC_UID : u32 = 5 ; pub const KERN_PROC_RUID : u32 = 6 ; pub const KERN_PROC_KTHREAD : u32 = 7 ; pub const KERN_PROC_SHOW_THREADS : u32 = 1073741824 ; pub const KERN_SYSVIPC_MSG_INFO : u32 = 1 ; pub const KERN_SYSVIPC_SEM_INFO : u32 = 2 ; pub const KERN_SYSVIPC_SHM_INFO : u32 = 3 ; pub const KERN_PROC_ARGV : u32 = 1 ; pub const KERN_PROC_NARGV : u32 = 2 ; pub const KERN_PROC_ENV : u32 = 3 ; pub const KERN_PROC_NENV : u32 = 4 ; pub const KERN_AUDIO_RECORD : u32 = 1 ; pub const KERN_AUDIO_KBDCONTROL : u32 = 2 ; pub const KERN_AUDIO_MAXID : u32 = 3 ; pub const KERN_VIDEO_RECORD : u32 = 1 ; pub const KERN_VIDEO_MAXID : u32 = 2 ; pub const KERN_WITNESS_WATCH : u32 = 1 ; pub const KERN_WITNESS_LOCKTRACE : u32 = 2 ; pub const KERN_WITNESS_MAXID : u32 = 3 ; pub const KI_NGROUPS : u32 = 16 ; pub const KI_MAXCOMLEN : u32 = 24 ; pub const KI_WMESGLEN : u32 = 8 ; pub const KI_MAXLOGNAME : u32 = 32 ; pub const KI_EMULNAMELEN : u32 = 8 ; pub const EPROC_CTTY : u32 = 1 ; pub const EPROC_SLEADER : u32 = 2 ; pub const EPROC_UNVEIL : u32 = 4 ; pub const EPROC_LKUNVEIL : u32 = 8 ; pub const KVE_ET_OBJ : u32 = 1 ; pub const KVE_ET_SUBMAP : u32 = 2 ; pub const KVE_ET_COPYONWRITE : u32 = 4 ; pub const KVE_ET_NEEDSCOPY : u32 = 8 ; pub const KVE_ET_HOLE : u32 = 16 ; pub const KVE_ET_NOFAULT : u32 = 32 ; pub const KVE_ET_STACK : u32 = 64 ; pub const KVE_ET_WC : u32 = 128 ; pub const KVE_ET_CONCEAL : u32 = 256 ; pub const KVE_ET_SYSCALL : u32 = 512 ; pub const KVE_ET_FREEMAPPED : u32 = 2048 ; pub const KVE_PROT_NONE : u32 = 0 ; pub const KVE_PROT_READ : u32 = 1 ; pub const KVE_PROT_WRITE : u32 = 2 ; pub const KVE_PROT_EXEC : u32 = 4 ; pub const KVE_ADV_NORMAL : u32 = 0 ; pub const KVE_ADV_RANDOM : u32 = 1 ; pub const KVE_ADV_SEQUENTIAL : u32 = 2 ; pub const KVE_INH_SHARE : u32 = 0 ; pub const KVE_INH_COPY : u32 = 16 ; pub const KVE_INH_NONE : u32 = 32 ; pub const KVE_INH_ZERO : u32 = 48 ; pub const KVE_F_STATIC : u32 = 1 ; pub const KVE_F_KMEM : u32 = 2 ; pub const KERN_FILE_BYFILE : u32 = 1 ; pub const KERN_FILE_BYPID : u32 = 2 ; pub const KERN_FILE_BYUID : u32 = 3 ; pub const KERN_FILESLOP : u32 = 10 ; pub const KERN_FILE_TEXT : i32 = - 1 ; pub const KERN_FILE_CDIR : i32 = - 2 ; pub const KERN_FILE_RDIR : i32 = - 3 ; pub const KERN_FILE_TRACE : i32 = - 4 ; pub const KI_MNAMELEN : u32 = 96 ; pub const KI_UNPPATHLEN : u32 = 104 ; pub const KERN_INTRCNT_NUM : u32 = 1 ; pub const KERN_INTRCNT_CNT : u32 = 2 ; pub const KERN_INTRCNT_NAME : u32 = 3 ; pub const KERN_INTRCNT_VECTOR : u32 = 4 ; pub const KERN_INTRCNT_MAXID : u32 = 5 ; pub const KERN_WATCHDOG_PERIOD : u32 = 1 ; pub const KERN_WATCHDOG_AUTO : u32 = 2 ; pub const KERN_WATCHDOG_MAXID : u32 = 3 ; pub const KERN_TIMECOUNTER_TICK : u32 = 1 ; pub const KERN_TIMECOUNTER_TIMESTEPWARNINGS : u32 = 2 ; pub const KERN_TIMECOUNTER_HARDWARE : u32 = 3 ; pub const KERN_TIMECOUNTER_CHOICE : u32 = 4 ; pub const KERN_TIMECOUNTER_MAXID : u32 = 5 ; pub const KERN_CLOCKINTR_STATS : u32 = 1 ; pub const KERN_CLOCKINTR_MAXID : u32 = 2 ; pub const FS_POSIX : u32 = 1 ; pub const FS_MAXID : u32 = 2 ; pub const FS_POSIX_SETUID : u32 = 1 ; pub const FS_POSIX_MAXID : u32 = 2 ; pub const HW_MACHINE : u32 = 1 ; pub const HW_MODEL : u32 = 2 ; pub const HW_NCPU : u32 = 3 ; pub const HW_BYTEORDER : u32 = 4 ; pub const HW_PHYSMEM : u32 = 5 ; pub const HW_USERMEM : u32 = 6 ; pub const HW_PAGESIZE : u32 = 7 ; pub const HW_DISKNAMES : u32 = 8 ; pub const HW_DISKSTATS : u32 = 9 ; pub const HW_DISKCOUNT : u32 = 10 ; pub const HW_SENSORS : u32 = 11 ; pub const HW_CPUSPEED : u32 = 12 ; pub const HW_SETPERF : u32 = 13 ; pub const HW_VENDOR : u32 = 14 ; pub const HW_PRODUCT : u32 = 15 ; pub const HW_VERSION : u32 = 16 ; pub const HW_SERIALNO : u32 = 17 ; pub const HW_UUID : u32 = 18 ; pub const HW_PHYSMEM64 : u32 = 19 ; pub const HW_USERMEM64 : u32 = 20 ; pub const HW_NCPUFOUND : u32 = 21 ; pub const HW_ALLOWPOWERDOWN : u32 = 22 ; pub const HW_PERFPOLICY : u32 = 23 ; pub const HW_SMT : u32 = 24 ; pub const HW_NCPUONLINE : u32 = 25 ; pub const HW_POWER : u32 = 26 ; pub const HW_BATTERY : u32 = 27 ; pub const HW_UCOMNAMES : u32 = 28 ; pub const HW_MAXID : u32 = 29 ; pub const HW_BATTERY_CHARGEMODE : u32 = 1 ; pub const HW_BATTERY_CHARGESTART : u32 = 2 ; pub const HW_BATTERY_CHARGESTOP : u32 = 3 ; pub const HW_BATTERY_MAXID : u32 = 4 ; pub const CTL_DEBUG_NAME : u32 = 0 ; pub const CTL_DEBUG_VALUE : u32 = 1 ; pub const CTL_DEBUG_MAXID : u32 = 20 ; pub const UIO_MAXIOV : u32 = 1024 ; pub const SOCK_STREAM : u32 = 1 ; pub const SOCK_DGRAM : u32 = 2 ; pub const SOCK_RAW : u32 = 3 ; pub const SOCK_RDM : u32 = 4 ; pub const SOCK_SEQPACKET : u32 = 5 ; pub const SOCK_CLOEXEC : u32 = 32768 ; pub const SOCK_NONBLOCK : u32 = 16384 ; pub const SOCK_DNS : u32 = 4096 ; pub const SO_DEBUG : u32 = 1 ; pub const SO_ACCEPTCONN : u32 = 2 ; pub const SO_REUSEADDR : u32 = 4 ; pub const SO_KEEPALIVE : u32 = 8 ; pub const SO_DONTROUTE : u32 = 16 ; pub const SO_BROADCAST : u32 = 32 ; pub const SO_USELOOPBACK : u32 = 64 ; pub const SO_LINGER : u32 = 128 ; pub const SO_OOBINLINE : u32 = 256 ; pub const SO_REUSEPORT : u32 = 512 ; pub const SO_TIMESTAMP : u32 = 2048 ; pub const SO_BINDANY : u32 = 4096 ; pub const SO_ZEROIZE : u32 = 8192 ; pub const SO_SNDBUF : u32 = 4097 ; pub const SO_RCVBUF : u32 = 4098 ; pub const SO_SNDLOWAT : u32 = 4099 ; pub const SO_RCVLOWAT : u32 = 4100 ; pub const SO_SNDTIMEO : u32 = 4101 ; pub const SO_RCVTIMEO : u32 = 4102 ; pub const SO_ERROR : u32 = 4103 ; pub const SO_TYPE : u32 = 4104 ; pub const SO_NETPROC : u32 = 4128 ; pub const SO_RTABLE : u32 = 4129 ; pub const SO_PEERCRED : u32 = 4130 ; pub const SO_SPLICE : u32 = 4131 ; pub const SO_DOMAIN : u32 = 4132 ; pub const SO_PROTOCOL : u32 = 4133 ; pub const RT_TABLEID_MAX : u32 = 255 ; pub const RT_TABLEID_BITS : u32 = 8 ; pub const RT_TABLEID_MASK : u32 = 255 ; pub const SOL_SOCKET : u32 = 65535 ; pub const AF_UNSPEC : u32 = 0 ; pub const AF_UNIX : u32 = 1 ; pub const AF_LOCAL : u32 = 1 ; pub const AF_INET : u32 = 2 ; pub const AF_IMPLINK : u32 = 3 ; pub const AF_PUP : u32 = 4 ; pub const AF_CHAOS : u32 = 5 ; pub const AF_NS : u32 = 6 ; pub const AF_ISO : u32 = 7 ; pub const AF_OSI : u32 = 7 ; pub const AF_ECMA : u32 = 8 ; pub const AF_DATAKIT : u32 = 9 ; pub const AF_CCITT : u32 = 10 ; pub const AF_SNA : u32 = 11 ; pub const AF_DECnet : u32 = 12 ; pub const AF_DLI : u32 = 13 ; pub const AF_LAT : u32 = 14 ; pub const AF_HYLINK : u32 = 15 ; pub const AF_APPLETALK : u32 = 16 ; pub const AF_ROUTE : u32 = 17 ; pub const AF_LINK : u32 = 18 ; pub const pseudo_AF_XTP : u32 = 19 ; pub const AF_COIP : u32 = 20 ; pub const AF_CNT : u32 = 21 ; pub const pseudo_AF_RTIP : u32 = 22 ; pub const AF_IPX : u32 = 23 ; pub const AF_INET6 : u32 = 24 ; pub const pseudo_AF_PIP : u32 = 25 ; pub const AF_ISDN : u32 = 26 ; pub const AF_E164 : u32 = 26 ; pub const AF_NATM : u32 = 27 ; pub const AF_ENCAP : u32 = 28 ; pub const AF_SIP : u32 = 29 ; pub const AF_KEY : u32 = 30 ; pub const pseudo_AF_HDRCMPLT : u32 = 31 ; pub const AF_BLUETOOTH : u32 = 32 ; pub const AF_MPLS : u32 = 33 ; pub const pseudo_AF_PFLOW : u32 = 34 ; pub const pseudo_AF_PIPEX : u32 = 35 ; pub const AF_FRAME : u32 = 36 ; pub const AF_MAX : u32 = 37 ; pub const PF_UNSPEC : u32 = 0 ; pub const PF_LOCAL : u32 = 1 ; pub const PF_UNIX : u32 = 1 ; pub const PF_INET : u32 = 2 ; pub const PF_IMPLINK : u32 = 3 ; pub const PF_PUP : u32 = 4 ; pub const PF_CHAOS : u32 = 5 ; pub const PF_NS : u32 = 6 ; pub const PF_ISO : u32 = 7 ; pub const PF_OSI : u32 = 7 ; pub const PF_ECMA : u32 = 8 ; pub const PF_DATAKIT : u32 = 9 ; pub const PF_CCITT : u32 = 10 ; pub const PF_SNA : u32 = 11 ; pub const PF_DECnet : u32 = 12 ; pub const PF_DLI : u32 = 13 ; pub const PF_LAT : u32 = 14 ; pub const PF_HYLINK : u32 = 15 ; pub const PF_APPLETALK : u32 = 16 ; pub const PF_ROUTE : u32 = 17 ; pub const PF_LINK : u32 = 18 ; pub const PF_XTP : u32 = 19 ; pub const PF_COIP : u32 = 20 ; pub const PF_CNT : u32 = 21 ; pub const PF_IPX : u32 = 23 ; pub const PF_INET6 : u32 = 24 ; pub const PF_RTIP : u32 = 22 ; pub const PF_PIP : u32 = 25 ; pub const PF_ISDN : u32 = 26 ; pub const PF_NATM : u32 = 27 ; pub const PF_ENCAP : u32 = 28 ; pub const PF_SIP : u32 = 29 ; pub const PF_KEY : u32 = 30 ; pub const PF_BPF : u32 = 31 ; pub const PF_BLUETOOTH : u32 = 32 ; pub const PF_MPLS : u32 = 33 ; pub const PF_PFLOW : u32 = 34 ; pub const PF_PIPEX : u32 = 35 ; pub const PF_FRAME : u32 = 36 ; pub const PF_MAX : u32 = 37 ; pub const SHUT_RD : u32 = 0 ; pub const SHUT_WR : u32 = 1 ; pub const SHUT_RDWR : u32 = 2 ; pub const NET_MAXID : u32 = 37 ; pub const NET_RT_DUMP : u32 = 1 ; pub const NET_RT_FLAGS : u32 = 2 ; pub const NET_RT_IFLIST : u32 = 3 ; pub const NET_RT_STATS : u32 = 4 ; pub const NET_RT_TABLE : u32 = 5 ; pub const NET_RT_IFNAMES : u32 = 6 ; pub const NET_RT_SOURCE : u32 = 7 ; pub const NET_RT_MAXID : u32 = 8 ; pub const NET_UNIX_INFLIGHT : u32 = 6 ; pub const NET_UNIX_DEFERRED : u32 = 7 ; pub const NET_UNIX_MAXID : u32 = 8 ; pub const UNPCTL_RECVSPACE : u32 = 1 ; pub const UNPCTL_SENDSPACE : u32 = 2 ; pub const NET_UNIX_PROTO_MAXID : u32 = 3 ; pub const NET_LINK_IFRXQ : u32 = 1 ; pub const NET_LINK_MAXID : u32 = 2 ; pub const NET_LINK_IFRXQ_PRESSURE_RETURN : u32 = 1 ; pub const NET_LINK_IFRXQ_PRESSURE_DROP : u32 = 2 ; pub const NET_LINK_IFRXQ_MAXID : u32 = 3 ; pub const NET_KEY_SADB_DUMP : u32 = 1 ; pub const NET_KEY_SPD_DUMP : u32 = 2 ; pub const NET_KEY_MAXID : u32 = 3 ; pub const NET_BPF_BUFSIZE : u32 = 1 ; pub const NET_BPF_MAXBUFSIZE : u32 = 2 ; pub const NET_BPF_MAXID : u32 = 3 ; pub const NET_PFLOW_STATS : u32 = 1 ; pub const NET_PFLOW_MAXID : u32 = 2 ; pub const SOMAXCONN : u32 = 128 ; pub const MSG_OOB : u32 = 1 ; pub const MSG_PEEK : u32 = 2 ; pub const MSG_DONTROUTE : u32 = 4 ; pub const MSG_EOR : u32 = 8 ; pub const MSG_TRUNC : u32 = 16 ; pub const MSG_CTRUNC : u32 = 32 ; pub const MSG_WAITALL : u32 = 64 ; pub const MSG_DONTWAIT : u32 = 128 ; pub const MSG_BCAST : u32 = 256 ; pub const MSG_MCAST : u32 = 512 ; pub const MSG_NOSIGNAL : u32 = 1024 ; pub const MSG_CMSG_CLOEXEC : u32 = 2048 ; pub const MSG_WAITFORONE : u32 = 4096 ; pub const SCM_RIGHTS : u32 = 1 ; pub const SCM_TIMESTAMP : u32 = 4 ; pub const IPPROTO_IP : u32 = 0 ; pub const IPPROTO_HOPOPTS : u32 = 0 ; pub const IPPROTO_ICMP : u32 = 1 ; pub const IPPROTO_IGMP : u32 = 2 ; pub const IPPROTO_GGP : u32 = 3 ; pub const IPPROTO_IPIP : u32 = 4 ; pub const IPPROTO_IPV4 : u32 = 4 ; pub const IPPROTO_TCP : u32 = 6 ; pub const IPPROTO_EGP : u32 = 8 ; pub const IPPROTO_PUP : u32 = 12 ; pub const IPPROTO_UDP : u32 = 17 ; pub const IPPROTO_IDP : u32 = 22 ; pub const IPPROTO_TP : u32 = 29 ; pub const IPPROTO_IPV6 : u32 = 41 ; pub const IPPROTO_ROUTING : u32 = 43 ; pub const IPPROTO_FRAGMENT : u32 = 44 ; pub const IPPROTO_RSVP : u32 = 46 ; pub const IPPROTO_GRE : u32 = 47 ; pub const IPPROTO_ESP : u32 = 50 ; pub const IPPROTO_AH : u32 = 51 ; pub const IPPROTO_MOBILE : u32 = 55 ; pub const IPPROTO_ICMPV6 : u32 = 58 ; pub const IPPROTO_NONE : u32 = 59 ; pub const IPPROTO_DSTOPTS : u32 = 60 ; pub const IPPROTO_EON : u32 = 80 ; pub const IPPROTO_ETHERIP : u32 = 97 ; pub const IPPROTO_ENCAP : u32 = 98 ; pub const IPPROTO_PIM : u32 = 103 ; pub const IPPROTO_IPCOMP : u32 = 108 ; pub const IPPROTO_CARP : u32 = 112 ; pub const IPPROTO_SCTP : u32 = 132 ; pub const IPPROTO_UDPLITE : u32 = 136 ; pub const IPPROTO_MPLS : u32 = 137 ; pub const IPPROTO_PFSYNC : u32 = 240 ; pub const IPPROTO_RAW : u32 = 255 ; pub const IPPROTO_MAX : u32 = 256 ; pub const IPPROTO_DIVERT : u32 = 258 ; pub const IPPORT_RESERVED : u32 = 1024 ; pub const IPPORT_USERRESERVED : u32 = 49151 ; pub const IPPORT_HIFIRSTAUTO : u32 = 49152 ; pub const IPPORT_HILASTAUTO : u32 = 65535 ; pub const IPPROTO_DONE : u32 = 257 ; pub const IN_CLASSA_NSHIFT : u32 = 24 ; pub const IN_CLASSA_MAX : u32 = 128 ; pub const IN_CLASSB_NSHIFT : u32 = 16 ; pub const IN_CLASSB_MAX : u32 = 65536 ; pub const IN_CLASSC_NSHIFT : u32 = 8 ; pub const IN_CLASSD_NSHIFT : u32 = 28 ; pub const IN_RFC3021_NSHIFT : u32 = 31 ; pub const IN_LOOPBACKNET : u32 = 127 ; pub const IP_OPTIONS : u32 = 1 ; pub const IP_HDRINCL : u32 = 2 ; pub const IP_TOS : u32 = 3 ; pub const IP_TTL : u32 = 4 ; pub const IP_RECVOPTS : u32 = 5 ; pub const IP_RECVRETOPTS : u32 = 6 ; pub const IP_RECVDSTADDR : u32 = 7 ; pub const IP_RETOPTS : u32 = 8 ; pub const IP_MULTICAST_IF : u32 = 9 ; pub const IP_MULTICAST_TTL : u32 = 10 ; pub const IP_MULTICAST_LOOP : u32 = 11 ; pub const IP_ADD_MEMBERSHIP : u32 = 12 ; pub const IP_DROP_MEMBERSHIP : u32 = 13 ; pub const IP_PORTRANGE : u32 = 19 ; pub const IP_AUTH_LEVEL : u32 = 20 ; pub const IP_ESP_TRANS_LEVEL : u32 = 21 ; pub const IP_ESP_NETWORK_LEVEL : u32 = 22 ; pub const IP_IPSEC_LOCAL_ID : u32 = 23 ; pub const IP_IPSEC_REMOTE_ID : u32 = 24 ; pub const IP_IPSEC_LOCAL_CRED : u32 = 25 ; pub const IP_IPSEC_REMOTE_CRED : u32 = 26 ; pub const IP_IPSEC_LOCAL_AUTH : u32 = 27 ; pub const IP_IPSEC_REMOTE_AUTH : u32 = 28 ; pub const IP_IPCOMP_LEVEL : u32 = 29 ; pub const IP_RECVIF : u32 = 30 ; pub const IP_RECVTTL : u32 = 31 ; pub const IP_MINTTL : u32 = 32 ; pub const IP_RECVDSTPORT : u32 = 33 ; pub const IP_PIPEX : u32 = 34 ; pub const IP_RECVRTABLE : u32 = 35 ; pub const IP_IPSECFLOWINFO : u32 = 36 ; pub const IP_IPDEFTTL : u32 = 37 ; pub const IP_SENDSRCADDR : u32 = 7 ; pub const IP_RTABLE : u32 = 4129 ; pub const IPSEC_LEVEL_BYPASS : u32 = 0 ; pub const IPSEC_LEVEL_NONE : u32 = 0 ; pub const IPSEC_LEVEL_AVAIL : u32 = 1 ; pub const IPSEC_LEVEL_USE : u32 = 2 ; pub const IPSEC_LEVEL_REQUIRE : u32 = 3 ; pub const IPSEC_LEVEL_UNIQUE : u32 = 4 ; pub const IPSEC_LEVEL_DEFAULT : u32 = 1 ; pub const IPSEC_AUTH_LEVEL_DEFAULT : u32 = 1 ; pub const IPSEC_ESP_TRANS_LEVEL_DEFAULT : u32 = 1 ; pub const IPSEC_ESP_NETWORK_LEVEL_DEFAULT : u32 = 1 ; pub const IPSEC_IPCOMP_LEVEL_DEFAULT : u32 = 1 ; pub const IP_DEFAULT_MULTICAST_TTL : u32 = 1 ; pub const IP_DEFAULT_MULTICAST_LOOP : u32 = 1 ; pub const IP_MIN_MEMBERSHIPS : u32 = 15 ; pub const IP_MAX_MEMBERSHIPS : u32 = 4095 ; pub const IP_PORTRANGE_DEFAULT : u32 = 0 ; pub const IP_PORTRANGE_HIGH : u32 = 1 ; pub const IP_PORTRANGE_LOW : u32 = 2 ; pub const INET_ADDRSTRLEN : u32 = 16 ; pub const IPPROTO_MAXID : u32 = 259 ; pub const IPCTL_FORWARDING : u32 = 1 ; pub const IPCTL_SENDREDIRECTS : u32 = 2 ; pub const IPCTL_DEFTTL : u32 = 3 ; pub const IPCTL_SOURCEROUTE : u32 = 5 ; pub const IPCTL_DIRECTEDBCAST : u32 = 6 ; pub const IPCTL_IPPORT_FIRSTAUTO : u32 = 7 ; pub const IPCTL_IPPORT_LASTAUTO : u32 = 8 ; pub const IPCTL_IPPORT_HIFIRSTAUTO : u32 = 9 ; pub const IPCTL_IPPORT_HILASTAUTO : u32 = 10 ; pub const IPCTL_IPPORT_MAXQUEUE : u32 = 11 ; pub const IPCTL_ENCDEBUG : u32 = 12 ; pub const IPCTL_IPSEC_STATS : u32 = 13 ; pub const IPCTL_IPSEC_EXPIRE_ACQUIRE : u32 = 14 ; pub const IPCTL_IPSEC_EMBRYONIC_SA_TIMEOUT : u32 = 15 ; pub const IPCTL_IPSEC_REQUIRE_PFS : u32 = 16 ; pub const IPCTL_IPSEC_SOFT_ALLOCATIONS : u32 = 17 ; pub const IPCTL_IPSEC_ALLOCATIONS : u32 = 18 ; pub const IPCTL_IPSEC_SOFT_BYTES : u32 = 19 ; pub const IPCTL_IPSEC_BYTES : u32 = 20 ; pub const IPCTL_IPSEC_TIMEOUT : u32 = 21 ; pub const IPCTL_IPSEC_SOFT_TIMEOUT : u32 = 22 ; pub const IPCTL_IPSEC_SOFT_FIRSTUSE : u32 = 23 ; pub const IPCTL_IPSEC_FIRSTUSE : u32 = 24 ; pub const IPCTL_IPSEC_ENC_ALGORITHM : u32 = 25 ; pub const IPCTL_IPSEC_AUTH_ALGORITHM : u32 = 26 ; pub const IPCTL_MTUDISC : u32 = 27 ; pub const IPCTL_MTUDISCTIMEOUT : u32 = 28 ; pub const IPCTL_IPSEC_IPCOMP_ALGORITHM : u32 = 29 ; pub const IPCTL_IFQUEUE : u32 = 30 ; pub const IPCTL_MFORWARDING : u32 = 31 ; pub const IPCTL_MULTIPATH : u32 = 32 ; pub const IPCTL_STATS : u32 = 33 ; pub const IPCTL_MRTPROTO : u32 = 34 ; pub const IPCTL_MRTSTATS : u32 = 35 ; pub const IPCTL_ARPQUEUED : u32 = 36 ; pub const IPCTL_MRTMFC : u32 = 37 ; pub const IPCTL_MRTVIF : u32 = 38 ; pub const IPCTL_ARPTIMEOUT : u32 = 39 ; pub const IPCTL_ARPDOWN : u32 = 40 ; pub const IPCTL_ARPQUEUE : u32 = 41 ; pub const IPCTL_MAXID : u32 = 42 ; pub const INET6_ADDRSTRLEN : u32 = 46 ; pub const __IPV6_ADDR_SCOPE_NODELOCAL : u32 = 1 ; pub const __IPV6_ADDR_SCOPE_INTFACELOCAL : u32 = 1 ; pub const __IPV6_ADDR_SCOPE_LINKLOCAL : u32 = 2 ; pub const __IPV6_ADDR_SCOPE_SITELOCAL : u32 = 5 ; pub const __IPV6_ADDR_SCOPE_ORGLOCAL : u32 = 8 ; pub const __IPV6_ADDR_SCOPE_GLOBAL : u32 = 14 ; pub const IPV6_UNICAST_HOPS : u32 = 4 ; pub const IPV6_MULTICAST_IF : u32 = 9 ; pub const IPV6_MULTICAST_HOPS : u32 = 10 ; pub const IPV6_MULTICAST_LOOP : u32 = 11 ; pub const IPV6_JOIN_GROUP : u32 = 12 ; pub const IPV6_LEAVE_GROUP : u32 = 13 ; pub const IPV6_PORTRANGE : u32 = 14 ; pub const ICMP6_FILTER : u32 = 18 ; pub const IPV6_CHECKSUM : u32 = 26 ; pub const IPV6_V6ONLY : u32 = 27 ; pub const IPV6_RTHDRDSTOPTS : u32 = 35 ; pub const IPV6_RECVPKTINFO : u32 = 36 ; pub const IPV6_RECVHOPLIMIT : u32 = 37 ; pub const IPV6_RECVRTHDR : u32 = 38 ; pub const IPV6_RECVHOPOPTS : u32 = 39 ; pub const IPV6_RECVDSTOPTS : u32 = 40 ; pub const IPV6_USE_MIN_MTU : u32 = 42 ; pub const IPV6_RECVPATHMTU : u32 = 43 ; pub const IPV6_PATHMTU : u32 = 44 ; pub const IPV6_PKTINFO : u32 = 46 ; pub const IPV6_HOPLIMIT : u32 = 47 ; pub const IPV6_NEXTHOP : u32 = 48 ; pub const IPV6_HOPOPTS : u32 = 49 ; pub const IPV6_DSTOPTS : u32 = 50 ; pub const IPV6_RTHDR : u32 = 51 ; pub const IPV6_AUTH_LEVEL : u32 = 53 ; pub const IPV6_ESP_TRANS_LEVEL : u32 = 54 ; pub const IPV6_ESP_NETWORK_LEVEL : u32 = 55 ; pub const IPSEC6_OUTSA : u32 = 56 ; pub const IPV6_RECVTCLASS : u32 = 57 ; pub const IPV6_AUTOFLOWLABEL : u32 = 59 ; pub const IPV6_IPCOMP_LEVEL : u32 = 60 ; pub const IPV6_TCLASS : u32 = 61 ; pub const IPV6_DONTFRAG : u32 = 62 ; pub const IPV6_PIPEX : u32 = 63 ; pub const IPV6_RECVDSTPORT : u32 = 64 ; pub const IPV6_MINHOPCOUNT : u32 = 65 ; pub const IPV6_RTABLE : u32 = 4129 ; pub const IPV6_RTHDR_LOOSE : u32 = 0 ; pub const IPV6_RTHDR_TYPE_0 : u32 = 0 ; pub const IPV6_DEFAULT_MULTICAST_HOPS : u32 = 1 ; pub const IPV6_DEFAULT_MULTICAST_LOOP : u32 = 1 ; pub const IPV6_PORTRANGE_DEFAULT : u32 = 0 ; pub const IPV6_PORTRANGE_HIGH : u32 = 1 ; pub const IPV6_PORTRANGE_LOW : u32 = 2 ; pub const IPV6PROTO_MAXID : u32 = 259 ; pub const IPV6CTL_FORWARDING : u32 = 1 ; pub const IPV6CTL_SENDREDIRECTS : u32 = 2 ; pub const IPV6CTL_DEFHLIM : u32 = 3 ; pub const IPV6CTL_FORWSRCRT : u32 = 5 ; pub const IPV6CTL_STATS : u32 = 6 ; pub const IPV6CTL_MRTSTATS : u32 = 7 ; pub const IPV6CTL_MRTPROTO : u32 = 8 ; pub const IPV6CTL_MAXFRAGPACKETS : u32 = 9 ; pub const IPV6CTL_SOURCECHECK : u32 = 10 ; pub const IPV6CTL_SOURCECHECK_LOGINT : u32 = 11 ; pub const IPV6CTL_ACCEPT_RTADV : u32 = 12 ; pub const IPV6CTL_LOG_INTERVAL : u32 = 14 ; pub const IPV6CTL_HDRNESTLIMIT : u32 = 15 ; pub const IPV6CTL_DAD_COUNT : u32 = 16 ; pub const IPV6CTL_AUTO_FLOWLABEL : u32 = 17 ; pub const IPV6CTL_DEFMCASTHLIM : u32 = 18 ; pub const IPV6CTL_USE_DEPRECATED : u32 = 21 ; pub const IPV6CTL_MAXFRAGS : u32 = 41 ; pub const IPV6CTL_MFORWARDING : u32 = 42 ; pub const IPV6CTL_MULTIPATH : u32 = 43 ; pub const IPV6CTL_MCAST_PMTU : u32 = 44 ; pub const IPV6CTL_NEIGHBORGCTHRESH : u32 = 45 ; pub const IPV6CTL_MAXDYNROUTES : u32 = 48 ; pub const IPV6CTL_DAD_PENDING : u32 = 49 ; pub const IPV6CTL_MTUDISCTIMEOUT : u32 = 50 ; pub const IPV6CTL_IFQUEUE : u32 = 51 ; pub const IPV6CTL_MRTMIF : u32 = 52 ; pub const IPV6CTL_MRTMFC : u32 = 53 ; pub const IPV6CTL_SOIIKEY : u32 = 54 ; pub const IPV6CTL_MAXID : u32 = 55 ; pub const RTF_UP : u32 = 1 ; pub const RTF_GATEWAY : u32 = 2 ; pub const RTF_HOST : u32 = 4 ; pub const RTF_REJECT : u32 = 8 ; pub const RTF_DYNAMIC : u32 = 16 ; pub const RTF_MODIFIED : u32 = 32 ; pub const RTF_DONE : u32 = 64 ; pub const RTF_CLONING : u32 = 256 ; pub const RTF_MULTICAST : u32 = 512 ; pub const RTF_LLINFO : u32 = 1024 ; pub const RTF_STATIC : u32 = 2048 ; pub const RTF_BLACKHOLE : u32 = 4096 ; pub const RTF_PROTO3 : u32 = 8192 ; pub const RTF_PROTO2 : u32 = 16384 ; pub const RTF_ANNOUNCE : u32 = 16384 ; pub const RTF_PROTO1 : u32 = 32768 ; pub const RTF_CLONED : u32 = 65536 ; pub const RTF_CACHED : u32 = 131072 ; pub const RTF_MPATH : u32 = 262144 ; pub const RTF_MPLS : u32 = 1048576 ; pub const RTF_LOCAL : u32 = 2097152 ; pub const RTF_BROADCAST : u32 = 4194304 ; pub const RTF_CONNECTED : u32 = 8388608 ; pub const RTF_BFD : u32 = 16777216 ; pub const RTF_FMASK : u32 = 17890312 ; pub const RTP_NONE : u32 = 0 ; pub const RTP_LOCAL : u32 = 1 ; pub const RTP_CONNECTED : u32 = 4 ; pub const RTP_STATIC : u32 = 8 ; pub const RTP_EIGRP : u32 = 28 ; pub const RTP_OSPF : u32 = 32 ; pub const RTP_ISIS : u32 = 36 ; pub const RTP_RIP : u32 = 40 ; pub const RTP_BGP : u32 = 48 ; pub const RTP_DEFAULT : u32 = 56 ; pub const RTP_PROPOSAL_STATIC : u32 = 57 ; pub const RTP_PROPOSAL_DHCLIENT : u32 = 58 ; pub const RTP_PROPOSAL_SLAAC : u32 = 59 ; pub const RTP_PROPOSAL_UMB : u32 = 60 ; pub const RTP_PROPOSAL_PPP : u32 = 61 ; pub const RTP_PROPOSAL_SOLICIT : u32 = 62 ; pub const RTP_MAX : u32 = 63 ; pub const RTP_ANY : u32 = 64 ; pub const RTP_MASK : u32 = 127 ; pub const RTP_DOWN : u32 = 128 ; pub const RTM_VERSION : u32 = 5 ; pub const RTM_MAXSIZE : u32 = 2048 ; pub const RTM_ADD : u32 = 1 ; pub const RTM_DELETE : u32 = 2 ; pub const RTM_CHANGE : u32 = 3 ; pub const RTM_GET : u32 = 4 ; pub const RTM_LOSING : u32 = 5 ; pub const RTM_REDIRECT : u32 = 6 ; pub const RTM_MISS : u32 = 7 ; pub const RTM_RESOLVE : u32 = 11 ; pub const RTM_NEWADDR : u32 = 12 ; pub const RTM_DELADDR : u32 = 13 ; pub const RTM_IFINFO : u32 = 14 ; pub const RTM_IFANNOUNCE : u32 = 15 ; pub const RTM_DESYNC : u32 = 16 ; pub const RTM_INVALIDATE : u32 = 17 ; pub const RTM_BFD : u32 = 18 ; pub const RTM_PROPOSAL : u32 = 19 ; pub const RTM_CHGADDRATTR : u32 = 20 ; pub const RTM_80211INFO : u32 = 21 ; pub const RTM_SOURCE : u32 = 22 ; pub const RTV_MTU : u32 = 1 ; pub const RTV_HOPCOUNT : u32 = 2 ; pub const RTV_EXPIRE : u32 = 4 ; pub const RTV_RPIPE : u32 = 8 ; pub const RTV_SPIPE : u32 = 16 ; pub const RTV_SSTHRESH : u32 = 32 ; pub const RTV_RTT : u32 = 64 ; pub const RTV_RTTVAR : u32 = 128 ; pub const RTA_DST : u32 = 1 ; pub const RTA_GATEWAY : u32 = 2 ; pub const RTA_NETMASK : u32 = 4 ; pub const RTA_GENMASK : u32 = 8 ; pub const RTA_IFP : u32 = 16 ; pub const RTA_IFA : u32 = 32 ; pub const RTA_AUTHOR : u32 = 64 ; pub const RTA_BRD : u32 = 128 ; pub const RTA_SRC : u32 = 256 ; pub const RTA_SRCMASK : u32 = 512 ; pub const RTA_LABEL : u32 = 1024 ; pub const RTA_BFD : u32 = 2048 ; pub const RTA_DNS : u32 = 4096 ; pub const RTA_STATIC : u32 = 8192 ; pub const RTA_SEARCH : u32 = 16384 ; pub const RTAX_DST : u32 = 0 ; pub const RTAX_GATEWAY : u32 = 1 ; pub const RTAX_NETMASK : u32 = 2 ; pub const RTAX_GENMASK : u32 = 3 ; pub const RTAX_IFP : u32 = 4 ; pub const RTAX_IFA : u32 = 5 ; pub const RTAX_AUTHOR : u32 = 6 ; pub const RTAX_BRD : u32 = 7 ; pub const RTAX_SRC : u32 = 8 ; pub const RTAX_SRCMASK : u32 = 9 ; pub const RTAX_LABEL : u32 = 10 ; pub const RTAX_BFD : u32 = 11 ; pub const RTAX_DNS : u32 = 12 ; pub const RTAX_STATIC : u32 = 13 ; pub const RTAX_SEARCH : u32 = 14 ; pub const RTAX_MAX : u32 = 15 ; pub const ROUTE_MSGFILTER : u32 = 1 ; pub const ROUTE_TABLEFILTER : u32 = 2 ; pub const ROUTE_PRIOFILTER : u32 = 3 ; pub const ROUTE_FLAGFILTER : u32 = 4 ; pub const RTABLE_ANY : u32 = 4294967295 ; pub const RTLABEL_LEN : u32 = 32 ; pub const RTDNS_LEN : u32 = 128 ; pub const RTSTATIC_LEN : u32 = 128 ; pub const RTSEARCH_LEN : u32 = 128 ; pub const IF_NAMESIZE : u32 = 16 ; pub const MCLPOOLS : u32 = 8 ; pub const IFQ_NQUEUES : u32 = 8 ; pub const IFQ_MINPRIO : u32 = 0 ; pub const IFQ_MAXPRIO : u32 = 7 ; pub const IFQ_DEFPRIO : u32 = 3 ; pub const LINK_STATE_UNKNOWN : u32 = 0 ; pub const LINK_STATE_INVALID : u32 = 1 ; pub const LINK_STATE_DOWN : u32 = 2 ; pub const LINK_STATE_KALIVE_DOWN : u32 = 3 ; pub const LINK_STATE_UP : u32 = 4 ; pub const LINK_STATE_HALF_DUPLEX : u32 = 5 ; pub const LINK_STATE_FULL_DUPLEX : u32 = 6 ; pub const IFNAMSIZ : u32 = 16 ; pub const IFDESCRSIZE : u32 = 64 ; pub const IFF_UP : u32 = 1 ; pub const IFF_BROADCAST : u32 = 2 ; pub const IFF_DEBUG : u32 = 4 ; pub const IFF_LOOPBACK : u32 = 8 ; pub const IFF_POINTOPOINT : u32 = 16 ; pub const IFF_STATICARP : u32 = 32 ; pub const IFF_RUNNING : u32 = 64 ; pub const IFF_NOARP : u32 = 128 ; pub const IFF_PROMISC : u32 = 256 ; pub const IFF_ALLMULTI : u32 = 512 ; pub const IFF_OACTIVE : u32 = 1024 ; pub const IFF_SIMPLEX : u32 = 2048 ; pub const IFF_LINK0 : u32 = 4096 ; pub const IFF_LINK1 : u32 = 8192 ; pub const IFF_LINK2 : u32 = 16384 ; pub const IFF_MULTICAST : u32 = 32768 ; pub const IFF_CANTCHANGE : u32 = 36442 ; pub const IFXF_MPSAFE : u32 = 1 ; pub const IFXF_CLONED : u32 = 2 ; pub const IFXF_AUTOCONF6TEMP : u32 = 4 ; pub const IFXF_MPLS : u32 = 8 ; pub const IFXF_WOL : u32 = 16 ; pub const IFXF_AUTOCONF6 : u32 = 32 ; pub const IFXF_INET6_NOSOII : u32 = 64 ; pub const IFXF_AUTOCONF4 : u32 = 128 ; pub const IFXF_MONITOR : u32 = 256 ; pub const IFXF_LRO : u32 = 512 ; pub const IFXF_CANTCHANGE : u32 = 3 ; pub const IFCAP_CSUM_IPv4 : u32 = 1 ; pub const IFCAP_CSUM_TCPv4 : u32 = 2 ; pub const IFCAP_CSUM_UDPv4 : u32 = 4 ; pub const IFCAP_VLAN_MTU : u32 = 16 ; pub const IFCAP_VLAN_HWTAGGING : u32 = 32 ; pub const IFCAP_VLAN_HWOFFLOAD : u32 = 64 ; pub const IFCAP_CSUM_TCPv6 : u32 = 128 ; pub const IFCAP_CSUM_UDPv6 : u32 = 256 ; pub const IFCAP_TSOv4 : u32 = 4096 ; pub const IFCAP_TSOv6 : u32 = 8192 ; pub const IFCAP_LRO : u32 = 16384 ; pub const IFCAP_WOL : u32 = 32768 ; pub const IFCAP_CSUM_MASK : u32 = 391 ; pub const IFQCTL_LEN : u32 = 1 ; pub const IFQCTL_MAXLEN : u32 = 2 ; pub const IFQCTL_DROPS : u32 = 3 ; pub const IFQCTL_CONGESTION : u32 = 4 ; pub const IFQCTL_MAXID : u32 = 5 ; pub const IFAN_ARRIVAL : u32 = 0 ; pub const IFAN_DEPARTURE : u32 = 1 ; pub const IFG_ALL : & [u8 ; 4] = b"all\0" ; pub const IFG_EGRESS : & [u8 ; 7] = b"egress\0" ; pub const IF_HDRPRIO_MIN : u32 = 0 ; pub const IF_HDRPRIO_MAX : u32 = 7 ; pub const IF_HDRPRIO_PACKET : i32 = - 1 ; pub const IF_HDRPRIO_PAYLOAD : i32 = - 2 ; pub const IF_HDRPRIO_OUTER : i32 = - 3 ; pub const IF_PWE3_ETHERNET : u32 = 1 ; pub const IF_PWE3_IP : u32 = 2 ; pub const IFLR_PREFIX : u32 = 32768 ; pub const IFSFF_ADDR_EEPROM : u32 = 160 ; pub const IFSFF_ADDR_DDM : u32 = 162 ; pub const IFSFF_DATA_LEN : u32 = 256 ; pub const ARPHRD_ETHER : u32 = 1 ; pub const ARPHRD_IEEE802 : u32 = 6 ; pub const ARPHRD_FRELAY : u32 = 15 ; pub const ARPHRD_IEEE1394 : u32 = 24 ; pub const ARPOP_REQUEST : u32 = 1 ; pub const ARPOP_REPLY : u32 = 2 ; pub const ARPOP_REVREQUEST : u32 = 3 ; pub const ARPOP_REVREPLY : u32 = 4 ; pub const ARPOP_INVREQUEST : u32 = 8 ; pub const ARPOP_INVREPLY : u32 = 9 ; pub type __int8_t = :: std :: os :: raw :: c_schar ; pub type __uint8_t = :: std :: os :: raw :: c_uchar ; pub type __int16_t = :: std :: os :: raw :: c_short ; pub type __uint16_t = :: std :: os :: raw :: c_ushort ; pub type __int32_t = :: std :: os :: raw :: c_int ; pub type __uint32_t = :: std :: os :: raw :: c_uint ; pub type __int64_t = :: std :: os :: raw :: c_longlong ; pub type __uint64_t = :: std :: os :: raw :: c_ulonglong ; pub type __int_least8_t = __int8_t ; pub type __uint_least8_t = __uint8_t ; pub type __int_least16_t = __int16_t ; pub type __uint_least16_t = __uint16_t ; pub type __int_least32_t = __int32_t ; pub type __uint_least32_t = __uint32_t ; pub type __int_least64_t = __int64_t ; pub type __uint_least64_t = __uint64_t ; pub type __int_fast8_t = __int32_t ; pub type __uint_fast8_t = __uint32_t ; pub type __int_fast16_t = __int32_t ; pub type __uint_fast16_t = __uint32_t ; pub type __int_fast32_t = __int32_t ; pub type __uint_fast32_t = __uint32_t ; pub type __int_fast64_t = __int64_t ; pub type __uint_fast64_t = __uint64_t ; pub type __intptr_t = :: std :: os :: raw :: c_long ; pub type __uintptr_t = :: std :: os :: raw :: c_ulong ; pub type __intmax_t = __int64_t ; pub type __uintmax_t = __uint64_t ; pub type __register_t = :: std :: os :: raw :: c_long ; pub type __vaddr_t = :: std :: os :: raw :: c_ulong ; pub type __paddr_t = :: std :: os :: raw :: c_ulong ; pub type __vsize_t = :: std :: os :: raw :: c_ulong ; pub type __psize_t = :: std :: os :: raw :: c_ulong ; pub type __double_t = f64 ; pub type __float_t = f32 ; pub type __ptrdiff_t = :: std :: os :: raw :: c_long ; pub type __size_t = :: std :: os :: raw :: c_ulong ; pub type __ssize_t = :: std :: os :: raw :: c_long ; pub type __va_list = __builtin_va_list ; pub type __wchar_t = :: std :: os :: raw :: c_int ; pub type __wint_t = :: std :: os :: raw :: c_int ; pub type __rune_t = :: std :: os :: raw :: c_int ; pub type __wctrans_t = * mut :: std :: os :: raw :: c_void ; pub type __wctype_t = * mut :: std :: os :: raw :: c_void ; pub type __blkcnt_t = __int64_t ; pub type __blksize_t = __int32_t ; pub type __clock_t = __int64_t ; pub type __clockid_t = __int32_t ; pub type __cpuid_t = :: std :: os :: raw :: c_ulong ; pub type __dev_t = __int32_t ; pub type __fixpt_t = __uint32_t ; pub type __fsblkcnt_t = __uint64_t ; pub type __fsfilcnt_t = __uint64_t ; pub type __gid_t = __uint32_t ; pub type __id_t = __uint32_t ; pub type __in_addr_t = __uint32_t ; pub type __in_port_t = __uint16_t ; pub type __ino_t = __uint64_t ; pub type __key_t = :: std :: os :: raw :: c_long ; pub type __mode_t = __uint32_t ; pub type __nlink_t = __uint32_t ; pub type __off_t = __int64_t ; pub type __pid_t = __int32_t ; pub type __rlim_t = __uint64_t ; pub type __sa_family_t = __uint8_t ; pub type __segsz_t = __int32_t ; pub type __socklen_t = __uint32_t ; pub type __suseconds_t = :: std :: os :: raw :: c_long ; pub type __time_t = __int64_t ; pub type __timer_t = __int32_t ; pub type __uid_t = __uint32_t ; pub type __useconds_t = __uint32_t ; # [repr (C)] # [derive (Copy , Clone)] pub union __mbstate_t { pub __mbstate8 : [:: std :: os :: raw :: c_char ; 128usize] , pub __mbstateL : __int64_t , } # [allow (clippy :: unnecessary_operation , clippy :: identity_op)] const _ : () = { ["Size of __mbstate_t"] [:: std :: mem :: size_of :: < __mbstate_t > () - 128usize] ; ["Alignment of __mbstate_t"] [:: std :: mem :: align_of :: < __mbstate_t > () - 8usize] ; ["Offset of field: __mbstate_t::__mbstate8"] [:: std :: mem :: offset_of ! (__mbstate_t , __mbstate8) - 0usize] ; ["Offset of field: __mbstate_t::__mbstateL"] [:: std :: mem :: offset_of ! (__mbstate_t , __mbstateL) - 0usize] ; } ; pub type u_char = :: std :: os :: raw :: c_uchar ; pub type u_short = :: std :: os :: raw :: c_ushort ; pub type u_int = :: std :: os :: raw :: c_uint ; pub type u_long = :: std :: os :: raw :: c_ulong ; pub type unchar = :: std :: os :: raw :: c_uchar ; pub type ushort = :: std :: os :: raw :: c_ushort ; pub type uint = :: std :: os :: raw :: c_uint ; pub type ulong = :: std :: os :: raw :: c_ulong ; pub type cpuid_t = __cpuid_t ; pub type register_t = __register_t ; pub type u_int8_t = __uint8_t ; pub type u_int16_t = __uint16_t ; pub type u_int32_t = __uint32_t ; pub type u_int64_t = __uint64_t ; pub type quad_t = __int64_t ; pub type u_quad_t = __uint64_t ; pub type vaddr_t = __vaddr_t ; pub type paddr_t = __paddr_t ; pub type vsize_t = __vsize_t ; pub type psize_t = __psize_t ; pub type blkcnt_t = __blkcnt_t ; pub type blksize_t = __blksize_t ; pub type caddr_t = * mut :: std :: os :: raw :: c_char ; pub type daddr32_t = __int32_t ; pub type daddr_t = __int64_t ; pub type dev_t = __dev_t ; pub type fixpt_t = __fixpt_t ; pub type gid_t = __gid_t ; pub type id_t = __id_t ; pub type ino_t = __ino_t ; pub type key_t = __key_t ; pub type mode_t = __mode_t ; pub type nlink_t = __nlink_t ; pub type rlim_t = __rlim_t ; pub type segsz_t = __segsz_t ; pub type uid_t = __uid_t ; pub type useconds_t = __useconds_t ; pub type suseconds_t = __suseconds_t ; pub type fsblkcnt_t = __fsblkcnt_t ; pub type fsfilcnt_t = __fsfilcnt_t ; pub type clock_t = __clock_t ; pub type clockid_t = __clockid_t ; pub type pid_t = __pid_t ; pub type time_t = __time_t ; pub type timer_t = __timer_t ; pub type off_t = __off_t ; unsafe extern "C" { pub fn lseek (arg1 : :: std :: os :: raw :: c_int , arg2 : off_t , arg3 : :: std :: os :: raw :: c_int) -> off_t ; } unsafe extern "C" { pub fn ftruncate (arg1 : :: std :: os :: raw :: c_int , arg2 : off_t) -> :: std :: os :: raw :: c_int ; } unsafe extern "C" { pub fn truncate (arg1 : * const :: std :: os :: raw :: c_char , arg2 : off_t) -> :: std :: os :: raw :: c_int ; } pub type sig_atomic_t = :: std :: os :: raw :: c_int ; # [repr (C)] # [derive (Debug , Copy , Clone)] pub struct sigcontext { pub sc_rdi : :: std :: os :: raw :: c_long , pub sc_rsi : :: std :: os :: raw :: c_long , pub sc_rdx : :: std :: os :: raw :: c_long , pub sc_rcx : :: std :: os :: raw :: c_long , pub sc_r8 : :: std :: os :: raw :: c_long , pub sc_r9 : :: std :: os :: raw :: c_long , pub sc_r10 : :: std :: os :: raw :: c_long , pub sc_r11 : :: std :: os :: raw :: c_long , pub sc_r12 : :: std :: os :: raw :: c_long , pub sc_r13 : :: std :: os :: raw :: c_long , pub sc_r14 : :: std :: os :: raw :: c_long , pub sc_r15 : :: std :: os :: raw :: c_long , pub sc_rbp : :: std :: os :: raw :: c_long , pub sc_rbx : :: std :: os :: raw :: c_long , pub sc_rax : :: std :: os :: raw :: c_long , pub sc_gs : :: std :: os :: raw :: c_long , pub sc_fs : :: std :: os :: raw :: c_long , pub sc_es : :: std :: os :: raw :: c_long , pub sc_ds : :: std :: os :: raw :: c_long , pub sc_trapno : :: std :: os :: raw :: c_long , pub sc_err : :: std :: os :: raw :: c_long , pub sc_rip : :: std :: os :: raw :: c_long , pub sc_cs : :: std :: os :: raw :: c_long , pub sc_rflags : :: std :: os :: raw :: c_long , pub sc_rsp : :: std :: os :: raw :: c_long , pub sc_ss : :: std :: os :: raw :: c_long , pub sc_fpstate : * mut fxsave64 , pub __sc_unused : :: std :: os :: raw :: c_int , pub sc_mask : :: std :: os :: raw :: c_int , pub sc_cookie : :: std :: os :: raw :: c_long , } # [allow (clippy :: unnecessary_operation , clippy :: identity_op)] const _ : () = { ["Size of sigcontext"] [:: std :: mem :: size_of :: < sigcontext > () - 232usize] ; ["Alignment of sigcontext"] [:: std :: mem :: align_of :: < sigcontext > () - 8usize] ; ["Offset of field: sigcontext::sc_rdi"] [:: std :: mem :: offset_of ! (sigcontext , sc_rdi) - 0usize] ; ["Offset of field: sigcontext::sc_rsi"] [:: std :: mem :: offset_of ! (sigcontext , sc_rsi) - 8usize] ; ["Offset of field: sigcontext::sc_rdx"] [:: std :: mem :: offset_of ! (sigcontext , sc_rdx) - 16usize] ; ["Offset of field: sigcontext::sc_rcx"] [:: std :: mem :: offset_of ! (sigcontext , sc_rcx) - 24usize] ; ["Offset of field: sigcontext::sc_r8"] [:: std :: mem :: offset_of ! (sigcontext , sc_r8) - 32usize] ; ["Offset of field: sigcontext::sc_r9"] [:: std :: mem :: offset_of ! (sigcontext , sc_r9) - 40usize] ; ["Offset of field: sigcontext::sc_r10"] [:: std :: mem :: offset_of ! (sigcontext , sc_r10) - 48usize] ; ["Offset of field: sigcontext::sc_r11"] [:: std :: mem :: offset_of ! (sigcontext , sc_r11) - 56usize] ; ["Offset of field: sigcontext::sc_r12"] [:: std :: mem :: offset_of ! (sigcontext , sc_r12) - 64usize] ; ["Offset of field: sigcontext::sc_r13"] [:: std :: mem :: offset_of ! (sigcontext , sc_r13) - 72usize] ; ["Offset of field: sigcontext::sc_r14"] [:: std :: mem :: offset_of ! (sigcontext , sc_r14) - 80usize] ; ["Offset of field: sigcontext::sc_r15"] [:: std :: mem :: offset_of ! (sigcontext , sc_r15) - 88usize] ; ["Offset of field: sigcontext::sc_rbp"] [:: std :: mem :: offset_of ! (sigcontext , sc_rbp) - 96usize] ; ["Offset of field: sigcontext::sc_rbx"] [:: std :: mem :: offset_of ! (sigcontext , sc_rbx) - 104usize] ; ["Offset of field: sigcontext::sc_rax"] [:: std :: mem :: offset_of ! (sigcontext , sc_rax) - 112usize] ; ["Offset of field: sigcontext::sc_gs"] [:: std :: mem :: offset_of ! (sigcontext , sc_gs) - 120usize] ; ["Offset of field: sigcontext::sc_fs"] [:: std :: mem :: offset_of ! (sigcontext , sc_fs) - 128usize] ; ["Offset of field: sigcontext::sc_es"] [:: std :: mem :: offset_of ! (sigcontext , sc_es) - 136usize] ; ["Offset of field: sigcontext::sc_ds"] [:: std :: mem :: offset_of ! (sigcontext , sc_ds) - 144usize] ; ["Offset of field: sigcontext::sc_trapno"] [:: std :: mem :: offset_of ! (sigcontext , sc_trapno) - 152usize] ; ["Offset of field: sigcontext::sc_err"] [:: std :: mem :: offset_of ! (sigcontext , sc_err) - 160usize] ; ["Offset of field: sigcontext::sc_rip"] [:: std :: mem :: offset_of ! (sigcontext , sc_rip) - 168usize] ; ["Offset of field: sigcontext::sc_cs"] [:: std :: mem :: offset_of ! (sigcontext , sc_cs) - 176usize] ; ["Offset of field: sigcontext::sc_rflags"] [:: std :: mem :: offset_of ! (sigcontext , sc_rflags) - 184usize] ; ["Offset of field: sigcontext::sc_rsp"] [:: std :: mem :: offset_of ! (sigcontext , sc_rsp) - 192usize] ; ["Offset of field: sigcontext::sc_ss"] [:: std :: mem :: offset_of ! (sigcontext , sc_ss) - 200usize] ; ["Offset of field: sigcontext::sc_fpstate"] [:: std :: mem :: offset_of ! (sigcontext , sc_fpstate) - 208usize] ; ["Offset of field: sigcontext::__sc_unused"] [:: std :: mem :: offset_of ! (sigcontext , __sc_unused) - 216usize] ; ["Offset of field: sigcontext::sc_mask"] [:: std :: mem :: offset_of ! (sigcontext , sc_mask) - 220usize] ; ["Offset of field: sigcontext::sc_cookie"] [:: std :: mem :: offset_of ! (sigcontext , sc_cookie) - 224usize] ; } ; pub type sigset_t = :: std :: os :: raw :: c_uint ; # [repr (C)] # [derive (Copy , Clone)] pub union sigval { pub sival_int : :: std :: os :: raw :: c_int , pub sival_ptr : * mut :: std :: os :: raw :: c_void , } # [allow (clippy :: unnecessary_operation , clippy :: identity_op)] const _ : () = { ["Size of sigval"] [:: std :: mem :: size_of :: < sigval > () - 8usize] ; ["Alignment of sigval"] [:: std :: mem :: align_of :: < sigval > () - 8usize] ; ["Offset of field: sigval::sival_int"] [:: std :: mem :: offset_of ! (sigval , sival_int) - 0usize] ; ["Offset of field: sigval::sival_ptr"] [:: std :: mem :: offset_of ! (sigval , sival_ptr) - 0usize] ; } ; # [repr (C)] # [derive (Debug , Copy , Clone)] pub struct timeval { pub tv_sec : time_t , pub tv_usec : suseconds_t , } # [allow (clippy :: unnecessary_operation , clippy :: identity_op)] const _ : () = { ["Size of timeval"] [:: std :: mem :: size_of :: < timeval > () - 16usize] ; ["Alignment of timeval"] [:: std :: mem :: align_of :: < timeval > () - 8usize] ; ["Offset of field: timeval::tv_sec"] [:: std :: mem :: offset_of ! (timeval , tv_sec) - 0usize] ; ["Offset of field: timeval::tv_usec"] [:: std :: mem :: offset_of ! (timeval , tv_usec) - 8usize] ; } ; # [repr (C)] # [derive (Debug , Copy , Clone)] pub struct timespec { pub tv_sec : time_t , pub tv_nsec : :: std :: os :: raw :: c_long , } # [allow (clippy :: unnecessary_operation , clippy :: identity_op)] const _ : () = { ["Size of timespec"] [:: std :: mem :: size_of :: < timespec > () - 16usize] ; ["Alignment of timespec"] [:: std :: mem :: align_of :: < timespec > () - 8usize] ; ["Offset of field: timespec::tv_sec"] [:: std :: mem :: offset_of ! (timespec , tv_sec) - 0usize] ; ["Offset of field: timespec::tv_nsec"] [:: std :: mem :: offset_of ! (timespec , tv_nsec) - 8usize] ; } ; pub type __fd_mask = u32 ; # [repr (C)] # [derive (Debug , Copy , Clone)] pub struct fd_set { pub fds_bits : [__fd_mask ; 32usize] , } # [allow (clippy :: unnecessary_operation , clippy :: identity_op)] const _ : () = { ["Size of fd_set"] [:: std :: mem :: size_of :: < fd_set > () - 128usize] ; ["Alignment of fd_set"] [:: std :: mem :: align_of :: < fd_set > () - 4usize] ; ["Offset of field: fd_set::fds_bits"] [:: std :: mem :: offset_of ! (fd_set , fds_bits) - 0usize] ; } ; unsafe extern "C" { pub fn select (arg1 : :: std :: os :: raw :: c_int , arg2 : * mut fd_set , arg3 : * mut fd_set , arg4 : * mut fd_set , arg5 : * mut timeval) -> :: std :: os :: raw :: c_int ; } unsafe extern "C" { pub fn pselect (arg1 : :: std :: os :: raw :: c_int , arg2 : * mut fd_set , arg3 : * mut fd_set , arg4 : * mut fd_set , arg5 : * const timespec , arg6 : * const sigset_t) -> :: std :: os :: raw :: c_int ; } # [repr (C)] # [derive (Debug , Copy , Clone)] pub struct timezone { pub tz_minuteswest : :: std :: os :: raw :: c_int , pub tz_dsttime : :: std :: os :: raw :: c_int , } # [allow (clippy :: unnecessary_operation , clippy :: identity_op)] const _ : () = { ["Size of timezone"] [:: std :: mem :: size_of :: < timezone > () - 8usize] ; ["Alignment of timezone"] [:: std :: mem :: align_of :: < timezone > () - 4usize] ; ["Offset of field: timezone::tz_minuteswest"] [:: std :: mem :: offset_of ! (timezone , tz_minuteswest) - 0usize] ; ["Offset of field: timezone::tz_dsttime"] [:: std :: mem :: offset_of ! (timezone , tz_dsttime) - 4usize] ; } ; # [repr (C)] # [derive (Debug , Copy , Clone)] pub struct itimerval { pub it_interval : timeval , pub it_value : timeval , } # [allow (clippy :: unnecessary_operation , clippy :: identity_op)] const _ : () = { ["Size of itimerval"] [:: std :: mem :: size_of :: < itimerval > () - 32usize] ; ["Alignment of itimerval"] [:: std :: mem :: align_of :: < itimerval > () - 8usize] ; ["Offset of field: itimerval::it_interval"] [:: std :: mem :: offset_of ! (itimerval , it_interval) - 0usize] ; ["Offset of field: itimerval::it_value"] [:: std :: mem :: offset_of ! (itimerval , it_value) - 16usize] ; } ; # [repr (C)] # [derive (Debug , Copy , Clone)] pub struct clockinfo { pub hz : :: std :: os :: raw :: c_int , pub tick : :: std :: os :: raw :: c_int , pub stathz : :: std :: os :: raw :: c_int , pub profhz : :: std :: os :: raw :: c_int , } # [allow (clippy :: unnecessary_operation , clippy :: identity_op)] const _ : () = { ["Size of clockinfo"] [:: std :: mem :: size_of :: < clockinfo > () - 16usize] ; ["Alignment of clockinfo"] [:: std :: mem :: align_of :: < clockinfo > () - 4usize] ; ["Offset of field: clockinfo::hz"] [:: std :: mem :: offset_of ! (clockinfo , hz) - 0usize] ; ["Offset of field: clockinfo::tick"] [:: std :: mem :: offset_of ! (clockinfo , tick) - 4usize] ; ["Offset of field: clockinfo::stathz"] [:: std :: mem :: offset_of ! (clockinfo , stathz) - 8usize] ; ["Offset of field: clockinfo::profhz"] [:: std :: mem :: offset_of ! (clockinfo , profhz) - 12usize] ; } ; # [repr (C)] # [derive (Debug , Copy , Clone)] pub struct itimerspec { pub it_interval : timespec , pub it_value : timespec , } # [allow (clippy :: unnecessary_operation , clippy :: identity_op)] const _ : () = { ["Size of itimerspec"] [:: std :: mem :: size_of :: < itimerspec > () - 32usize] ; ["Alignment of itimerspec"] [:: std :: mem :: align_of :: < itimerspec > () - 8usize] ; ["Offset of field: itimerspec::it_interval"] [:: std :: mem :: offset_of ! (itimerspec , it_interval) - 0usize] ; ["Offset of field: itimerspec::it_value"] [:: std :: mem :: offset_of ! (itimerspec , it_value) - 16usize] ; } ; pub type locale_t = * mut :: std :: os :: raw :: c_void ; # [repr (C)] # [derive (Debug , Copy , Clone)] pub struct tm { pub tm_sec : :: std :: os :: raw :: c_int , pub tm_min : :: std :: os :: raw :: c_int , pub tm_hour : :: std :: os :: raw :: c_int , pub tm_mday : :: std :: os :: raw :: c_int , pub tm_mon : :: std :: os :: raw :: c_int , pub tm_year : :: std :: os :: raw :: c_int , pub tm_wday : :: std :: os :: raw :: c_int , pub tm_yday : :: std :: os :: raw :: c_int , pub tm_isdst : :: std :: os :: raw :: c_int , pub tm_gmtoff : :: std :: os :: raw :: c_long , pub tm_zone : * mut :: std :: os :: raw :: c_char , } # [allow (clippy :: unnecessary_operation , clippy :: identity_op)] const _ : () = { ["Size of tm"] [:: std :: mem :: size_of :: < tm > () - 56usize] ; ["Alignment of tm"] [:: std :: mem :: align_of :: < tm > () - 8usize] ; ["Offset of field: tm::tm_sec"] [:: std :: mem :: offset_of ! (tm , tm_sec) - 0usize] ; ["Offset of field: tm::tm_min"] [:: std :: mem :: offset_of ! (tm , tm_min) - 4usize] ; ["Offset of field: tm::tm_hour"] [:: std :: mem :: offset_of ! (tm , tm_hour) - 8usize] ; ["Offset of field: tm::tm_mday"] [:: std :: mem :: offset_of ! (tm , tm_mday) - 12usize] ; ["Offset of field: tm::tm_mon"] [:: std :: mem :: offset_of ! (tm , tm_mon) - 16usize] ; ["Offset of field: tm::tm_year"] [:: std :: mem :: offset_of ! (tm , tm_year) - 20usize] ; ["Offset of field: tm::tm_wday"] [:: std :: mem :: offset_of ! (tm , tm_wday) - 24usize] ; ["Offset of field: tm::tm_yday"] [:: std :: mem :: offset_of ! (tm , tm_yday) - 28usize] ; ["Offset of field: tm::tm_isdst"] [:: std :: mem :: offset_of ! (tm , tm_isdst) - 32usize] ; ["Offset of field: tm::tm_gmtoff"] [:: std :: mem :: offset_of ! (tm , tm_gmtoff) - 40usize] ; ["Offset of field: tm::tm_zone"] [:: std :: mem :: offset_of ! (tm , tm_zone) - 48usize] ; } ; unsafe extern "C" { pub fn asctime (arg1 : * const tm) -> * mut :: std :: os :: raw :: c_char ; } unsafe extern "C" { pub fn clock () -> clock_t ; } unsafe extern "C" { pub fn ctime (arg1 : * const time_t) -> * mut :: std :: os :: raw :: c_char ; } unsafe extern "C" { pub fn difftime (arg1 : time_t , arg2 : time_t) -> f64 ; } unsafe extern "C" { pub fn gmtime (arg1 : * const time_t) -> * mut tm ; } unsafe extern "C" { pub fn localtime (arg1 : * const time_t) -> * mut tm ; } unsafe extern "C" { pub fn mktime (arg1 : * mut tm) -> time_t ; } unsafe extern "C" { pub fn strftime (arg1 : * mut :: std :: os :: raw :: c_char , arg2 : usize , arg3 : * const :: std :: os :: raw :: c_char , arg4 : * const tm) -> usize ; } unsafe extern "C" { pub fn time (arg1 : * mut time_t) -> time_t ; } unsafe extern "C" { pub static mut daylight : :: std :: os :: raw :: c_int ; } unsafe extern "C" { pub static mut timezone : :: std :: os :: raw :: c_long ; } unsafe extern "C" { pub fn strptime (arg1 : * const :: std :: os :: raw :: c_char , arg2 : * const :: std :: os :: raw :: c_char , arg3 : * mut tm) -> * mut :: std :: os :: raw :: c_char ; } unsafe extern "C" { pub fn asctime_r (arg1 : * const tm , arg2 : * mut :: std :: os :: raw :: c_char) -> * mut :: std :: os :: raw :: c_char ; } unsafe extern "C" { pub fn ctime_r (arg1 : * const time_t , arg2 : * mut :: std :: os :: raw :: c_char) -> * mut :: std :: os :: raw :: c_char ; } unsafe extern "C" { pub fn gmtime_r (arg1 : * const time_t , arg2 : * mut tm) -> * mut tm ; } unsafe extern "C" { pub fn localtime_r (arg1 : * const time_t , arg2 : * mut tm) -> * mut tm ; } unsafe extern "C" { pub static mut tzname : [* mut :: std :: os :: raw :: c_char ; 2usize] ; } unsafe extern "C" { pub fn tzset () ; } unsafe extern "C" { pub fn clock_getres (arg1 : clockid_t , arg2 : * mut timespec) -> :: std :: os :: raw :: c_int ; } unsafe extern "C" { pub fn clock_gettime (arg1 : clockid_t , arg2 : * mut timespec) -> :: std :: os :: raw :: c_int ; } unsafe extern "C" { pub fn clock_settime (arg1 : clockid_t , arg2 : * const timespec) -> :: std :: os :: raw :: c_int ; } unsafe extern "C" { pub fn nanosleep (arg1 : * const timespec , arg2 : * mut timespec) -> :: std :: os :: raw :: c_int ; } unsafe extern "C" { pub fn clock_getcpuclockid (arg1 : pid_t , arg2 : * mut clockid_t) -> :: std :: os :: raw :: c_int ; } unsafe extern "C" { pub fn strftime_l (arg1 : * mut :: std :: os :: raw :: c_char , arg2 : usize , arg3 : * const :: std :: os :: raw :: c_char , arg4 : * const tm , arg5 : locale_t) -> usize ; } unsafe extern "C" { pub fn timespec_get (_ts : * mut timespec , _base : :: std :: os :: raw :: c_int) -> :: std :: os :: raw :: c_int ; } unsafe extern "C" { pub fn tzsetwall () ; } unsafe extern "C" { pub fn timelocal (arg1 : * mut tm) -> time_t ; } unsafe extern "C" { pub fn timegm (arg1 : * mut tm) -> time_t ; } unsafe extern "C" { pub fn timeoff (arg1 : * mut tm , arg2 : :: std :: os :: raw :: c_long) -> time_t ; } unsafe extern "C" { pub fn adjtime (arg1 : * const timeval , arg2 : * mut timeval) -> :: std :: os :: raw :: c_int ; } unsafe extern "C" { pub fn adjfreq (arg1 : * const i64 , arg2 : * mut i64) -> :: std :: os :: raw :: c_int ; } unsafe extern "C" { pub fn futimes (arg1 : :: std :: os :: raw :: c_int , arg2 : * const timeval) -> :: std :: os :: raw :: c_int ; } unsafe extern "C" { pub fn getitimer (arg1 : :: std :: os :: raw :: c_int , arg2 : * mut itimerval) -> :: std :: os :: raw :: c_int ; } unsafe extern "C" { pub fn gettimeofday (arg1 : * mut timeval , arg2 : * mut timezone) -> :: std :: os :: raw :: c_int ; } unsafe extern "C" { pub fn setitimer (arg1 : :: std :: os :: raw :: c_int , arg2 : * const itimerval , arg3 : * mut itimerval) -> :: std :: os :: raw :: c_int ; } unsafe extern "C" { pub fn settimeofday (arg1 : * const timeval , arg2 : * const timezone) -> :: std :: os :: raw :: c_int ; } unsafe extern "C" { pub fn utimes (arg1 : * const :: std :: os :: raw :: c_char , arg2 : * const timeval) -> :: std :: os :: raw :: c_int ; } # [repr (C)] # [derive (Copy , Clone)] pub struct siginfo_t { pub si_signo : :: std :: os :: raw :: c_int , pub si_code : :: std :: os :: raw :: c_int , pub si_errno : :: std :: os :: raw :: c_int , pub _data : siginfo_t__bindgen_ty_1 , } # [repr (C)] # [derive (Copy , Clone)] pub union siginfo_t__bindgen_ty_1 { pub _pad : [:: std :: os :: raw :: c_int ; 29usize] , pub _proc : siginfo_t__bindgen_ty_1__bindgen_ty_1 , pub _fault : siginfo_t__bindgen_ty_1__bindgen_ty_2 , } # [repr (C)] # [derive (Copy , Clone)] pub struct siginfo_t__bindgen_ty_1__bindgen_ty_1 { pub _pid : pid_t , pub _uid : uid_t , pub _pdata : siginfo_t__bindgen_ty_1__bindgen_ty_1__bindgen_ty_1 , } # [repr (C)] # [derive (Copy , Clone)] pub union siginfo_t__bindgen_ty_1__bindgen_ty_1__bindgen_ty_1 { pub _kill : siginfo_t__bindgen_ty_1__bindgen_ty_1__bindgen_ty_1__bindgen_ty_1 , pub _cld : siginfo_t__bindgen_ty_1__bindgen_ty_1__bindgen_ty_1__bindgen_ty_2 , } # [repr (C)] # [derive (Copy , Clone)] pub struct siginfo_t__bindgen_ty_1__bindgen_ty_1__bindgen_ty_1__bindgen_ty_1 { pub _value : sigval , } # [allow (clippy :: unnecessary_operation , clippy :: identity_op)] const _ : () = { ["Size of siginfo_t__bindgen_ty_1__bindgen_ty_1__bindgen_ty_1__bindgen_ty_1"] [:: std :: mem :: size_of :: < siginfo_t__bindgen_ty_1__bindgen_ty_1__bindgen_ty_1__bindgen_ty_1 > () - 8usize] ; ["Alignment of siginfo_t__bindgen_ty_1__bindgen_ty_1__bindgen_ty_1__bindgen_ty_1"] [:: std :: mem :: align_of :: < siginfo_t__bindgen_ty_1__bindgen_ty_1__bindgen_ty_1__bindgen_ty_1 > () - 8usize] ; ["Offset of field: siginfo_t__bindgen_ty_1__bindgen_ty_1__bindgen_ty_1__bindgen_ty_1::_value"] [:: std :: mem :: offset_of ! (siginfo_t__bindgen_ty_1__bindgen_ty_1__bindgen_ty_1__bindgen_ty_1 , _value) - 0usize] ; } ; # [repr (C)] # [derive (Debug , Copy , Clone)] pub struct siginfo_t__bindgen_ty_1__bindgen_ty_1__bindgen_ty_1__bindgen_ty_2 { pub _utime : clock_t , pub _stime : clock_t , pub _status : :: std :: os :: raw :: c_int , } # [allow (clippy :: unnecessary_operation , clippy :: identity_op)] const _ : () = { ["Size of siginfo_t__bindgen_ty_1__bindgen_ty_1__bindgen_ty_1__bindgen_ty_2"] [:: std :: mem :: size_of :: < siginfo_t__bindgen_ty_1__bindgen_ty_1__bindgen_ty_1__bindgen_ty_2 > () - 24usize] ; ["Alignment of siginfo_t__bindgen_ty_1__bindgen_ty_1__bindgen_ty_1__bindgen_ty_2"] [:: std :: mem :: align_of :: < siginfo_t__bindgen_ty_1__bindgen_ty_1__bindgen_ty_1__bindgen_ty_2 > () - 8usize] ; ["Offset of field: siginfo_t__bindgen_ty_1__bindgen_ty_1__bindgen_ty_1__bindgen_ty_2::_utime"] [:: std :: mem :: offset_of ! (siginfo_t__bindgen_ty_1__bindgen_ty_1__bindgen_ty_1__bindgen_ty_2 , _utime) - 0usize] ; ["Offset of field: siginfo_t__bindgen_ty_1__bindgen_ty_1__bindgen_ty_1__bindgen_ty_2::_stime"] [:: std :: mem :: offset_of ! (siginfo_t__bindgen_ty_1__bindgen_ty_1__bindgen_ty_1__bindgen_ty_2 , _stime) - 8usize] ; ["Offset of field: siginfo_t__bindgen_ty_1__bindgen_ty_1__bindgen_ty_1__bindgen_ty_2::_status"] [:: std :: mem :: offset_of ! (siginfo_t__bindgen_ty_1__bindgen_ty_1__bindgen_ty_1__bindgen_ty_2 , _status) - 16usize] ; } ; # [allow (clippy :: unnecessary_operation , clippy :: identity_op)] const _ : () = { ["Size of siginfo_t__bindgen_ty_1__bindgen_ty_1__bindgen_ty_1"] [:: std :: mem :: size_of :: < siginfo_t__bindgen_ty_1__bindgen_ty_1__bindgen_ty_1 > () - 24usize] ; ["Alignment of siginfo_t__bindgen_ty_1__bindgen_ty_1__bindgen_ty_1"] [:: std :: mem :: align_of :: < siginfo_t__bindgen_ty_1__bindgen_ty_1__bindgen_ty_1 > () - 8usize] ; ["Offset of field: siginfo_t__bindgen_ty_1__bindgen_ty_1__bindgen_ty_1::_kill"] [:: std :: mem :: offset_of ! (siginfo_t__bindgen_ty_1__bindgen_ty_1__bindgen_ty_1 , _kill) - 0usize] ; ["Offset of field: siginfo_t__bindgen_ty_1__bindgen_ty_1__bindgen_ty_1::_cld"] [:: std :: mem :: offset_of ! (siginfo_t__bindgen_ty_1__bindgen_ty_1__bindgen_ty_1 , _cld) - 0usize] ; } ; # [allow (clippy :: unnecessary_operation , clippy :: identity_op)] const _ : () = { ["Size of siginfo_t__bindgen_ty_1__bindgen_ty_1"] [:: std :: mem :: size_of :: < siginfo_t__bindgen_ty_1__bindgen_ty_1 > () - 32usize] ; ["Alignment of siginfo_t__bindgen_ty_1__bindgen_ty_1"] [:: std :: mem :: align_of :: < siginfo_t__bindgen_ty_1__bindgen_ty_1 > () - 8usize] ; ["Offset of field: siginfo_t__bindgen_ty_1__bindgen_ty_1::_pid"] [:: std :: mem :: offset_of ! (siginfo_t__bindgen_ty_1__bindgen_ty_1 , _pid) - 0usize] ; ["Offset of field: siginfo_t__bindgen_ty_1__bindgen_ty_1::_uid"] [:: std :: mem :: offset_of ! (siginfo_t__bindgen_ty_1__bindgen_ty_1 , _uid) - 4usize] ; ["Offset of field: siginfo_t__bindgen_ty_1__bindgen_ty_1::_pdata"] [:: std :: mem :: offset_of ! (siginfo_t__bindgen_ty_1__bindgen_ty_1 , _pdata) - 8usize] ; } ; # [repr (C)] # [derive (Debug , Copy , Clone)] pub struct siginfo_t__bindgen_ty_1__bindgen_ty_2 { pub _addr : * mut :: std :: os :: raw :: c_void , pub _trapno : :: std :: os :: raw :: c_int , } # [allow (clippy :: unnecessary_operation , clippy :: identity_op)] const _ : () = { ["Size of siginfo_t__bindgen_ty_1__bindgen_ty_2"] [:: std :: mem :: size_of :: < siginfo_t__bindgen_ty_1__bindgen_ty_2 > () - 16usize] ; ["Alignment of siginfo_t__bindgen_ty_1__bindgen_ty_2"] [:: std :: mem :: align_of :: < siginfo_t__bindgen_ty_1__bindgen_ty_2 > () - 8usize] ; ["Offset of field: siginfo_t__bindgen_ty_1__bindgen_ty_2::_addr"] [:: std :: mem :: offset_of ! (siginfo_t__bindgen_ty_1__bindgen_ty_2 , _addr) - 0usize] ; ["Offset of field: siginfo_t__bindgen_ty_1__bindgen_ty_2::_trapno"] [:: std :: mem :: offset_of ! (siginfo_t__bindgen_ty_1__bindgen_ty_2 , _trapno) - 8usize] ; } ; # [allow (clippy :: unnecessary_operation , clippy :: identity_op)] const _ : () = { ["Size of siginfo_t__bindgen_ty_1"] [:: std :: mem :: size_of :: < siginfo_t__bindgen_ty_1 > () - 120usize] ; ["Alignment of siginfo_t__bindgen_ty_1"] [:: std :: mem :: align_of :: < siginfo_t__bindgen_ty_1 > () - 8usize] ; ["Offset of field: siginfo_t__bindgen_ty_1::_pad"] [:: std :: mem :: offset_of ! (siginfo_t__bindgen_ty_1 , _pad) - 0usize] ; ["Offset of field: siginfo_t__bindgen_ty_1::_proc"] [:: std :: mem :: offset_of ! (siginfo_t__bindgen_ty_1 , _proc) - 0usize] ; ["Offset of field: siginfo_t__bindgen_ty_1::_fault"] [:: std :: mem :: offset_of ! (siginfo_t__bindgen_ty_1 , _fault) - 0usize] ; } ; # [allow (clippy :: unnecessary_operation , clippy :: identity_op)] const _ : () = { ["Size of siginfo_t"] [:: std :: mem :: size_of :: < siginfo_t > () - 136usize] ; ["Alignment of siginfo_t"] [:: std :: mem :: align_of :: < siginfo_t > () - 8usize] ; ["Offset of field: siginfo_t::si_signo"] [:: std :: mem :: offset_of ! (siginfo_t , si_signo) - 0usize] ; ["Offset of field: siginfo_t::si_code"] [:: std :: mem :: offset_of ! (siginfo_t , si_code) - 4usize] ; ["Offset of field: siginfo_t::si_errno"] [:: std :: mem :: offset_of ! (siginfo_t , si_errno) - 8usize] ; ["Offset of field: siginfo_t::_data"] [:: std :: mem :: offset_of ! (siginfo_t , _data) - 16usize] ; } ; # [repr (C)] # [derive (Copy , Clone)] pub struct sigaction { pub __sigaction_u : sigaction__bindgen_ty_1 , pub sa_mask : sigset_t , pub sa_flags : :: std :: os :: raw :: c_int , } # [repr (C)] # [derive (Copy , Clone)] pub union sigaction__bindgen_ty_1 { pub __sa_handler : :: std :: option :: Option < unsafe extern "C" fn (arg1 : :: std :: os :: raw :: c_int) > , pub __sa_sigaction : :: std :: option :: Option < unsafe extern "C" fn (arg1 : :: std :: os :: raw :: c_int , arg2 : * mut siginfo_t , arg3 : * mut :: std :: os :: raw :: c_void) > , } # [allow (clippy :: unnecessary_operation , clippy :: identity_op)] const _ : () = { ["Size of sigaction__bindgen_ty_1"] [:: std :: mem :: size_of :: < sigaction__bindgen_ty_1 > () - 8usize] ; ["Alignment of sigaction__bindgen_ty_1"] [:: std :: mem :: align_of :: < sigaction__bindgen_ty_1 > () - 8usize] ; ["Offset of field: sigaction__bindgen_ty_1::__sa_handler"] [:: std :: mem :: offset_of ! (sigaction__bindgen_ty_1 , __sa_handler) - 0usize] ; ["Offset of field: sigaction__bindgen_ty_1::__sa_sigaction"] [:: std :: mem :: offset_of ! (sigaction__bindgen_ty_1 , __sa_sigaction) - 0usize] ; } ; # [allow (clippy :: unnecessary_operation , clippy :: identity_op)] const _ : () = { ["Size of sigaction"] [:: std :: mem :: size_of :: < sigaction > () - 16usize] ; ["Alignment of sigaction"] [:: std :: mem :: align_of :: < sigaction > () - 8usize] ; ["Offset of field: sigaction::__sigaction_u"] [:: std :: mem :: offset_of ! (sigaction , __sigaction_u) - 0usize] ; ["Offset of field: sigaction::sa_mask"] [:: std :: mem :: offset_of ! (sigaction , sa_mask) - 8usize] ; ["Offset of field: sigaction::sa_flags"] [:: std :: mem :: offset_of ! (sigaction , sa_flags) - 12usize] ; } ; pub type sig_t = :: std :: option :: Option < unsafe extern "C" fn (arg1 : :: std :: os :: raw :: c_int) > ; # [repr (C)] # [derive (Debug , Copy , Clone)] pub struct sigvec { pub sv_handler : :: std :: option :: Option < unsafe extern "C" fn (arg1 : :: std :: os :: raw :: c_int) > , pub sv_mask : :: std :: os :: raw :: c_int , pub sv_flags : :: std :: os :: raw :: c_int , } # [allow (clippy :: unnecessary_operation , clippy :: identity_op)] const _ : () = { ["Size of sigvec"] [:: std :: mem :: size_of :: < sigvec > () - 16usize] ; ["Alignment of sigvec"] [:: std :: mem :: align_of :: < sigvec > () - 8usize] ; ["Offset of field: sigvec::sv_handler"] [:: std :: mem :: offset_of ! (sigvec , sv_handler) - 0usize] ; ["Offset of field: sigvec::sv_mask"] [:: std :: mem :: offset_of ! (sigvec , sv_mask) - 8usize] ; ["Offset of field: sigvec::sv_flags"] [:: std :: mem :: offset_of ! (sigvec , sv_flags) - 12usize] ; } ; # [repr (C)] # [derive (Debug , Copy , Clone)] pub struct sigaltstack { pub ss_sp : * mut :: std :: os :: raw :: c_void , pub ss_size : usize , pub ss_flags : :: std :: os :: raw :: c_int , } # [allow (clippy :: unnecessary_operation , clippy :: identity_op)] const _ : () = { ["Size of sigaltstack"] [:: std :: mem :: size_of :: < sigaltstack > () - 24usize] ; ["Alignment of sigaltstack"] [:: std :: mem :: align_of :: < sigaltstack > () - 8usize] ; ["Offset of field: sigaltstack::ss_sp"] [:: std :: mem :: offset_of ! (sigaltstack , ss_sp) - 0usize] ; ["Offset of field: sigaltstack::ss_size"] [:: std :: mem :: offset_of ! (sigaltstack , ss_size) - 8usize] ; ["Offset of field: sigaltstack::ss_flags"] [:: std :: mem :: offset_of ! (sigaltstack , ss_flags) - 16usize] ; } ; pub type stack_t = sigaltstack ; pub type ucontext_t = sigcontext ; unsafe extern "C" { pub fn signal (arg1 : :: std :: os :: raw :: c_int , arg2 : :: std :: option :: Option < unsafe extern "C" fn (arg1 : :: std :: os :: raw :: c_int) >) -> :: std :: option :: Option < unsafe extern "C" fn (arg1 : :: std :: os :: raw :: c_int , arg2 : :: std :: option :: Option < unsafe extern "C" fn (arg1 : :: std :: os :: raw :: c_int) >) > ; } # [repr (C)] # [derive (Debug , Copy , Clone)] pub struct uvmexp { pub pagesize : :: std :: os :: raw :: c_int , pub pagemask : :: std :: os :: raw :: c_int , pub pageshift : :: std :: os :: raw :: c_int , pub npages : :: std :: os :: raw :: c_int , pub free : :: std :: os :: raw :: c_int , pub active : :: std :: os :: raw :: c_int , pub inactive : :: std :: os :: raw :: c_int , pub paging : :: std :: os :: raw :: c_int , pub wired : :: std :: os :: raw :: c_int , pub zeropages : :: std :: os :: raw :: c_int , pub reserve_pagedaemon : :: std :: os :: raw :: c_int , pub reserve_kernel : :: std :: os :: raw :: c_int , pub percpucaches : :: std :: os :: raw :: c_int , pub vnodepages : :: std :: os :: raw :: c_int , pub vtextpages : :: std :: os :: raw :: c_int , pub freemin : :: std :: os :: raw :: c_int , pub freetarg : :: std :: os :: raw :: c_int , pub inactarg : :: std :: os :: raw :: c_int , pub wiredmax : :: std :: os :: raw :: c_int , pub anonmin : :: std :: os :: raw :: c_int , pub vtextmin : :: std :: os :: raw :: c_int , pub vnodemin : :: std :: os :: raw :: c_int , pub anonminpct : :: std :: os :: raw :: c_int , pub vtextminpct : :: std :: os :: raw :: c_int , pub vnodeminpct : :: std :: os :: raw :: c_int , pub nswapdev : :: std :: os :: raw :: c_int , pub swpages : :: std :: os :: raw :: c_int , pub swpginuse : :: std :: os :: raw :: c_int , pub swpgonly : :: std :: os :: raw :: c_int , pub nswget : :: std :: os :: raw :: c_int , pub nanon : :: std :: os :: raw :: c_int , pub unused05 : :: std :: os :: raw :: c_int , pub unused06 : :: std :: os :: raw :: c_int , pub faults : :: std :: os :: raw :: c_int , pub traps : :: std :: os :: raw :: c_int , pub intrs : :: std :: os :: raw :: c_int , pub swtch : :: std :: os :: raw :: c_int , pub softs : :: std :: os :: raw :: c_int , pub syscalls : :: std :: os :: raw :: c_int , pub pageins : :: std :: os :: raw :: c_int , pub pcphit : :: std :: os :: raw :: c_int , pub pcpmiss : :: std :: os :: raw :: c_int , pub pgswapin : :: std :: os :: raw :: c_int , pub pgswapout : :: std :: os :: raw :: c_int , pub forks : :: std :: os :: raw :: c_int , pub forks_ppwait : :: std :: os :: raw :: c_int , pub forks_sharevm : :: std :: os :: raw :: c_int , pub pga_zerohit : :: std :: os :: raw :: c_int , pub pga_zeromiss : :: std :: os :: raw :: c_int , pub unused09 : :: std :: os :: raw :: c_int , pub fltnoram : :: std :: os :: raw :: c_int , pub fltnoanon : :: std :: os :: raw :: c_int , pub fltnoamap : :: std :: os :: raw :: c_int , pub fltpgwait : :: std :: os :: raw :: c_int , pub fltpgrele : :: std :: os :: raw :: c_int , pub fltrelck : :: std :: os :: raw :: c_int , pub fltnorelck : :: std :: os :: raw :: c_int , pub fltanget : :: std :: os :: raw :: c_int , pub fltanretry : :: std :: os :: raw :: c_int , pub fltamcopy : :: std :: os :: raw :: c_int , pub fltnamap : :: std :: os :: raw :: c_int , pub fltnomap : :: std :: os :: raw :: c_int , pub fltlget : :: std :: os :: raw :: c_int , pub fltget : :: std :: os :: raw :: c_int , pub flt_anon : :: std :: os :: raw :: c_int , pub flt_acow : :: std :: os :: raw :: c_int , pub flt_obj : :: std :: os :: raw :: c_int , pub flt_prcopy : :: std :: os :: raw :: c_int , pub flt_przero : :: std :: os :: raw :: c_int , pub fltup : :: std :: os :: raw :: c_int , pub fltnoup : :: std :: os :: raw :: c_int , pub pdwoke : :: std :: os :: raw :: c_int , pub pdrevs : :: std :: os :: raw :: c_int , pub pdswout : :: std :: os :: raw :: c_int , pub pdfreed : :: std :: os :: raw :: c_int , pub pdscans : :: std :: os :: raw :: c_int , pub pdanscan : :: std :: os :: raw :: c_int , pub pdobscan : :: std :: os :: raw :: c_int , pub pdreact : :: std :: os :: raw :: c_int , pub pdbusy : :: std :: os :: raw :: c_int , pub pdpageouts : :: std :: os :: raw :: c_int , pub pdpending : :: std :: os :: raw :: c_int , pub pddeact : :: std :: os :: raw :: c_int , pub unused13 : :: std :: os :: raw :: c_int , pub fpswtch : :: std :: os :: raw :: c_int , pub kmapent : :: std :: os :: raw :: c_int , } # [allow (clippy :: unnecessary_operation , clippy :: identity_op)] const _ : () = { ["Size of uvmexp"] [:: std :: mem :: size_of :: < uvmexp > () - 344usize] ; ["Alignment of uvmexp"] [:: std :: mem :: align_of :: < uvmexp > () - 4usize] ; ["Offset of field: uvmexp::pagesize"] [:: std :: mem :: offset_of ! (uvmexp , pagesize) - 0usize] ; ["Offset of field: uvmexp::pagemask"] [:: std :: mem :: offset_of ! (uvmexp , pagemask) - 4usize] ; ["Offset of field: uvmexp::pageshift"] [:: std :: mem :: offset_of ! (uvmexp , pageshift) - 8usize] ; ["Offset of field: uvmexp::npages"] [:: std :: mem :: offset_of ! (uvmexp , npages) - 12usize] ; ["Offset of field: uvmexp::free"] [:: std :: mem :: offset_of ! (uvmexp , free) - 16usize] ; ["Offset of field: uvmexp::active"] [:: std :: mem :: offset_of ! (uvmexp , active) - 20usize] ; ["Offset of field: uvmexp::inactive"] [:: std :: mem :: offset_of ! (uvmexp , inactive) - 24usize] ; ["Offset of field: uvmexp::paging"] [:: std :: mem :: offset_of ! (uvmexp , paging) - 28usize] ; ["Offset of field: uvmexp::wired"] [:: std :: mem :: offset_of ! (uvmexp , wired) - 32usize] ; ["Offset of field: uvmexp::zeropages"] [:: std :: mem :: offset_of ! (uvmexp , zeropages) - 36usize] ; ["Offset of field: uvmexp::reserve_pagedaemon"] [:: std :: mem :: offset_of ! (uvmexp , reserve_pagedaemon) - 40usize] ; ["Offset of field: uvmexp::reserve_kernel"] [:: std :: mem :: offset_of ! (uvmexp , reserve_kernel) - 44usize] ; ["Offset of field: uvmexp::percpucaches"] [:: std :: mem :: offset_of ! (uvmexp , percpucaches) - 48usize] ; ["Offset of field: uvmexp::vnodepages"] [:: std :: mem :: offset_of ! (uvmexp , vnodepages) - 52usize] ; ["Offset of field: uvmexp::vtextpages"] [:: std :: mem :: offset_of ! (uvmexp , vtextpages) - 56usize] ; ["Offset of field: uvmexp::freemin"] [:: std :: mem :: offset_of ! (uvmexp , freemin) - 60usize] ; ["Offset of field: uvmexp::freetarg"] [:: std :: mem :: offset_of ! (uvmexp , freetarg) - 64usize] ; ["Offset of field: uvmexp::inactarg"] [:: std :: mem :: offset_of ! (uvmexp , inactarg) - 68usize] ; ["Offset of field: uvmexp::wiredmax"] [:: std :: mem :: offset_of ! (uvmexp , wiredmax) - 72usize] ; ["Offset of field: uvmexp::anonmin"] [:: std :: mem :: offset_of ! (uvmexp , anonmin) - 76usize] ; ["Offset of field: uvmexp::vtextmin"] [:: std :: mem :: offset_of ! (uvmexp , vtextmin) - 80usize] ; ["Offset of field: uvmexp::vnodemin"] [:: std :: mem :: offset_of ! (uvmexp , vnodemin) - 84usize] ; ["Offset of field: uvmexp::anonminpct"] [:: std :: mem :: offset_of ! (uvmexp , anonminpct) - 88usize] ; ["Offset of field: uvmexp::vtextminpct"] [:: std :: mem :: offset_of ! (uvmexp , vtextminpct) - 92usize] ; ["Offset of field: uvmexp::vnodeminpct"] [:: std :: mem :: offset_of ! (uvmexp , vnodeminpct) - 96usize] ; ["Offset of field: uvmexp::nswapdev"] [:: std :: mem :: offset_of ! (uvmexp , nswapdev) - 100usize] ; ["Offset of field: uvmexp::swpages"] [:: std :: mem :: offset_of ! (uvmexp , swpages) - 104usize] ; ["Offset of field: uvmexp::swpginuse"] [:: std :: mem :: offset_of ! (uvmexp , swpginuse) - 108usize] ; ["Offset of field: uvmexp::swpgonly"] [:: std :: mem :: offset_of ! (uvmexp , swpgonly) - 112usize] ; ["Offset of field: uvmexp::nswget"] [:: std :: mem :: offset_of ! (uvmexp , nswget) - 116usize] ; ["Offset of field: uvmexp::nanon"] [:: std :: mem :: offset_of ! (uvmexp , nanon) - 120usize] ; ["Offset of field: uvmexp::unused05"] [:: std :: mem :: offset_of ! (uvmexp , unused05) - 124usize] ; ["Offset of field: uvmexp::unused06"] [:: std :: mem :: offset_of ! (uvmexp , unused06) - 128usize] ; ["Offset of field: uvmexp::faults"] [:: std :: mem :: offset_of ! (uvmexp , faults) - 132usize] ; ["Offset of field: uvmexp::traps"] [:: std :: mem :: offset_of ! (uvmexp , traps) - 136usize] ; ["Offset of field: uvmexp::intrs"] [:: std :: mem :: offset_of ! (uvmexp , intrs) - 140usize] ; ["Offset of field: uvmexp::swtch"] [:: std :: mem :: offset_of ! (uvmexp , swtch) - 144usize] ; ["Offset of field: uvmexp::softs"] [:: std :: mem :: offset_of ! (uvmexp , softs) - 148usize] ; ["Offset of field: uvmexp::syscalls"] [:: std :: mem :: offset_of ! (uvmexp , syscalls) - 152usize] ; ["Offset of field: uvmexp::pageins"] [:: std :: mem :: offset_of ! (uvmexp , pageins) - 156usize] ; ["Offset of field: uvmexp::pcphit"] [:: std :: mem :: offset_of ! (uvmexp , pcphit) - 160usize] ; ["Offset of field: uvmexp::pcpmiss"] [:: std :: mem :: offset_of ! (uvmexp , pcpmiss) - 164usize] ; ["Offset of field: uvmexp::pgswapin"] [:: std :: mem :: offset_of ! (uvmexp , pgswapin) - 168usize] ; ["Offset of field: uvmexp::pgswapout"] [:: std :: mem :: offset_of ! (uvmexp , pgswapout) - 172usize] ; ["Offset of field: uvmexp::forks"] [:: std :: mem :: offset_of ! (uvmexp , forks) - 176usize] ; ["Offset of field: uvmexp::forks_ppwait"] [:: std :: mem :: offset_of ! (uvmexp , forks_ppwait) - 180usize] ; ["Offset of field: uvmexp::forks_sharevm"] [:: std :: mem :: offset_of ! (uvmexp , forks_sharevm) - 184usize] ; ["Offset of field: uvmexp::pga_zerohit"] [:: std :: mem :: offset_of ! (uvmexp , pga_zerohit) - 188usize] ; ["Offset of field: uvmexp::pga_zeromiss"] [:: std :: mem :: offset_of ! (uvmexp , pga_zeromiss) - 192usize] ; ["Offset of field: uvmexp::unused09"] [:: std :: mem :: offset_of ! (uvmexp , unused09) - 196usize] ; ["Offset of field: uvmexp::fltnoram"] [:: std :: mem :: offset_of ! (uvmexp , fltnoram) - 200usize] ; ["Offset of field: uvmexp::fltnoanon"] [:: std :: mem :: offset_of ! (uvmexp , fltnoanon) - 204usize] ; ["Offset of field: uvmexp::fltnoamap"] [:: std :: mem :: offset_of ! (uvmexp , fltnoamap) - 208usize] ; ["Offset of field: uvmexp::fltpgwait"] [:: std :: mem :: offset_of ! (uvmexp , fltpgwait) - 212usize] ; ["Offset of field: uvmexp::fltpgrele"] [:: std :: mem :: offset_of ! (uvmexp , fltpgrele) - 216usize] ; ["Offset of field: uvmexp::fltrelck"] [:: std :: mem :: offset_of ! (uvmexp , fltrelck) - 220usize] ; ["Offset of field: uvmexp::fltnorelck"] [:: std :: mem :: offset_of ! (uvmexp , fltnorelck) - 224usize] ; ["Offset of field: uvmexp::fltanget"] [:: std :: mem :: offset_of ! (uvmexp , fltanget) - 228usize] ; ["Offset of field: uvmexp::fltanretry"] [:: std :: mem :: offset_of ! (uvmexp , fltanretry) - 232usize] ; ["Offset of field: uvmexp::fltamcopy"] [:: std :: mem :: offset_of ! (uvmexp , fltamcopy) - 236usize] ; ["Offset of field: uvmexp::fltnamap"] [:: std :: mem :: offset_of ! (uvmexp , fltnamap) - 240usize] ; ["Offset of field: uvmexp::fltnomap"] [:: std :: mem :: offset_of ! (uvmexp , fltnomap) - 244usize] ; ["Offset of field: uvmexp::fltlget"] [:: std :: mem :: offset_of ! (uvmexp , fltlget) - 248usize] ; ["Offset of field: uvmexp::fltget"] [:: std :: mem :: offset_of ! (uvmexp , fltget) - 252usize] ; ["Offset of field: uvmexp::flt_anon"] [:: std :: mem :: offset_of ! (uvmexp , flt_anon) - 256usize] ; ["Offset of field: uvmexp::flt_acow"] [:: std :: mem :: offset_of ! (uvmexp , flt_acow) - 260usize] ; ["Offset of field: uvmexp::flt_obj"] [:: std :: mem :: offset_of ! (uvmexp , flt_obj) - 264usize] ; ["Offset of field: uvmexp::flt_prcopy"] [:: std :: mem :: offset_of ! (uvmexp , flt_prcopy) - 268usize] ; ["Offset of field: uvmexp::flt_przero"] [:: std :: mem :: offset_of ! (uvmexp , flt_przero) - 272usize] ; ["Offset of field: uvmexp::fltup"] [:: std :: mem :: offset_of ! (uvmexp , fltup) - 276usize] ; ["Offset of field: uvmexp::fltnoup"] [:: std :: mem :: offset_of ! (uvmexp , fltnoup) - 280usize] ; ["Offset of field: uvmexp::pdwoke"] [:: std :: mem :: offset_of ! (uvmexp , pdwoke) - 284usize] ; ["Offset of field: uvmexp::pdrevs"] [:: std :: mem :: offset_of ! (uvmexp , pdrevs) - 288usize] ; ["Offset of field: uvmexp::pdswout"] [:: std :: mem :: offset_of ! (uvmexp , pdswout) - 292usize] ; ["Offset of field: uvmexp::pdfreed"] [:: std :: mem :: offset_of ! (uvmexp , pdfreed) - 296usize] ; ["Offset of field: uvmexp::pdscans"] [:: std :: mem :: offset_of ! (uvmexp , pdscans) - 300usize] ; ["Offset of field: uvmexp::pdanscan"] [:: std :: mem :: offset_of ! (uvmexp , pdanscan) - 304usize] ; ["Offset of field: uvmexp::pdobscan"] [:: std :: mem :: offset_of ! (uvmexp , pdobscan) - 308usize] ; ["Offset of field: uvmexp::pdreact"] [:: std :: mem :: offset_of ! (uvmexp , pdreact) - 312usize] ; ["Offset of field: uvmexp::pdbusy"] [:: std :: mem :: offset_of ! (uvmexp , pdbusy) - 316usize] ; ["Offset of field: uvmexp::pdpageouts"] [:: std :: mem :: offset_of ! (uvmexp , pdpageouts) - 320usize] ; ["Offset of field: uvmexp::pdpending"] [:: std :: mem :: offset_of ! (uvmexp , pdpending) - 324usize] ; ["Offset of field: uvmexp::pddeact"] [:: std :: mem :: offset_of ! (uvmexp , pddeact) - 328usize] ; ["Offset of field: uvmexp::unused13"] [:: std :: mem :: offset_of ! (uvmexp , unused13) - 332usize] ; ["Offset of field: uvmexp::fpswtch"] [:: std :: mem :: offset_of ! (uvmexp , fpswtch) - 336usize] ; ["Offset of field: uvmexp::kmapent"] [:: std :: mem :: offset_of ! (uvmexp , kmapent) - 340usize] ; } ; # [repr (C)] # [derive (Debug , Copy , Clone)] pub struct _ps_strings { pub val : * mut :: std :: os :: raw :: c_void , } # [allow (clippy :: unnecessary_operation , clippy :: identity_op)] const _ : () = { ["Size of _ps_strings"] [:: std :: mem :: size_of :: < _ps_strings > () - 8usize] ; ["Alignment of _ps_strings"] [:: std :: mem :: align_of :: < _ps_strings > () - 8usize] ; ["Offset of field: _ps_strings::val"] [:: std :: mem :: offset_of ! (_ps_strings , val) - 0usize] ; } ; # [repr (C)] # [derive (Debug , Copy , Clone)] pub struct ctlname { pub ctl_name : * mut :: std :: os :: raw :: c_char , pub ctl_type : :: std :: os :: raw :: c_int , } # [allow (clippy :: unnecessary_operation , clippy :: identity_op)] const _ : () = { ["Size of ctlname"] [:: std :: mem :: size_of :: < ctlname > () - 16usize] ; ["Alignment of ctlname"] [:: std :: mem :: align_of :: < ctlname > () - 8usize] ; ["Offset of field: ctlname::ctl_name"] [:: std :: mem :: offset_of ! (ctlname , ctl_name) - 0usize] ; ["Offset of field: ctlname::ctl_type"] [:: std :: mem :: offset_of ! (ctlname , ctl_type) - 8usize] ; } ; # [repr (C)] # [derive (Debug , Copy , Clone)] pub struct kinfo_proc { pub p_forw : u_int64_t , pub p_back : u_int64_t , pub p_paddr : u_int64_t , pub p_addr : u_int64_t , pub p_fd : u_int64_t , pub p_stats : u_int64_t , pub p_limit : u_int64_t , pub p_vmspace : u_int64_t , pub p_sigacts : u_int64_t , pub p_sess : u_int64_t , pub p_tsess : u_int64_t , pub p_ru : u_int64_t , pub p_eflag : i32 , pub p_exitsig : i32 , pub p_flag : i32 , pub p_pid : i32 , pub p_ppid : i32 , pub p_sid : i32 , pub p__pgid : i32 , pub p_tpgid : i32 , pub p_uid : u_int32_t , pub p_ruid : u_int32_t , pub p_gid : u_int32_t , pub p_rgid : u_int32_t , pub p_groups : [u_int32_t ; 16usize] , pub p_ngroups : i16 , pub p_jobc : i16 , pub p_tdev : u_int32_t , pub p_estcpu : u_int32_t , pub p_rtime_sec : u_int32_t , pub p_rtime_usec : u_int32_t , pub p_cpticks : i32 , pub p_pctcpu : u_int32_t , pub p_swtime : u_int32_t , pub p_slptime : u_int32_t , pub p_schedflags : i32 , pub p_uticks : u_int64_t , pub p_sticks : u_int64_t , pub p_iticks : u_int64_t , pub p_tracep : u_int64_t , pub p_traceflag : i32 , pub p_holdcnt : i32 , pub p_siglist : i32 , pub p_sigmask : u_int32_t , pub p_sigignore : u_int32_t , pub p_sigcatch : u_int32_t , pub p_stat : i8 , pub p_priority : u_int8_t , pub p_usrpri : u_int8_t , pub p_nice : u_int8_t , pub p_xstat : u_int16_t , pub p_spare : u_int16_t , pub p_comm : [:: std :: os :: raw :: c_char ; 24usize] , pub p_wmesg : [:: std :: os :: raw :: c_char ; 8usize] , pub p_wchan : u_int64_t , pub p_login : [:: std :: os :: raw :: c_char ; 32usize] , pub p_vm_rssize : i32 , pub p_vm_tsize : i32 , pub p_vm_dsize : i32 , pub p_vm_ssize : i32 , pub p_uvalid : i64 , pub p_ustart_sec : u_int64_t , pub p_ustart_usec : u_int32_t , pub p_uutime_sec : u_int32_t , pub p_uutime_usec : u_int32_t , pub p_ustime_sec : u_int32_t , pub p_ustime_usec : u_int32_t , pub p_uru_maxrss : u_int64_t , pub p_uru_ixrss : u_int64_t , pub p_uru_idrss : u_int64_t , pub p_uru_isrss : u_int64_t , pub p_uru_minflt : u_int64_t , pub p_uru_majflt : u_int64_t , pub p_uru_nswap : u_int64_t , pub p_uru_inblock : u_int64_t , pub p_uru_oublock : u_int64_t , pub p_uru_msgsnd : u_int64_t , pub p_uru_msgrcv : u_int64_t , pub p_uru_nsignals : u_int64_t , pub p_uru_nvcsw : u_int64_t , pub p_uru_nivcsw : u_int64_t , pub p_uctime_sec : u_int32_t , pub p_uctime_usec : u_int32_t , pub p_psflags : u_int32_t , pub p_acflag : u_int32_t , pub p_svuid : u_int32_t , pub p_svgid : u_int32_t , pub p_emul : [:: std :: os :: raw :: c_char ; 8usize] , pub p_rlim_rss_cur : u_int64_t , pub p_cpuid : u_int64_t , pub p_vm_map_size : u_int64_t , pub p_tid : i32 , pub p_rtableid : u_int32_t , pub p_pledge : u_int64_t , pub p_name : [:: std :: os :: raw :: c_char ; 24usize] , } # [allow (clippy :: unnecessary_operation , clippy :: identity_op)] const _ : () = { ["Size of kinfo_proc"] [:: std :: mem :: size_of :: < kinfo_proc > () - 648usize] ; ["Alignment of kinfo_proc"] [:: std :: mem :: align_of :: < kinfo_proc > () - 8usize] ; ["Offset of field: kinfo_proc::p_forw"] [:: std :: mem :: offset_of ! (kinfo_proc , p_forw) - 0usize] ; ["Offset of field: kinfo_proc::p_back"] [:: std :: mem :: offset_of ! (kinfo_proc , p_back) - 8usize] ; ["Offset of field: kinfo_proc::p_paddr"] [:: std :: mem :: offset_of ! (kinfo_proc , p_paddr) - 16usize] ; ["Offset of field: kinfo_proc::p_addr"] [:: std :: mem :: offset_of ! (kinfo_proc , p_addr) - 24usize] ; ["Offset of field: kinfo_proc::p_fd"] [:: std :: mem :: offset_of ! (kinfo_proc , p_fd) - 32usize] ; ["Offset of field: kinfo_proc::p_stats"] [:: std :: mem :: offset_of ! (kinfo_proc , p_stats) - 40usize] ; ["Offset of field: kinfo_proc::p_limit"] [:: std :: mem :: offset_of ! (kinfo_proc , p_limit) - 48usize] ; ["Offset of field: kinfo_proc::p_vmspace"] [:: std :: mem :: offset_of ! (kinfo_proc , p_vmspace) - 56usize] ; ["Offset of field: kinfo_proc::p_sigacts"] [:: std :: mem :: offset_of ! (kinfo_proc , p_sigacts) - 64usize] ; ["Offset of field: kinfo_proc::p_sess"] [:: std :: mem :: offset_of ! (kinfo_proc , p_sess) - 72usize] ; ["Offset of field: kinfo_proc::p_tsess"] [:: std :: mem :: offset_of ! (kinfo_proc , p_tsess) - 80usize] ; ["Offset of field: kinfo_proc::p_ru"] [:: std :: mem :: offset_of ! (kinfo_proc , p_ru) - 88usize] ; ["Offset of field: kinfo_proc::p_eflag"] [:: std :: mem :: offset_of ! (kinfo_proc , p_eflag) - 96usize] ; ["Offset of field: kinfo_proc::p_exitsig"] [:: std :: mem :: offset_of ! (kinfo_proc , p_exitsig) - 100usize] ; ["Offset of field: kinfo_proc::p_flag"] [:: std :: mem :: offset_of ! (kinfo_proc , p_flag) - 104usize] ; ["Offset of field: kinfo_proc::p_pid"] [:: std :: mem :: offset_of ! (kinfo_proc , p_pid) - 108usize] ; ["Offset of field: kinfo_proc::p_ppid"] [:: std :: mem :: offset_of ! (kinfo_proc , p_ppid) - 112usize] ; ["Offset of field: kinfo_proc::p_sid"] [:: std :: mem :: offset_of ! (kinfo_proc , p_sid) - 116usize] ; ["Offset of field: kinfo_proc::p__pgid"] [:: std :: mem :: offset_of ! (kinfo_proc , p__pgid) - 120usize] ; ["Offset of field: kinfo_proc::p_tpgid"] [:: std :: mem :: offset_of ! (kinfo_proc , p_tpgid) - 124usize] ; ["Offset of field: kinfo_proc::p_uid"] [:: std :: mem :: offset_of ! (kinfo_proc , p_uid) - 128usize] ; ["Offset of field: kinfo_proc::p_ruid"] [:: std :: mem :: offset_of ! (kinfo_proc , p_ruid) - 132usize] ; ["Offset of field: kinfo_proc::p_gid"] [:: std :: mem :: offset_of ! (kinfo_proc , p_gid) - 136usize] ; ["Offset of field: kinfo_proc::p_rgid"] [:: std :: mem :: offset_of ! (kinfo_proc , p_rgid) - 140usize] ; ["Offset of field: kinfo_proc::p_groups"] [:: std :: mem :: offset_of ! (kinfo_proc , p_groups) - 144usize] ; ["Offset of field: kinfo_proc::p_ngroups"] [:: std :: mem :: offset_of ! (kinfo_proc , p_ngroups) - 208usize] ; ["Offset of field: kinfo_proc::p_jobc"] [:: std :: mem :: offset_of ! (kinfo_proc , p_jobc) - 210usize] ; ["Offset of field: kinfo_proc::p_tdev"] [:: std :: mem :: offset_of ! (kinfo_proc , p_tdev) - 212usize] ; ["Offset of field: kinfo_proc::p_estcpu"] [:: std :: mem :: offset_of ! (kinfo_proc , p_estcpu) - 216usize] ; ["Offset of field: kinfo_proc::p_rtime_sec"] [:: std :: mem :: offset_of ! (kinfo_proc , p_rtime_sec) - 220usize] ; ["Offset of field: kinfo_proc::p_rtime_usec"] [:: std :: mem :: offset_of ! (kinfo_proc , p_rtime_usec) - 224usize] ; ["Offset of field: kinfo_proc::p_cpticks"] [:: std :: mem :: offset_of ! (kinfo_proc , p_cpticks) - 228usize] ; ["Offset of field: kinfo_proc::p_pctcpu"] [:: std :: mem :: offset_of ! (kinfo_proc , p_pctcpu) - 232usize] ; ["Offset of field: kinfo_proc::p_swtime"] [:: std :: mem :: offset_of ! (kinfo_proc , p_swtime) - 236usize] ; ["Offset of field: kinfo_proc::p_slptime"] [:: std :: mem :: offset_of ! (kinfo_proc , p_slptime) - 240usize] ; ["Offset of field: kinfo_proc::p_schedflags"] [:: std :: mem :: offset_of ! (kinfo_proc , p_schedflags) - 244usize] ; ["Offset of field: kinfo_proc::p_uticks"] [:: std :: mem :: offset_of ! (kinfo_proc , p_uticks) - 248usize] ; ["Offset of field: kinfo_proc::p_sticks"] [:: std :: mem :: offset_of ! (kinfo_proc , p_sticks) - 256usize] ; ["Offset of field: kinfo_proc::p_iticks"] [:: std :: mem :: offset_of ! (kinfo_proc , p_iticks) - 264usize] ; ["Offset of field: kinfo_proc::p_tracep"] [:: std :: mem :: offset_of ! (kinfo_proc , p_tracep) - 272usize] ; ["Offset of field: kinfo_proc::p_traceflag"] [:: std :: mem :: offset_of ! (kinfo_proc , p_traceflag) - 280usize] ; ["Offset of field: kinfo_proc::p_holdcnt"] [:: std :: mem :: offset_of ! (kinfo_proc , p_holdcnt) - 284usize] ; ["Offset of field: kinfo_proc::p_siglist"] [:: std :: mem :: offset_of ! (kinfo_proc , p_siglist) - 288usize] ; ["Offset of field: kinfo_proc::p_sigmask"] [:: std :: mem :: offset_of ! (kinfo_proc , p_sigmask) - 292usize] ; ["Offset of field: kinfo_proc::p_sigignore"] [:: std :: mem :: offset_of ! (kinfo_proc , p_sigignore) - 296usize] ; ["Offset of field: kinfo_proc::p_sigcatch"] [:: std :: mem :: offset_of ! (kinfo_proc , p_sigcatch) - 300usize] ; ["Offset of field: kinfo_proc::p_stat"] [:: std :: mem :: offset_of ! (kinfo_proc , p_stat) - 304usize] ; ["Offset of field: kinfo_proc::p_priority"] [:: std :: mem :: offset_of ! (kinfo_proc , p_priority) - 305usize] ; ["Offset of field: kinfo_proc::p_usrpri"] [:: std :: mem :: offset_of ! (kinfo_proc , p_usrpri) - 306usize] ; ["Offset of field: kinfo_proc::p_nice"] [:: std :: mem :: offset_of ! (kinfo_proc , p_nice) - 307usize] ; ["Offset of field: kinfo_proc::p_xstat"] [:: std :: mem :: offset_of ! (kinfo_proc , p_xstat) - 308usize] ; ["Offset of field: kinfo_proc::p_spare"] [:: std :: mem :: offset_of ! (kinfo_proc , p_spare) - 310usize] ; ["Offset of field: kinfo_proc::p_comm"] [:: std :: mem :: offset_of ! (kinfo_proc , p_comm) - 312usize] ; ["Offset of field: kinfo_proc::p_wmesg"] [:: std :: mem :: offset_of ! (kinfo_proc , p_wmesg) - 336usize] ; ["Offset of field: kinfo_proc::p_wchan"] [:: std :: mem :: offset_of ! (kinfo_proc , p_wchan) - 344usize] ; ["Offset of field: kinfo_proc::p_login"] [:: std :: mem :: offset_of ! (kinfo_proc , p_login) - 352usize] ; ["Offset of field: kinfo_proc::p_vm_rssize"] [:: std :: mem :: offset_of ! (kinfo_proc , p_vm_rssize) - 384usize] ; ["Offset of field: kinfo_proc::p_vm_tsize"] [:: std :: mem :: offset_of ! (kinfo_proc , p_vm_tsize) - 388usize] ; ["Offset of field: kinfo_proc::p_vm_dsize"] [:: std :: mem :: offset_of ! (kinfo_proc , p_vm_dsize) - 392usize] ; ["Offset of field: kinfo_proc::p_vm_ssize"] [:: std :: mem :: offset_of ! (kinfo_proc , p_vm_ssize) - 396usize] ; ["Offset of field: kinfo_proc::p_uvalid"] [:: std :: mem :: offset_of ! (kinfo_proc , p_uvalid) - 400usize] ; ["Offset of field: kinfo_proc::p_ustart_sec"] [:: std :: mem :: offset_of ! (kinfo_proc , p_ustart_sec) - 408usize] ; ["Offset of field: kinfo_proc::p_ustart_usec"] [:: std :: mem :: offset_of ! (kinfo_proc , p_ustart_usec) - 416usize] ; ["Offset of field: kinfo_proc::p_uutime_sec"] [:: std :: mem :: offset_of ! (kinfo_proc , p_uutime_sec) - 420usize] ; ["Offset of field: kinfo_proc::p_uutime_usec"] [:: std :: mem :: offset_of ! (kinfo_proc , p_uutime_usec) - 424usize] ; ["Offset of field: kinfo_proc::p_ustime_sec"] [:: std :: mem :: offset_of ! (kinfo_proc , p_ustime_sec) - 428usize] ; ["Offset of field: kinfo_proc::p_ustime_usec"] [:: std :: mem :: offset_of ! (kinfo_proc , p_ustime_usec) - 432usize] ; ["Offset of field: kinfo_proc::p_uru_maxrss"] [:: std :: mem :: offset_of ! (kinfo_proc , p_uru_maxrss) - 440usize] ; ["Offset of field: kinfo_proc::p_uru_ixrss"] [:: std :: mem :: offset_of ! (kinfo_proc , p_uru_ixrss) - 448usize] ; ["Offset of field: kinfo_proc::p_uru_idrss"] [:: std :: mem :: offset_of ! (kinfo_proc , p_uru_idrss) - 456usize] ; ["Offset of field: kinfo_proc::p_uru_isrss"] [:: std :: mem :: offset_of ! (kinfo_proc , p_uru_isrss) - 464usize] ; ["Offset of field: kinfo_proc::p_uru_minflt"] [:: std :: mem :: offset_of ! (kinfo_proc , p_uru_minflt) - 472usize] ; ["Offset of field: kinfo_proc::p_uru_majflt"] [:: std :: mem :: offset_of ! (kinfo_proc , p_uru_majflt) - 480usize] ; ["Offset of field: kinfo_proc::p_uru_nswap"] [:: std :: mem :: offset_of ! (kinfo_proc , p_uru_nswap) - 488usize] ; ["Offset of field: kinfo_proc::p_uru_inblock"] [:: std :: mem :: offset_of ! (kinfo_proc , p_uru_inblock) - 496usize] ; ["Offset of field: kinfo_proc::p_uru_oublock"] [:: std :: mem :: offset_of ! (kinfo_proc , p_uru_oublock) - 504usize] ; ["Offset of field: kinfo_proc::p_uru_msgsnd"] [:: std :: mem :: offset_of ! (kinfo_proc , p_uru_msgsnd) - 512usize] ; ["Offset of field: kinfo_proc::p_uru_msgrcv"] [:: std :: mem :: offset_of ! (kinfo_proc , p_uru_msgrcv) - 520usize] ; ["Offset of field: kinfo_proc::p_uru_nsignals"] [:: std :: mem :: offset_of ! (kinfo_proc , p_uru_nsignals) - 528usize] ; ["Offset of field: kinfo_proc::p_uru_nvcsw"] [:: std :: mem :: offset_of ! (kinfo_proc , p_uru_nvcsw) - 536usize] ; ["Offset of field: kinfo_proc::p_uru_nivcsw"] [:: std :: mem :: offset_of ! (kinfo_proc , p_uru_nivcsw) - 544usize] ; ["Offset of field: kinfo_proc::p_uctime_sec"] [:: std :: mem :: offset_of ! (kinfo_proc , p_uctime_sec) - 552usize] ; ["Offset of field: kinfo_proc::p_uctime_usec"] [:: std :: mem :: offset_of ! (kinfo_proc , p_uctime_usec) - 556usize] ; ["Offset of field: kinfo_proc::p_psflags"] [:: std :: mem :: offset_of ! (kinfo_proc , p_psflags) - 560usize] ; ["Offset of field: kinfo_proc::p_acflag"] [:: std :: mem :: offset_of ! (kinfo_proc , p_acflag) - 564usize] ; ["Offset of field: kinfo_proc::p_svuid"] [:: std :: mem :: offset_of ! (kinfo_proc , p_svuid) - 568usize] ; ["Offset of field: kinfo_proc::p_svgid"] [:: std :: mem :: offset_of ! (kinfo_proc , p_svgid) - 572usize] ; ["Offset of field: kinfo_proc::p_emul"] [:: std :: mem :: offset_of ! (kinfo_proc , p_emul) - 576usize] ; ["Offset of field: kinfo_proc::p_rlim_rss_cur"] [:: std :: mem :: offset_of ! (kinfo_proc , p_rlim_rss_cur) - 584usize] ; ["Offset of field: kinfo_proc::p_cpuid"] [:: std :: mem :: offset_of ! (kinfo_proc , p_cpuid) - 592usize] ; ["Offset of field: kinfo_proc::p_vm_map_size"] [:: std :: mem :: offset_of ! (kinfo_proc , p_vm_map_size) - 600usize] ; ["Offset of field: kinfo_proc::p_tid"] [:: std :: mem :: offset_of ! (kinfo_proc , p_tid) - 608usize] ; ["Offset of field: kinfo_proc::p_rtableid"] [:: std :: mem :: offset_of ! (kinfo_proc , p_rtableid) - 612usize] ; ["Offset of field: kinfo_proc::p_pledge"] [:: std :: mem :: offset_of ! (kinfo_proc , p_pledge) - 616usize] ; ["Offset of field: kinfo_proc::p_name"] [:: std :: mem :: offset_of ! (kinfo_proc , p_name) - 624usize] ; } ; # [repr (C)] # [derive (Debug , Copy , Clone)] pub struct kinfo_vmentry { pub kve_start : u_long , pub kve_end : u_long , pub kve_guard : u_long , pub kve_fspace : u_long , pub kve_fspace_augment : u_long , pub kve_offset : u_int64_t , pub kve_wired_count : :: std :: os :: raw :: c_int , pub kve_etype : :: std :: os :: raw :: c_int , pub kve_protection : :: std :: os :: raw :: c_int , pub kve_max_protection : :: std :: os :: raw :: c_int , pub kve_advice : :: std :: os :: raw :: c_int , pub kve_inheritance : :: std :: os :: raw :: c_int , pub kve_flags : u_int8_t , } # [allow (clippy :: unnecessary_operation , clippy :: identity_op)] const _ : () = { ["Size of kinfo_vmentry"] [:: std :: mem :: size_of :: < kinfo_vmentry > () - 80usize] ; ["Alignment of kinfo_vmentry"] [:: std :: mem :: align_of :: < kinfo_vmentry > () - 8usize] ; ["Offset of field: kinfo_vmentry::kve_start"] [:: std :: mem :: offset_of ! (kinfo_vmentry , kve_start) - 0usize] ; ["Offset of field: kinfo_vmentry::kve_end"] [:: std :: mem :: offset_of ! (kinfo_vmentry , kve_end) - 8usize] ; ["Offset of field: kinfo_vmentry::kve_guard"] [:: std :: mem :: offset_of ! (kinfo_vmentry , kve_guard) - 16usize] ; ["Offset of field: kinfo_vmentry::kve_fspace"] [:: std :: mem :: offset_of ! (kinfo_vmentry , kve_fspace) - 24usize] ; ["Offset of field: kinfo_vmentry::kve_fspace_augment"] [:: std :: mem :: offset_of ! (kinfo_vmentry , kve_fspace_augment) - 32usize] ; ["Offset of field: kinfo_vmentry::kve_offset"] [:: std :: mem :: offset_of ! (kinfo_vmentry , kve_offset) - 40usize] ; ["Offset of field: kinfo_vmentry::kve_wired_count"] [:: std :: mem :: offset_of ! (kinfo_vmentry , kve_wired_count) - 48usize] ; ["Offset of field: kinfo_vmentry::kve_etype"] [:: std :: mem :: offset_of ! (kinfo_vmentry , kve_etype) - 52usize] ; ["Offset of field: kinfo_vmentry::kve_protection"] [:: std :: mem :: offset_of ! (kinfo_vmentry , kve_protection) - 56usize] ; ["Offset of field: kinfo_vmentry::kve_max_protection"] [:: std :: mem :: offset_of ! (kinfo_vmentry , kve_max_protection) - 60usize] ; ["Offset of field: kinfo_vmentry::kve_advice"] [:: std :: mem :: offset_of ! (kinfo_vmentry , kve_advice) - 64usize] ; ["Offset of field: kinfo_vmentry::kve_inheritance"] [:: std :: mem :: offset_of ! (kinfo_vmentry , kve_inheritance) - 68usize] ; ["Offset of field: kinfo_vmentry::kve_flags"] [:: std :: mem :: offset_of ! (kinfo_vmentry , kve_flags) - 72usize] ; } ; # [repr (C)] # [derive (Debug , Copy , Clone)] pub struct kinfo_file { pub f_fileaddr : u64 , pub f_flag : u32 , pub f_iflags : u32 , pub f_type : u32 , pub f_count : u32 , pub f_msgcount : u32 , pub f_usecount : u32 , pub f_ucred : u64 , pub f_uid : u32 , pub f_gid : u32 , pub f_ops : u64 , pub f_offset : u64 , pub f_data : u64 , pub f_rxfer : u64 , pub f_rwfer : u64 , pub f_seek : u64 , pub f_rbytes : u64 , pub f_wbytes : u64 , pub v_un : u64 , pub v_type : u32 , pub v_tag : u32 , pub v_flag : u32 , pub va_rdev : u32 , pub v_data : u64 , pub v_mount : u64 , pub va_fileid : u64 , pub va_size : u64 , pub va_mode : u32 , pub va_fsid : u32 , pub f_mntonname : [:: std :: os :: raw :: c_char ; 96usize] , pub so_type : u32 , pub so_state : u32 , pub so_pcb : u64 , pub so_protocol : u32 , pub so_family : u32 , pub inp_ppcb : u64 , pub inp_lport : u32 , pub inp_laddru : [u32 ; 4usize] , pub inp_fport : u32 , pub inp_faddru : [u32 ; 4usize] , pub unp_conn : u64 , pub pipe_peer : u64 , pub pipe_state : u32 , pub kq_count : u32 , pub kq_state : u32 , pub __unused1 : u32 , pub p_pid : u32 , pub fd_fd : i32 , pub fd_ofileflags : u32 , pub p_uid : u32 , pub p_gid : u32 , pub p_tid : u32 , pub p_comm : [:: std :: os :: raw :: c_char ; 24usize] , pub inp_rtableid : u32 , pub so_splice : u64 , pub so_splicelen : i64 , pub so_rcv_cc : u64 , pub so_snd_cc : u64 , pub unp_refs : u64 , pub unp_nextref : u64 , pub unp_addr : u64 , pub unp_path : [:: std :: os :: raw :: c_char ; 104usize] , pub inp_proto : u32 , pub t_state : u32 , pub t_rcv_wnd : u64 , pub t_snd_wnd : u64 , pub t_snd_cwnd : u64 , pub va_nlink : u32 , } # [allow (clippy :: unnecessary_operation , clippy :: identity_op)] const _ : () = { ["Size of kinfo_file"] [:: std :: mem :: size_of :: < kinfo_file > () - 632usize] ; ["Alignment of kinfo_file"] [:: std :: mem :: align_of :: < kinfo_file > () - 8usize] ; ["Offset of field: kinfo_file::f_fileaddr"] [:: std :: mem :: offset_of ! (kinfo_file , f_fileaddr) - 0usize] ; ["Offset of field: kinfo_file::f_flag"] [:: std :: mem :: offset_of ! (kinfo_file , f_flag) - 8usize] ; ["Offset of field: kinfo_file::f_iflags"] [:: std :: mem :: offset_of ! (kinfo_file , f_iflags) - 12usize] ; ["Offset of field: kinfo_file::f_type"] [:: std :: mem :: offset_of ! (kinfo_file , f_type) - 16usize] ; ["Offset of field: kinfo_file::f_count"] [:: std :: mem :: offset_of ! (kinfo_file , f_count) - 20usize] ; ["Offset of field: kinfo_file::f_msgcount"] [:: std :: mem :: offset_of ! (kinfo_file , f_msgcount) - 24usize] ; ["Offset of field: kinfo_file::f_usecount"] [:: std :: mem :: offset_of ! (kinfo_file , f_usecount) - 28usize] ; ["Offset of field: kinfo_file::f_ucred"] [:: std :: mem :: offset_of ! (kinfo_file , f_ucred) - 32usize] ; ["Offset of field: kinfo_file::f_uid"] [:: std :: mem :: offset_of ! (kinfo_file , f_uid) - 40usize] ; ["Offset of field: kinfo_file::f_gid"] [:: std :: mem :: offset_of ! (kinfo_file , f_gid) - 44usize] ; ["Offset of field: kinfo_file::f_ops"] [:: std :: mem :: offset_of ! (kinfo_file , f_ops) - 48usize] ; ["Offset of field: kinfo_file::f_offset"] [:: std :: mem :: offset_of ! (kinfo_file , f_offset) - 56usize] ; ["Offset of field: kinfo_file::f_data"] [:: std :: mem :: offset_of ! (kinfo_file , f_data) - 64usize] ; ["Offset of field: kinfo_file::f_rxfer"] [:: std :: mem :: offset_of ! (kinfo_file , f_rxfer) - 72usize] ; ["Offset of field: kinfo_file::f_rwfer"] [:: std :: mem :: offset_of ! (kinfo_file , f_rwfer) - 80usize] ; ["Offset of field: kinfo_file::f_seek"] [:: std :: mem :: offset_of ! (kinfo_file , f_seek) - 88usize] ; ["Offset of field: kinfo_file::f_rbytes"] [:: std :: mem :: offset_of ! (kinfo_file , f_rbytes) - 96usize] ; ["Offset of field: kinfo_file::f_wbytes"] [:: std :: mem :: offset_of ! (kinfo_file , f_wbytes) - 104usize] ; ["Offset of field: kinfo_file::v_un"] [:: std :: mem :: offset_of ! (kinfo_file , v_un) - 112usize] ; ["Offset of field: kinfo_file::v_type"] [:: std :: mem :: offset_of ! (kinfo_file , v_type) - 120usize] ; ["Offset of field: kinfo_file::v_tag"] [:: std :: mem :: offset_of ! (kinfo_file , v_tag) - 124usize] ; ["Offset of field: kinfo_file::v_flag"] [:: std :: mem :: offset_of ! (kinfo_file , v_flag) - 128usize] ; ["Offset of field: kinfo_file::va_rdev"] [:: std :: mem :: offset_of ! (kinfo_file , va_rdev) - 132usize] ; ["Offset of field: kinfo_file::v_data"] [:: std :: mem :: offset_of ! (kinfo_file , v_data) - 136usize] ; ["Offset of field: kinfo_file::v_mount"] [:: std :: mem :: offset_of ! (kinfo_file , v_mount) - 144usize] ; ["Offset of field: kinfo_file::va_fileid"] [:: std :: mem :: offset_of ! (kinfo_file , va_fileid) - 152usize] ; ["Offset of field: kinfo_file::va_size"] [:: std :: mem :: offset_of ! (kinfo_file , va_size) - 160usize] ; ["Offset of field: kinfo_file::va_mode"] [:: std :: mem :: offset_of ! (kinfo_file , va_mode) - 168usize] ; ["Offset of field: kinfo_file::va_fsid"] [:: std :: mem :: offset_of ! (kinfo_file , va_fsid) - 172usize] ; ["Offset of field: kinfo_file::f_mntonname"] [:: std :: mem :: offset_of ! (kinfo_file , f_mntonname) - 176usize] ; ["Offset of field: kinfo_file::so_type"] [:: std :: mem :: offset_of ! (kinfo_file , so_type) - 272usize] ; ["Offset of field: kinfo_file::so_state"] [:: std :: mem :: offset_of ! (kinfo_file , so_state) - 276usize] ; ["Offset of field: kinfo_file::so_pcb"] [:: std :: mem :: offset_of ! (kinfo_file , so_pcb) - 280usize] ; ["Offset of field: kinfo_file::so_protocol"] [:: std :: mem :: offset_of ! (kinfo_file , so_protocol) - 288usize] ; ["Offset of field: kinfo_file::so_family"] [:: std :: mem :: offset_of ! (kinfo_file , so_family) - 292usize] ; ["Offset of field: kinfo_file::inp_ppcb"] [:: std :: mem :: offset_of ! (kinfo_file , inp_ppcb) - 296usize] ; ["Offset of field: kinfo_file::inp_lport"] [:: std :: mem :: offset_of ! (kinfo_file , inp_lport) - 304usize] ; ["Offset of field: kinfo_file::inp_laddru"] [:: std :: mem :: offset_of ! (kinfo_file , inp_laddru) - 308usize] ; ["Offset of field: kinfo_file::inp_fport"] [:: std :: mem :: offset_of ! (kinfo_file , inp_fport) - 324usize] ; ["Offset of field: kinfo_file::inp_faddru"] [:: std :: mem :: offset_of ! (kinfo_file , inp_faddru) - 328usize] ; ["Offset of field: kinfo_file::unp_conn"] [:: std :: mem :: offset_of ! (kinfo_file , unp_conn) - 344usize] ; ["Offset of field: kinfo_file::pipe_peer"] [:: std :: mem :: offset_of ! (kinfo_file , pipe_peer) - 352usize] ; ["Offset of field: kinfo_file::pipe_state"] [:: std :: mem :: offset_of ! (kinfo_file , pipe_state) - 360usize] ; ["Offset of field: kinfo_file::kq_count"] [:: std :: mem :: offset_of ! (kinfo_file , kq_count) - 364usize] ; ["Offset of field: kinfo_file::kq_state"] [:: std :: mem :: offset_of ! (kinfo_file , kq_state) - 368usize] ; ["Offset of field: kinfo_file::__unused1"] [:: std :: mem :: offset_of ! (kinfo_file , __unused1) - 372usize] ; ["Offset of field: kinfo_file::p_pid"] [:: std :: mem :: offset_of ! (kinfo_file , p_pid) - 376usize] ; ["Offset of field: kinfo_file::fd_fd"] [:: std :: mem :: offset_of ! (kinfo_file , fd_fd) - 380usize] ; ["Offset of field: kinfo_file::fd_ofileflags"] [:: std :: mem :: offset_of ! (kinfo_file , fd_ofileflags) - 384usize] ; ["Offset of field: kinfo_file::p_uid"] [:: std :: mem :: offset_of ! (kinfo_file , p_uid) - 388usize] ; ["Offset of field: kinfo_file::p_gid"] [:: std :: mem :: offset_of ! (kinfo_file , p_gid) - 392usize] ; ["Offset of field: kinfo_file::p_tid"] [:: std :: mem :: offset_of ! (kinfo_file , p_tid) - 396usize] ; ["Offset of field: kinfo_file::p_comm"] [:: std :: mem :: offset_of ! (kinfo_file , p_comm) - 400usize] ; ["Offset of field: kinfo_file::inp_rtableid"] [:: std :: mem :: offset_of ! (kinfo_file , inp_rtableid) - 424usize] ; ["Offset of field: kinfo_file::so_splice"] [:: std :: mem :: offset_of ! (kinfo_file , so_splice) - 432usize] ; ["Offset of field: kinfo_file::so_splicelen"] [:: std :: mem :: offset_of ! (kinfo_file , so_splicelen) - 440usize] ; ["Offset of field: kinfo_file::so_rcv_cc"] [:: std :: mem :: offset_of ! (kinfo_file , so_rcv_cc) - 448usize] ; ["Offset of field: kinfo_file::so_snd_cc"] [:: std :: mem :: offset_of ! (kinfo_file , so_snd_cc) - 456usize] ; ["Offset of field: kinfo_file::unp_refs"] [:: std :: mem :: offset_of ! (kinfo_file , unp_refs) - 464usize] ; ["Offset of field: kinfo_file::unp_nextref"] [:: std :: mem :: offset_of ! (kinfo_file , unp_nextref) - 472usize] ; ["Offset of field: kinfo_file::unp_addr"] [:: std :: mem :: offset_of ! (kinfo_file , unp_addr) - 480usize] ; ["Offset of field: kinfo_file::unp_path"] [:: std :: mem :: offset_of ! (kinfo_file , unp_path) - 488usize] ; ["Offset of field: kinfo_file::inp_proto"] [:: std :: mem :: offset_of ! (kinfo_file , inp_proto) - 592usize] ; ["Offset of field: kinfo_file::t_state"] [:: std :: mem :: offset_of ! (kinfo_file , t_state) - 596usize] ; ["Offset of field: kinfo_file::t_rcv_wnd"] [:: std :: mem :: offset_of ! (kinfo_file , t_rcv_wnd) - 600usize] ; ["Offset of field: kinfo_file::t_snd_wnd"] [:: std :: mem :: offset_of ! (kinfo_file , t_snd_wnd) - 608usize] ; ["Offset of field: kinfo_file::t_snd_cwnd"] [:: std :: mem :: offset_of ! (kinfo_file , t_snd_cwnd) - 616usize] ; ["Offset of field: kinfo_file::va_nlink"] [:: std :: mem :: offset_of ! (kinfo_file , va_nlink) - 624usize] ; } ; unsafe extern "C" { pub fn sysctl (arg1 : * const :: std :: os :: raw :: c_int , arg2 : u_int , arg3 : * mut :: std :: os :: raw :: c_void , arg4 : * mut usize , arg5 : * mut :: std :: os :: raw :: c_void , arg6 : usize) -> :: std :: os :: raw :: c_int ; } # [repr (C)] # [derive (Debug , Copy , Clone)] pub struct iovec { pub iov_base : * mut :: std :: os :: raw :: c_void , pub iov_len : usize , } # [allow (clippy :: unnecessary_operation , clippy :: identity_op)] const _ : () = { ["Size of iovec"] [:: std :: mem :: size_of :: < iovec > () - 16usize] ; ["Alignment of iovec"] [:: std :: mem :: align_of :: < iovec > () - 8usize] ; ["Offset of field: iovec::iov_base"] [:: std :: mem :: offset_of ! (iovec , iov_base) - 0usize] ; ["Offset of field: iovec::iov_len"] [:: std :: mem :: offset_of ! (iovec , iov_len) - 8usize] ; } ; pub const uio_rw_UIO_READ : uio_rw = 0 ; pub const uio_rw_UIO_WRITE : uio_rw = 1 ; pub type uio_rw = :: std :: os :: raw :: c_uint ; pub const uio_seg_UIO_USERSPACE : uio_seg = 0 ; pub const uio_seg_UIO_SYSSPACE : uio_seg = 1 ; pub type uio_seg = :: std :: os :: raw :: c_uint ; unsafe extern "C" { pub fn preadv (arg1 : :: std :: os :: raw :: c_int , arg2 : * const iovec , arg3 : :: std :: os :: raw :: c_int , arg4 : __off_t) -> isize ; } unsafe extern "C" { pub fn pwritev (arg1 : :: std :: os :: raw :: c_int , arg2 : * const iovec , arg3 : :: std :: os :: raw :: c_int , arg4 : __off_t) -> isize ; } unsafe extern "C" { pub fn readv (arg1 : :: std :: os :: raw :: c_int , arg2 : * const iovec , arg3 : :: std :: os :: raw :: c_int) -> isize ; } unsafe extern "C" { pub fn writev (arg1 : :: std :: os :: raw :: c_int , arg2 : * const iovec , arg3 : :: std :: os :: raw :: c_int) -> isize ; } pub type socklen_t = __socklen_t ; pub type sa_family_t = __sa_family_t ; # [repr (C)] # [derive (Debug , Copy , Clone)] pub struct linger { pub l_onoff : :: std :: os :: raw :: c_int , pub l_linger : :: std :: os :: raw :: c_int , } # [allow (clippy :: unnecessary_operation , clippy :: identity_op)] const _ : () = { ["Size of linger"] [:: std :: mem :: size_of :: < linger > () - 8usize] ; ["Alignment of linger"] [:: std :: mem :: align_of :: < linger > () - 4usize] ; ["Offset of field: linger::l_onoff"] [:: std :: mem :: offset_of ! (linger , l_onoff) - 0usize] ; ["Offset of field: linger::l_linger"] [:: std :: mem :: offset_of ! (linger , l_linger) - 4usize] ; } ; # [repr (C)] # [derive (Debug , Copy , Clone)] pub struct splice { pub sp_fd : :: std :: os :: raw :: c_int , pub sp_max : off_t , pub sp_idle : timeval , } # [allow (clippy :: unnecessary_operation , clippy :: identity_op)] const _ : () = { ["Size of splice"] [:: std :: mem :: size_of :: < splice > () - 32usize] ; ["Alignment of splice"] [:: std :: mem :: align_of :: < splice > () - 8usize] ; ["Offset of field: splice::sp_fd"] [:: std :: mem :: offset_of ! (splice , sp_fd) - 0usize] ; ["Offset of field: splice::sp_max"] [:: std :: mem :: offset_of ! (splice , sp_max) - 8usize] ; ["Offset of field: splice::sp_idle"] [:: std :: mem :: offset_of ! (splice , sp_idle) - 16usize] ; } ; # [repr (C)] # [derive (Debug , Copy , Clone)] pub struct sockaddr { pub sa_len : __uint8_t , pub sa_family : sa_family_t , pub sa_data : [:: std :: os :: raw :: c_char ; 14usize] , } # [allow (clippy :: unnecessary_operation , clippy :: identity_op)] const _ : () = { ["Size of sockaddr"] [:: std :: mem :: size_of :: < sockaddr > () - 16usize] ; ["Alignment of sockaddr"] [:: std :: mem :: align_of :: < sockaddr > () - 1usize] ; ["Offset of field: sockaddr::sa_len"] [:: std :: mem :: offset_of ! (sockaddr , sa_len) - 0usize] ; ["Offset of field: sockaddr::sa_family"] [:: std :: mem :: offset_of ! (sockaddr , sa_family) - 1usize] ; ["Offset of field: sockaddr::sa_data"] [:: std :: mem :: offset_of ! (sockaddr , sa_data) - 2usize] ; } ; # [repr (C)] # [derive (Debug , Copy , Clone)] pub struct sockaddr_storage { pub ss_len : __uint8_t , pub ss_family : sa_family_t , pub __ss_pad1 : [:: std :: os :: raw :: c_uchar ; 6usize] , pub __ss_pad2 : __uint64_t , pub __ss_pad3 : [:: std :: os :: raw :: c_uchar ; 240usize] , } # [allow (clippy :: unnecessary_operation , clippy :: identity_op)] const _ : () = { ["Size of sockaddr_storage"] [:: std :: mem :: size_of :: < sockaddr_storage > () - 256usize] ; ["Alignment of sockaddr_storage"] [:: std :: mem :: align_of :: < sockaddr_storage > () - 8usize] ; ["Offset of field: sockaddr_storage::ss_len"] [:: std :: mem :: offset_of ! (sockaddr_storage , ss_len) - 0usize] ; ["Offset of field: sockaddr_storage::ss_family"] [:: std :: mem :: offset_of ! (sockaddr_storage , ss_family) - 1usize] ; ["Offset of field: sockaddr_storage::__ss_pad1"] [:: std :: mem :: offset_of ! (sockaddr_storage , __ss_pad1) - 2usize] ; ["Offset of field: sockaddr_storage::__ss_pad2"] [:: std :: mem :: offset_of ! (sockaddr_storage , __ss_pad2) - 8usize] ; ["Offset of field: sockaddr_storage::__ss_pad3"] [:: std :: mem :: offset_of ! (sockaddr_storage , __ss_pad3) - 16usize] ; } ; # [repr (C)] # [derive (Debug , Copy , Clone)] pub struct sockpeercred { pub uid : uid_t , pub gid : gid_t , pub pid : pid_t , } # [allow (clippy :: unnecessary_operation , clippy :: identity_op)] const _ : () = { ["Size of sockpeercred"] [:: std :: mem :: size_of :: < sockpeercred > () - 12usize] ; ["Alignment of sockpeercred"] [:: std :: mem :: align_of :: < sockpeercred > () - 4usize] ; ["Offset of field: sockpeercred::uid"] [:: std :: mem :: offset_of ! (sockpeercred , uid) - 0usize] ; ["Offset of field: sockpeercred::gid"] [:: std :: mem :: offset_of ! (sockpeercred , gid) - 4usize] ; ["Offset of field: sockpeercred::pid"] [:: std :: mem :: offset_of ! (sockpeercred , pid) - 8usize] ; } ; # [repr (C)] # [derive (Debug , Copy , Clone)] pub struct msghdr { pub msg_name : * mut :: std :: os :: raw :: c_void , pub msg_namelen : socklen_t , pub msg_iov : * mut iovec , pub msg_iovlen : :: std :: os :: raw :: c_uint , pub msg_control : * mut :: std :: os :: raw :: c_void , pub msg_controllen : socklen_t , pub msg_flags : :: std :: os :: raw :: c_int , } # [allow (clippy :: unnecessary_operation , clippy :: identity_op)] const _ : () = { ["Size of msghdr"] [:: std :: mem :: size_of :: < msghdr > () - 48usize] ; ["Alignment of msghdr"] [:: std :: mem :: align_of :: < msghdr > () - 8usize] ; ["Offset of field: msghdr::msg_name"] [:: std :: mem :: offset_of ! (msghdr , msg_name) - 0usize] ; ["Offset of field: msghdr::msg_namelen"] [:: std :: mem :: offset_of ! (msghdr , msg_namelen) - 8usize] ; ["Offset of field: msghdr::msg_iov"] [:: std :: mem :: offset_of ! (msghdr , msg_iov) - 16usize] ; ["Offset of field: msghdr::msg_iovlen"] [:: std :: mem :: offset_of ! (msghdr , msg_iovlen) - 24usize] ; ["Offset of field: msghdr::msg_control"] [:: std :: mem :: offset_of ! (msghdr , msg_control) - 32usize] ; ["Offset of field: msghdr::msg_controllen"] [:: std :: mem :: offset_of ! (msghdr , msg_controllen) - 40usize] ; ["Offset of field: msghdr::msg_flags"] [:: std :: mem :: offset_of ! (msghdr , msg_flags) - 44usize] ; } ; # [repr (C)] # [derive (Debug , Copy , Clone)] pub struct mmsghdr { pub msg_hdr : msghdr , pub msg_len : :: std :: os :: raw :: c_uint , } # [allow (clippy :: unnecessary_operation , clippy :: identity_op)] const _ : () = { ["Size of mmsghdr"] [:: std :: mem :: size_of :: < mmsghdr > () - 56usize] ; ["Alignment of mmsghdr"] [:: std :: mem :: align_of :: < mmsghdr > () - 8usize] ; ["Offset of field: mmsghdr::msg_hdr"] [:: std :: mem :: offset_of ! (mmsghdr , msg_hdr) - 0usize] ; ["Offset of field: mmsghdr::msg_len"] [:: std :: mem :: offset_of ! (mmsghdr , msg_len) - 48usize] ; } ; # [repr (C)] # [derive (Debug , Copy , Clone)] pub struct cmsghdr { pub cmsg_len : socklen_t , pub cmsg_level : :: std :: os :: raw :: c_int , pub cmsg_type : :: std :: os :: raw :: c_int , } # [allow (clippy :: unnecessary_operation , clippy :: identity_op)] const _ : () = { ["Size of cmsghdr"] [:: std :: mem :: size_of :: < cmsghdr > () - 12usize] ; ["Alignment of cmsghdr"] [:: std :: mem :: align_of :: < cmsghdr > () - 4usize] ; ["Offset of field: cmsghdr::cmsg_len"] [:: std :: mem :: offset_of ! (cmsghdr , cmsg_len) - 0usize] ; ["Offset of field: cmsghdr::cmsg_level"] [:: std :: mem :: offset_of ! (cmsghdr , cmsg_level) - 4usize] ; ["Offset of field: cmsghdr::cmsg_type"] [:: std :: mem :: offset_of ! (cmsghdr , cmsg_type) - 8usize] ; } ; unsafe extern "C" { pub fn accept (arg1 : :: std :: os :: raw :: c_int , arg2 : * mut sockaddr , arg3 : * mut socklen_t) -> :: std :: os :: raw :: c_int ; } unsafe extern "C" { pub fn bind (arg1 : :: std :: os :: raw :: c_int , arg2 : * const sockaddr , arg3 : socklen_t) -> :: std :: os :: raw :: c_int ; } unsafe extern "C" { pub fn connect (arg1 : :: std :: os :: raw :: c_int , arg2 : * const sockaddr , arg3 : socklen_t) -> :: std :: os :: raw :: c_int ; } unsafe extern "C" { pub fn getpeername (arg1 : :: std :: os :: raw :: c_int , arg2 : * mut sockaddr , arg3 : * mut socklen_t) -> :: std :: os :: raw :: c_int ; } unsafe extern "C" { pub fn getsockname (arg1 : :: std :: os :: raw :: c_int , arg2 : * mut sockaddr , arg3 : * mut socklen_t) -> :: std :: os :: raw :: c_int ; } unsafe extern "C" { pub fn getsockopt (arg1 : :: std :: os :: raw :: c_int , arg2 : :: std :: os :: raw :: c_int , arg3 : :: std :: os :: raw :: c_int , arg4 : * mut :: std :: os :: raw :: c_void , arg5 : * mut socklen_t) -> :: std :: os :: raw :: c_int ; } unsafe extern "C" { pub fn listen (arg1 : :: std :: os :: raw :: c_int , arg2 : :: std :: os :: raw :: c_int) -> :: std :: os :: raw :: c_int ; } unsafe extern "C" { pub fn recv (arg1 : :: std :: os :: raw :: c_int , arg2 : * mut :: std :: os :: raw :: c_void , arg3 : usize , arg4 : :: std :: os :: raw :: c_int) -> isize ; } unsafe extern "C" { pub fn recvfrom (arg1 : :: std :: os :: raw :: c_int , arg2 : * mut :: std :: os :: raw :: c_void , arg3 : usize , arg4 : :: std :: os :: raw :: c_int , arg5 : * mut sockaddr , arg6 : * mut socklen_t) -> isize ; } unsafe extern "C" { pub fn recvmsg (arg1 : :: std :: os :: raw :: c_int , arg2 : * mut msghdr , arg3 : :: std :: os :: raw :: c_int) -> isize ; } unsafe extern "C" { pub fn recvmmsg (arg1 : :: std :: os :: raw :: c_int , arg2 : * mut mmsghdr , arg3 : :: std :: os :: raw :: c_uint , arg4 : :: std :: os :: raw :: c_int , arg5 : * mut timespec) -> :: std :: os :: raw :: c_int ; } unsafe extern "C" { pub fn send (arg1 : :: std :: os :: raw :: c_int , arg2 : * const :: std :: os :: raw :: c_void , arg3 : usize , arg4 : :: std :: os :: raw :: c_int) -> isize ; } unsafe extern "C" { pub fn sendto (arg1 : :: std :: os :: raw :: c_int , arg2 : * const :: std :: os :: raw :: c_void , arg3 : usize , arg4 : :: std :: os :: raw :: c_int , arg5 : * const sockaddr , arg6 : socklen_t) -> isize ; } unsafe extern "C" { pub fn sendmsg (arg1 : :: std :: os :: raw :: c_int , arg2 : * const msghdr , arg3 : :: std :: os :: raw :: c_int) -> isize ; } unsafe extern "C" { pub fn sendmmsg (arg1 : :: std :: os :: raw :: c_int , arg2 : * mut mmsghdr , arg3 : :: std :: os :: raw :: c_uint , arg4 : :: std :: os :: raw :: c_int) -> :: std :: os :: raw :: c_int ; } unsafe extern "C" { pub fn setsockopt (arg1 : :: std :: os :: raw :: c_int , arg2 : :: std :: os :: raw :: c_int , arg3 : :: std :: os :: raw :: c_int , arg4 : * const :: std :: os :: raw :: c_void , arg5 : socklen_t) -> :: std :: os :: raw :: c_int ; } unsafe extern "C" { pub fn shutdown (arg1 : :: std :: os :: raw :: c_int , arg2 : :: std :: os :: raw :: c_int) -> :: std :: os :: raw :: c_int ; } unsafe extern "C" { pub fn sockatmark (arg1 : :: std :: os :: raw :: c_int) -> :: std :: os :: raw :: c_int ; } unsafe extern "C" { pub fn socket (arg1 : :: std :: os :: raw :: c_int , arg2 : :: std :: os :: raw :: c_int , arg3 : :: std :: os :: raw :: c_int) -> :: std :: os :: raw :: c_int ; } unsafe extern "C" { pub fn socketpair (arg1 : :: std :: os :: raw :: c_int , arg2 : :: std :: os :: raw :: c_int , arg3 : :: std :: os :: raw :: c_int , arg4 : * mut :: std :: os :: raw :: c_int) -> :: std :: os :: raw :: c_int ; } unsafe extern "C" { pub fn accept4 (arg1 : :: std :: os :: raw :: c_int , arg2 : * mut sockaddr , arg3 : * mut socklen_t , arg4 : :: std :: os :: raw :: c_int) -> :: std :: os :: raw :: c_int ; } unsafe extern "C" { pub fn getpeereid (arg1 : :: std :: os :: raw :: c_int , arg2 : * mut uid_t , arg3 : * mut gid_t) -> :: std :: os :: raw :: c_int ; } unsafe extern "C" { pub fn getrtable () -> :: std :: os :: raw :: c_int ; } unsafe extern "C" { pub fn setrtable (arg1 : :: std :: os :: raw :: c_int) -> :: std :: os :: raw :: c_int ; } pub type in_addr_t = __in_addr_t ; pub type in_port_t = __in_port_t ; # [repr (C)] # [derive (Debug , Copy , Clone)] pub struct in_addr { pub s_addr : in_addr_t , } # [allow (clippy :: unnecessary_operation , clippy :: identity_op)] const _ : () = { ["Size of in_addr"] [:: std :: mem :: size_of :: < in_addr > () - 4usize] ; ["Alignment of in_addr"] [:: std :: mem :: align_of :: < in_addr > () - 4usize] ; ["Offset of field: in_addr::s_addr"] [:: std :: mem :: offset_of ! (in_addr , s_addr) - 0usize] ; } ; # [repr (C)] # [derive (Debug , Copy , Clone)] pub struct sockaddr_in { pub sin_len : u_int8_t , pub sin_family : sa_family_t , pub sin_port : in_port_t , pub sin_addr : in_addr , pub sin_zero : [i8 ; 8usize] , } # [allow (clippy :: unnecessary_operation , clippy :: identity_op)] const _ : () = { ["Size of sockaddr_in"] [:: std :: mem :: size_of :: < sockaddr_in > () - 16usize] ; ["Alignment of sockaddr_in"] [:: std :: mem :: align_of :: < sockaddr_in > () - 4usize] ; ["Offset of field: sockaddr_in::sin_len"] [:: std :: mem :: offset_of ! (sockaddr_in , sin_len) - 0usize] ; ["Offset of field: sockaddr_in::sin_family"] [:: std :: mem :: offset_of ! (sockaddr_in , sin_family) - 1usize] ; ["Offset of field: sockaddr_in::sin_port"] [:: std :: mem :: offset_of ! (sockaddr_in , sin_port) - 2usize] ; ["Offset of field: sockaddr_in::sin_addr"] [:: std :: mem :: offset_of ! (sockaddr_in , sin_addr) - 4usize] ; ["Offset of field: sockaddr_in::sin_zero"] [:: std :: mem :: offset_of ! (sockaddr_in , sin_zero) - 8usize] ; } ; # [repr (C)] # [derive (Debug , Copy , Clone)] pub struct ip_opts { pub ip_dst : in_addr , pub ip_opts : [i8 ; 40usize] , } # [allow (clippy :: unnecessary_operation , clippy :: identity_op)] const _ : () = { ["Size of ip_opts"] [:: std :: mem :: size_of :: < ip_opts > () - 44usize] ; ["Alignment of ip_opts"] [:: std :: mem :: align_of :: < ip_opts > () - 4usize] ; ["Offset of field: ip_opts::ip_dst"] [:: std :: mem :: offset_of ! (ip_opts , ip_dst) - 0usize] ; ["Offset of field: ip_opts::ip_opts"] [:: std :: mem :: offset_of ! (ip_opts , ip_opts) - 4usize] ; } ; # [repr (C)] # [derive (Debug , Copy , Clone)] pub struct ip_mreq { pub imr_multiaddr : in_addr , pub imr_interface : in_addr , } # [allow (clippy :: unnecessary_operation , clippy :: identity_op)] const _ : () = { ["Size of ip_mreq"] [:: std :: mem :: size_of :: < ip_mreq > () - 8usize] ; ["Alignment of ip_mreq"] [:: std :: mem :: align_of :: < ip_mreq > () - 4usize] ; ["Offset of field: ip_mreq::imr_multiaddr"] [:: std :: mem :: offset_of ! (ip_mreq , imr_multiaddr) - 0usize] ; ["Offset of field: ip_mreq::imr_interface"] [:: std :: mem :: offset_of ! (ip_mreq , imr_interface) - 4usize] ; } ; # [repr (C)] # [derive (Debug , Copy , Clone)] pub struct ip_mreqn { pub imr_multiaddr : in_addr , pub imr_address : in_addr , pub imr_ifindex : :: std :: os :: raw :: c_int , } # [allow (clippy :: unnecessary_operation , clippy :: identity_op)] const _ : () = { ["Size of ip_mreqn"] [:: std :: mem :: size_of :: < ip_mreqn > () - 12usize] ; ["Alignment of ip_mreqn"] [:: std :: mem :: align_of :: < ip_mreqn > () - 4usize] ; ["Offset of field: ip_mreqn::imr_multiaddr"] [:: std :: mem :: offset_of ! (ip_mreqn , imr_multiaddr) - 0usize] ; ["Offset of field: ip_mreqn::imr_address"] [:: std :: mem :: offset_of ! (ip_mreqn , imr_address) - 4usize] ; ["Offset of field: ip_mreqn::imr_ifindex"] [:: std :: mem :: offset_of ! (ip_mreqn , imr_ifindex) - 8usize] ; } ; # [repr (C)] # [derive (Copy , Clone)] pub struct in6_addr { pub __u6_addr : in6_addr__bindgen_ty_1 , } # [repr (C)] # [derive (Copy , Clone)] pub union in6_addr__bindgen_ty_1 { pub __u6_addr8 : [u_int8_t ; 16usize] , pub __u6_addr16 : [u_int16_t ; 8usize] , pub __u6_addr32 : [u_int32_t ; 4usize] , } # [allow (clippy :: unnecessary_operation , clippy :: identity_op)] const _ : () = { ["Size of in6_addr__bindgen_ty_1"] [:: std :: mem :: size_of :: < in6_addr__bindgen_ty_1 > () - 16usize] ; ["Alignment of in6_addr__bindgen_ty_1"] [:: std :: mem :: align_of :: < in6_addr__bindgen_ty_1 > () - 4usize] ; ["Offset of field: in6_addr__bindgen_ty_1::__u6_addr8"] [:: std :: mem :: offset_of ! (in6_addr__bindgen_ty_1 , __u6_addr8) - 0usize] ; ["Offset of field: in6_addr__bindgen_ty_1::__u6_addr16"] [:: std :: mem :: offset_of ! (in6_addr__bindgen_ty_1 , __u6_addr16) - 0usize] ; ["Offset of field: in6_addr__bindgen_ty_1::__u6_addr32"] [:: std :: mem :: offset_of ! (in6_addr__bindgen_ty_1 , __u6_addr32) - 0usize] ; } ; # [allow (clippy :: unnecessary_operation , clippy :: identity_op)] const _ : () = { ["Size of in6_addr"] [:: std :: mem :: size_of :: < in6_addr > () - 16usize] ; ["Alignment of in6_addr"] [:: std :: mem :: align_of :: < in6_addr > () - 4usize] ; ["Offset of field: in6_addr::__u6_addr"] [:: std :: mem :: offset_of ! (in6_addr , __u6_addr) - 0usize] ; } ; # [repr (C)] # [derive (Copy , Clone)] pub struct sockaddr_in6 { pub sin6_len : u_int8_t , pub sin6_family : sa_family_t , pub sin6_port : in_port_t , pub sin6_flowinfo : u_int32_t , pub sin6_addr : in6_addr , pub sin6_scope_id : u_int32_t , } # [allow (clippy :: unnecessary_operation , clippy :: identity_op)] const _ : () = { ["Size of sockaddr_in6"] [:: std :: mem :: size_of :: < sockaddr_in6 > () - 28usize] ; ["Alignment of sockaddr_in6"] [:: std :: mem :: align_of :: < sockaddr_in6 > () - 4usize] ; ["Offset of field: sockaddr_in6::sin6_len"] [:: std :: mem :: offset_of ! (sockaddr_in6 , sin6_len) - 0usize] ; ["Offset of field: sockaddr_in6::sin6_family"] [:: std :: mem :: offset_of ! (sockaddr_in6 , sin6_family) - 1usize] ; ["Offset of field: sockaddr_in6::sin6_port"] [:: std :: mem :: offset_of ! (sockaddr_in6 , sin6_port) - 2usize] ; ["Offset of field: sockaddr_in6::sin6_flowinfo"] [:: std :: mem :: offset_of ! (sockaddr_in6 , sin6_flowinfo) - 4usize] ; ["Offset of field: sockaddr_in6::sin6_addr"] [:: std :: mem :: offset_of ! (sockaddr_in6 , sin6_addr) - 8usize] ; ["Offset of field: sockaddr_in6::sin6_scope_id"] [:: std :: mem :: offset_of ! (sockaddr_in6 , sin6_scope_id) - 24usize] ; } ; unsafe extern "C" { pub static in6addr_any : in6_addr ; } unsafe extern "C" { pub static in6addr_loopback : in6_addr ; } unsafe extern "C" { pub static in6addr_intfacelocal_allnodes : in6_addr ; } unsafe extern "C" { pub static in6addr_linklocal_allnodes : in6_addr ; } unsafe extern "C" { pub static in6addr_linklocal_allrouters : in6_addr ; } # [repr (C)] # [derive (Copy , Clone)] pub struct ipv6_mreq { pub ipv6mr_multiaddr : in6_addr , pub ipv6mr_interface : :: std :: os :: raw :: c_uint , } # [allow (clippy :: unnecessary_operation , clippy :: identity_op)] const _ : () = { ["Size of ipv6_mreq"] [:: std :: mem :: size_of :: < ipv6_mreq > () - 20usize] ; ["Alignment of ipv6_mreq"] [:: std :: mem :: align_of :: < ipv6_mreq > () - 4usize] ; ["Offset of field: ipv6_mreq::ipv6mr_multiaddr"] [:: std :: mem :: offset_of ! (ipv6_mreq , ipv6mr_multiaddr) - 0usize] ; ["Offset of field: ipv6_mreq::ipv6mr_interface"] [:: std :: mem :: offset_of ! (ipv6_mreq , ipv6mr_interface) - 16usize] ; } ; # [repr (C)] # [derive (Copy , Clone)] pub struct in6_pktinfo { pub ipi6_addr : in6_addr , pub ipi6_ifindex : :: std :: os :: raw :: c_uint , } # [allow (clippy :: unnecessary_operation , clippy :: identity_op)] const _ : () = { ["Size of in6_pktinfo"] [:: std :: mem :: size_of :: < in6_pktinfo > () - 20usize] ; ["Alignment of in6_pktinfo"] [:: std :: mem :: align_of :: < in6_pktinfo > () - 4usize] ; ["Offset of field: in6_pktinfo::ipi6_addr"] [:: std :: mem :: offset_of ! (in6_pktinfo , ipi6_addr) - 0usize] ; ["Offset of field: in6_pktinfo::ipi6_ifindex"] [:: std :: mem :: offset_of ! (in6_pktinfo , ipi6_ifindex) - 16usize] ; } ; # [repr (C)] # [derive (Copy , Clone)] pub struct ip6_mtuinfo { pub ip6m_addr : sockaddr_in6 , pub ip6m_mtu : u_int32_t , } # [allow (clippy :: unnecessary_operation , clippy :: identity_op)] const _ : () = { ["Size of ip6_mtuinfo"] [:: std :: mem :: size_of :: < ip6_mtuinfo > () - 32usize] ; ["Alignment of ip6_mtuinfo"] [:: std :: mem :: align_of :: < ip6_mtuinfo > () - 4usize] ; ["Offset of field: ip6_mtuinfo::ip6m_addr"] [:: std :: mem :: offset_of ! (ip6_mtuinfo , ip6m_addr) - 0usize] ; ["Offset of field: ip6_mtuinfo::ip6m_mtu"] [:: std :: mem :: offset_of ! (ip6_mtuinfo , ip6m_mtu) - 28usize] ; } ; unsafe extern "C" { pub fn inet6_opt_init (arg1 : * mut :: std :: os :: raw :: c_void , arg2 : socklen_t) -> :: std :: os :: raw :: c_int ; } unsafe extern "C" { pub fn inet6_opt_append (arg1 : * mut :: std :: os :: raw :: c_void , arg2 : socklen_t , arg3 : :: std :: os :: raw :: c_int , arg4 : u_int8_t , arg5 : socklen_t , arg6 : u_int8_t , arg7 : * mut * mut :: std :: os :: raw :: c_void) -> :: std :: os :: raw :: c_int ; } unsafe extern "C" { pub fn inet6_opt_finish (arg1 : * mut :: std :: os :: raw :: c_void , arg2 : socklen_t , arg3 : :: std :: os :: raw :: c_int) -> :: std :: os :: raw :: c_int ; } unsafe extern "C" { pub fn inet6_opt_set_val (arg1 : * mut :: std :: os :: raw :: c_void , arg2 : :: std :: os :: raw :: c_int , arg3 : * mut :: std :: os :: raw :: c_void , arg4 : socklen_t) -> :: std :: os :: raw :: c_int ; } unsafe extern "C" { pub fn inet6_opt_next (arg1 : * mut :: std :: os :: raw :: c_void , arg2 : socklen_t , arg3 : :: std :: os :: raw :: c_int , arg4 : * mut u_int8_t , arg5 : * mut socklen_t , arg6 : * mut * mut :: std :: os :: raw :: c_void) -> :: std :: os :: raw :: c_int ; } unsafe extern "C" { pub fn inet6_opt_find (arg1 : * mut :: std :: os :: raw :: c_void , arg2 : socklen_t , arg3 : :: std :: os :: raw :: c_int , arg4 : u_int8_t , arg5 : * mut socklen_t , arg6 : * mut * mut :: std :: os :: raw :: c_void) -> :: std :: os :: raw :: c_int ; } unsafe extern "C" { pub fn inet6_opt_get_val (arg1 : * mut :: std :: os :: raw :: c_void , arg2 : :: std :: os :: raw :: c_int , arg3 : * mut :: std :: os :: raw :: c_void , arg4 : socklen_t) -> :: std :: os :: raw :: c_int ; } unsafe extern "C" { pub fn inet6_rth_space (arg1 : :: std :: os :: raw :: c_int , arg2 : :: std :: os :: raw :: c_int) -> socklen_t ; } unsafe extern "C" { pub fn inet6_rth_init (arg1 : * mut :: std :: os :: raw :: c_void , arg2 : socklen_t , arg3 : :: std :: os :: raw :: c_int , arg4 : :: std :: os :: raw :: c_int) -> * mut :: std :: os :: raw :: c_void ; } unsafe extern "C" { pub fn inet6_rth_add (arg1 : * mut :: std :: os :: raw :: c_void , arg2 : * const in6_addr) -> :: std :: os :: raw :: c_int ; } unsafe extern "C" { pub fn inet6_rth_reverse (arg1 : * const :: std :: os :: raw :: c_void , arg2 : * mut :: std :: os :: raw :: c_void) -> :: std :: os :: raw :: c_int ; } unsafe extern "C" { pub fn inet6_rth_segments (arg1 : * const :: std :: os :: raw :: c_void) -> :: std :: os :: raw :: c_int ; } unsafe extern "C" { pub fn inet6_rth_getaddr (arg1 : * const :: std :: os :: raw :: c_void , arg2 : :: std :: os :: raw :: c_int) -> * mut in6_addr ; } unsafe extern "C" { pub fn bindresvport (arg1 : :: std :: os :: raw :: c_int , arg2 : * mut sockaddr_in) -> :: std :: os :: raw :: c_int ; } unsafe extern "C" { pub fn bindresvport_sa (arg1 : :: std :: os :: raw :: c_int , arg2 : * mut sockaddr) -> :: std :: os :: raw :: c_int ; } unsafe extern "C" { pub fn inet_addr (arg1 : * const :: std :: os :: raw :: c_char) -> in_addr_t ; } unsafe extern "C" { pub fn inet_ntoa (arg1 : in_addr) -> * mut :: std :: os :: raw :: c_char ; } unsafe extern "C" { pub fn inet_ntop (arg1 : :: std :: os :: raw :: c_int , arg2 : * const :: std :: os :: raw :: c_void , arg3 : * mut :: std :: os :: raw :: c_char , arg4 : socklen_t) -> * const :: std :: os :: raw :: c_char ; } unsafe extern "C" { pub fn inet_pton (arg1 : :: std :: os :: raw :: c_int , arg2 : * const :: std :: os :: raw :: c_char , arg3 : * mut :: std :: os :: raw :: c_void) -> :: std :: os :: raw :: c_int ; } unsafe extern "C" { pub fn inet_aton (arg1 : * const :: std :: os :: raw :: c_char , arg2 : * mut in_addr) -> :: std :: os :: raw :: c_int ; } unsafe extern "C" { pub fn inet_lnaof (arg1 : in_addr) -> in_addr_t ; } unsafe extern "C" { pub fn inet_makeaddr (arg1 : in_addr_t , arg2 : in_addr_t) -> in_addr ; } unsafe extern "C" { pub fn inet_neta (arg1 : in_addr_t , arg2 : * mut :: std :: os :: raw :: c_char , arg3 : usize) -> * mut :: std :: os :: raw :: c_char ; } unsafe extern "C" { pub fn inet_netof (arg1 : in_addr) -> in_addr_t ; } unsafe extern "C" { pub fn inet_network (arg1 : * const :: std :: os :: raw :: c_char) -> in_addr_t ; } unsafe extern "C" { pub fn inet_net_ntop (arg1 : :: std :: os :: raw :: c_int , arg2 : * const :: std :: os :: raw :: c_void , arg3 : :: std :: os :: raw :: c_int , arg4 : * mut :: std :: os :: raw :: c_char , arg5 : usize) -> * mut :: std :: os :: raw :: c_char ; } unsafe extern "C" { pub fn inet_net_pton (arg1 : :: std :: os :: raw :: c_int , arg2 : * const :: std :: os :: raw :: c_char , arg3 : * mut :: std :: os :: raw :: c_void , arg4 : usize) -> :: std :: os :: raw :: c_int ; } # [repr (C)] # [derive (Debug , Copy , Clone)] pub struct rt_metrics { pub rmx_pksent : u_int64_t , pub rmx_expire : i64 , pub rmx_locks : u_int , pub rmx_mtu : u_int , pub rmx_refcnt : u_int , pub rmx_hopcount : u_int , pub rmx_recvpipe : u_int , pub rmx_sendpipe : u_int , pub rmx_ssthresh : u_int , pub rmx_rtt : u_int , pub rmx_rttvar : u_int , pub rmx_pad : u_int , } # [allow (clippy :: unnecessary_operation , clippy :: identity_op)] const _ : () = { ["Size of rt_metrics"] [:: std :: mem :: size_of :: < rt_metrics > () - 56usize] ; ["Alignment of rt_metrics"] [:: std :: mem :: align_of :: < rt_metrics > () - 8usize] ; ["Offset of field: rt_metrics::rmx_pksent"] [:: std :: mem :: offset_of ! (rt_metrics , rmx_pksent) - 0usize] ; ["Offset of field: rt_metrics::rmx_expire"] [:: std :: mem :: offset_of ! (rt_metrics , rmx_expire) - 8usize] ; ["Offset of field: rt_metrics::rmx_locks"] [:: std :: mem :: offset_of ! (rt_metrics , rmx_locks) - 16usize] ; ["Offset of field: rt_metrics::rmx_mtu"] [:: std :: mem :: offset_of ! (rt_metrics , rmx_mtu) - 20usize] ; ["Offset of field: rt_metrics::rmx_refcnt"] [:: std :: mem :: offset_of ! (rt_metrics , rmx_refcnt) - 24usize] ; ["Offset of field: rt_metrics::rmx_hopcount"] [:: std :: mem :: offset_of ! (rt_metrics , rmx_hopcount) - 28usize] ; ["Offset of field: rt_metrics::rmx_recvpipe"] [:: std :: mem :: offset_of ! (rt_metrics , rmx_recvpipe) - 32usize] ; ["Offset of field: rt_metrics::rmx_sendpipe"] [:: std :: mem :: offset_of ! (rt_metrics , rmx_sendpipe) - 36usize] ; ["Offset of field: rt_metrics::rmx_ssthresh"] [:: std :: mem :: offset_of ! (rt_metrics , rmx_ssthresh) - 40usize] ; ["Offset of field: rt_metrics::rmx_rtt"] [:: std :: mem :: offset_of ! (rt_metrics , rmx_rtt) - 44usize] ; ["Offset of field: rt_metrics::rmx_rttvar"] [:: std :: mem :: offset_of ! (rt_metrics , rmx_rttvar) - 48usize] ; ["Offset of field: rt_metrics::rmx_pad"] [:: std :: mem :: offset_of ! (rt_metrics , rmx_pad) - 52usize] ; } ; # [repr (C)] # [derive (Debug , Copy , Clone)] pub struct rtstat { pub rts_badredirect : u_int32_t , pub rts_dynamic : u_int32_t , pub rts_newgateway : u_int32_t , pub rts_unreach : u_int32_t , pub rts_wildcard : u_int32_t , } # [allow (clippy :: unnecessary_operation , clippy :: identity_op)] const _ : () = { ["Size of rtstat"] [:: std :: mem :: size_of :: < rtstat > () - 20usize] ; ["Alignment of rtstat"] [:: std :: mem :: align_of :: < rtstat > () - 4usize] ; ["Offset of field: rtstat::rts_badredirect"] [:: std :: mem :: offset_of ! (rtstat , rts_badredirect) - 0usize] ; ["Offset of field: rtstat::rts_dynamic"] [:: std :: mem :: offset_of ! (rtstat , rts_dynamic) - 4usize] ; ["Offset of field: rtstat::rts_newgateway"] [:: std :: mem :: offset_of ! (rtstat , rts_newgateway) - 8usize] ; ["Offset of field: rtstat::rts_unreach"] [:: std :: mem :: offset_of ! (rtstat , rts_unreach) - 12usize] ; ["Offset of field: rtstat::rts_wildcard"] [:: std :: mem :: offset_of ! (rtstat , rts_wildcard) - 16usize] ; } ; # [repr (C)] # [derive (Debug , Copy , Clone)] pub struct rt_tableinfo { pub rti_tableid : u_short , pub rti_domainid : u_short , } # [allow (clippy :: unnecessary_operation , clippy :: identity_op)] const _ : () = { ["Size of rt_tableinfo"] [:: std :: mem :: size_of :: < rt_tableinfo > () - 4usize] ; ["Alignment of rt_tableinfo"] [:: std :: mem :: align_of :: < rt_tableinfo > () - 2usize] ; ["Offset of field: rt_tableinfo::rti_tableid"] [:: std :: mem :: offset_of ! (rt_tableinfo , rti_tableid) - 0usize] ; ["Offset of field: rt_tableinfo::rti_domainid"] [:: std :: mem :: offset_of ! (rt_tableinfo , rti_domainid) - 2usize] ; } ; # [repr (C)] # [derive (Debug , Copy , Clone)] pub struct rt_msghdr { pub rtm_msglen : u_short , pub rtm_version : u_char , pub rtm_type : u_char , pub rtm_hdrlen : u_short , pub rtm_index : u_short , pub rtm_tableid : u_short , pub rtm_priority : u_char , pub rtm_mpls : u_char , pub rtm_addrs : :: std :: os :: raw :: c_int , pub rtm_flags : :: std :: os :: raw :: c_int , pub rtm_fmask : :: std :: os :: raw :: c_int , pub rtm_pid : pid_t , pub rtm_seq : :: std :: os :: raw :: c_int , pub rtm_errno : :: std :: os :: raw :: c_int , pub rtm_inits : u_int , pub rtm_rmx : rt_metrics , } # [allow (clippy :: unnecessary_operation , clippy :: identity_op)] const _ : () = { ["Size of rt_msghdr"] [:: std :: mem :: size_of :: < rt_msghdr > () - 96usize] ; ["Alignment of rt_msghdr"] [:: std :: mem :: align_of :: < rt_msghdr > () - 8usize] ; ["Offset of field: rt_msghdr::rtm_msglen"] [:: std :: mem :: offset_of ! (rt_msghdr , rtm_msglen) - 0usize] ; ["Offset of field: rt_msghdr::rtm_version"] [:: std :: mem :: offset_of ! (rt_msghdr , rtm_version) - 2usize] ; ["Offset of field: rt_msghdr::rtm_type"] [:: std :: mem :: offset_of ! (rt_msghdr , rtm_type) - 3usize] ; ["Offset of field: rt_msghdr::rtm_hdrlen"] [:: std :: mem :: offset_of ! (rt_msghdr , rtm_hdrlen) - 4usize] ; ["Offset of field: rt_msghdr::rtm_index"] [:: std :: mem :: offset_of ! (rt_msghdr , rtm_index) - 6usize] ; ["Offset of field: rt_msghdr::rtm_tableid"] [:: std :: mem :: offset_of ! (rt_msghdr , rtm_tableid) - 8usize] ; ["Offset of field: rt_msghdr::rtm_priority"] [:: std :: mem :: offset_of ! (rt_msghdr , rtm_priority) - 10usize] ; ["Offset of field: rt_msghdr::rtm_mpls"] [:: std :: mem :: offset_of ! (rt_msghdr , rtm_mpls) - 11usize] ; ["Offset of field: rt_msghdr::rtm_addrs"] [:: std :: mem :: offset_of ! (rt_msghdr , rtm_addrs) - 12usize] ; ["Offset of field: rt_msghdr::rtm_flags"] [:: std :: mem :: offset_of ! (rt_msghdr , rtm_flags) - 16usize] ; ["Offset of field: rt_msghdr::rtm_fmask"] [:: std :: mem :: offset_of ! (rt_msghdr , rtm_fmask) - 20usize] ; ["Offset of field: rt_msghdr::rtm_pid"] [:: std :: mem :: offset_of ! (rt_msghdr , rtm_pid) - 24usize] ; ["Offset of field: rt_msghdr::rtm_seq"] [:: std :: mem :: offset_of ! (rt_msghdr , rtm_seq) - 28usize] ; ["Offset of field: rt_msghdr::rtm_errno"] [:: std :: mem :: offset_of ! (rt_msghdr , rtm_errno) - 32usize] ; ["Offset of field: rt_msghdr::rtm_inits"] [:: std :: mem :: offset_of ! (rt_msghdr , rtm_inits) - 36usize] ; ["Offset of field: rt_msghdr::rtm_rmx"] [:: std :: mem :: offset_of ! (rt_msghdr , rtm_rmx) - 40usize] ; } ; # [repr (C)] # [derive (Debug , Copy , Clone)] pub struct sockaddr_rtlabel { pub sr_len : u_int8_t , pub sr_family : sa_family_t , pub sr_label : [:: std :: os :: raw :: c_char ; 32usize] , } # [allow (clippy :: unnecessary_operation , clippy :: identity_op)] const _ : () = { ["Size of sockaddr_rtlabel"] [:: std :: mem :: size_of :: < sockaddr_rtlabel > () - 34usize] ; ["Alignment of sockaddr_rtlabel"] [:: std :: mem :: align_of :: < sockaddr_rtlabel > () - 1usize] ; ["Offset of field: sockaddr_rtlabel::sr_len"] [:: std :: mem :: offset_of ! (sockaddr_rtlabel , sr_len) - 0usize] ; ["Offset of field: sockaddr_rtlabel::sr_family"] [:: std :: mem :: offset_of ! (sockaddr_rtlabel , sr_family) - 1usize] ; ["Offset of field: sockaddr_rtlabel::sr_label"] [:: std :: mem :: offset_of ! (sockaddr_rtlabel , sr_label) - 2usize] ; } ; # [repr (C)] # [derive (Debug , Copy , Clone)] pub struct sockaddr_rtdns { pub sr_len : u_int8_t , pub sr_family : sa_family_t , pub sr_dns : [:: std :: os :: raw :: c_char ; 128usize] , } # [allow (clippy :: unnecessary_operation , clippy :: identity_op)] const _ : () = { ["Size of sockaddr_rtdns"] [:: std :: mem :: size_of :: < sockaddr_rtdns > () - 130usize] ; ["Alignment of sockaddr_rtdns"] [:: std :: mem :: align_of :: < sockaddr_rtdns > () - 1usize] ; ["Offset of field: sockaddr_rtdns::sr_len"] [:: std :: mem :: offset_of ! (sockaddr_rtdns , sr_len) - 0usize] ; ["Offset of field: sockaddr_rtdns::sr_family"] [:: std :: mem :: offset_of ! (sockaddr_rtdns , sr_family) - 1usize] ; ["Offset of field: sockaddr_rtdns::sr_dns"] [:: std :: mem :: offset_of ! (sockaddr_rtdns , sr_dns) - 2usize] ; } ; # [repr (C)] # [derive (Debug , Copy , Clone)] pub struct sockaddr_rtstatic { pub sr_len : u_int8_t , pub sr_family : sa_family_t , pub sr_static : [:: std :: os :: raw :: c_char ; 128usize] , } # [allow (clippy :: unnecessary_operation , clippy :: identity_op)] const _ : () = { ["Size of sockaddr_rtstatic"] [:: std :: mem :: size_of :: < sockaddr_rtstatic > () - 130usize] ; ["Alignment of sockaddr_rtstatic"] [:: std :: mem :: align_of :: < sockaddr_rtstatic > () - 1usize] ; ["Offset of field: sockaddr_rtstatic::sr_len"] [:: std :: mem :: offset_of ! (sockaddr_rtstatic , sr_len) - 0usize] ; ["Offset of field: sockaddr_rtstatic::sr_family"] [:: std :: mem :: offset_of ! (sockaddr_rtstatic , sr_family) - 1usize] ; ["Offset of field: sockaddr_rtstatic::sr_static"] [:: std :: mem :: offset_of ! (sockaddr_rtstatic , sr_static) - 2usize] ; } ; # [repr (C)] # [derive (Debug , Copy , Clone)] pub struct sockaddr_rtsearch { pub sr_len : u_int8_t , pub sr_family : sa_family_t , pub sr_search : [:: std :: os :: raw :: c_char ; 128usize] , } # [allow (clippy :: unnecessary_operation , clippy :: identity_op)] const _ : () = { ["Size of sockaddr_rtsearch"] [:: std :: mem :: size_of :: < sockaddr_rtsearch > () - 130usize] ; ["Alignment of sockaddr_rtsearch"] [:: std :: mem :: align_of :: < sockaddr_rtsearch > () - 1usize] ; ["Offset of field: sockaddr_rtsearch::sr_len"] [:: std :: mem :: offset_of ! (sockaddr_rtsearch , sr_len) - 0usize] ; ["Offset of field: sockaddr_rtsearch::sr_family"] [:: std :: mem :: offset_of ! (sockaddr_rtsearch , sr_family) - 1usize] ; ["Offset of field: sockaddr_rtsearch::sr_search"] [:: std :: mem :: offset_of ! (sockaddr_rtsearch , sr_search) - 2usize] ; } ; # [repr (C)] # [derive (Debug , Copy , Clone)] pub struct rt_addrinfo { pub rti_addrs : :: std :: os :: raw :: c_int , pub rti_info : [* const sockaddr ; 15usize] , pub rti_flags : :: std :: os :: raw :: c_int , pub rti_ifa : * mut ifaddr , pub rti_rtm : * mut rt_msghdr , pub rti_mpls : u_char , } # [allow (clippy :: unnecessary_operation , clippy :: identity_op)] const _ : () = { ["Size of rt_addrinfo"] [:: std :: mem :: size_of :: < rt_addrinfo > () - 160usize] ; ["Alignment of rt_addrinfo"] [:: std :: mem :: align_of :: < rt_addrinfo > () - 8usize] ; ["Offset of field: rt_addrinfo::rti_addrs"] [:: std :: mem :: offset_of ! (rt_addrinfo , rti_addrs) - 0usize] ; ["Offset of field: rt_addrinfo::rti_info"] [:: std :: mem :: offset_of ! (rt_addrinfo , rti_info) - 8usize] ; ["Offset of field: rt_addrinfo::rti_flags"] [:: std :: mem :: offset_of ! (rt_addrinfo , rti_flags) - 128usize] ; ["Offset of field: rt_addrinfo::rti_ifa"] [:: std :: mem :: offset_of ! (rt_addrinfo , rti_ifa) - 136usize] ; ["Offset of field: rt_addrinfo::rti_rtm"] [:: std :: mem :: offset_of ! (rt_addrinfo , rti_rtm) - 144usize] ; ["Offset of field: rt_addrinfo::rti_mpls"] [:: std :: mem :: offset_of ! (rt_addrinfo , rti_mpls) - 152usize] ; } ; # [repr (C)] # [derive (Copy , Clone)] pub struct route { pub ro_rt : * mut rtentry , pub ro_generation : u_long , pub ro_tableid : u_long , pub __bindgen_anon_1 : route__bindgen_ty_1 , pub __bindgen_anon_2 : route__bindgen_ty_2 , } # [repr (C)] # [derive (Copy , Clone)] pub union route__bindgen_ty_1 { pub ro_dstsa : sockaddr , pub ro_dstsin : sockaddr_in , pub ro_dstsin6 : sockaddr_in6 , } # [allow (clippy :: unnecessary_operation , clippy :: identity_op)] const _ : () = { ["Size of route__bindgen_ty_1"] [:: std :: mem :: size_of :: < route__bindgen_ty_1 > () - 28usize] ; ["Alignment of route__bindgen_ty_1"] [:: std :: mem :: align_of :: < route__bindgen_ty_1 > () - 4usize] ; ["Offset of field: route__bindgen_ty_1::ro_dstsa"] [:: std :: mem :: offset_of ! (route__bindgen_ty_1 , ro_dstsa) - 0usize] ; ["Offset of field: route__bindgen_ty_1::ro_dstsin"] [:: std :: mem :: offset_of ! (route__bindgen_ty_1 , ro_dstsin) - 0usize] ; ["Offset of field: route__bindgen_ty_1::ro_dstsin6"] [:: std :: mem :: offset_of ! (route__bindgen_ty_1 , ro_dstsin6) - 0usize] ; } ; # [repr (C)] # [derive (Copy , Clone)] pub union route__bindgen_ty_2 { pub ro_srcin : in_addr , pub ro_srcin6 : in6_addr , } # [allow (clippy :: unnecessary_operation , clippy :: identity_op)] const _ : () = { ["Size of route__bindgen_ty_2"] [:: std :: mem :: size_of :: < route__bindgen_ty_2 > () - 16usize] ; ["Alignment of route__bindgen_ty_2"] [:: std :: mem :: align_of :: < route__bindgen_ty_2 > () - 4usize] ; ["Offset of field: route__bindgen_ty_2::ro_srcin"] [:: std :: mem :: offset_of ! (route__bindgen_ty_2 , ro_srcin) - 0usize] ; ["Offset of field: route__bindgen_ty_2::ro_srcin6"] [:: std :: mem :: offset_of ! (route__bindgen_ty_2 , ro_srcin6) - 0usize] ; } ; # [allow (clippy :: unnecessary_operation , clippy :: identity_op)] const _ : () = { ["Size of route"] [:: std :: mem :: size_of :: < route > () - 72usize] ; ["Alignment of route"] [:: std :: mem :: align_of :: < route > () - 8usize] ; ["Offset of field: route::ro_rt"] [:: std :: mem :: offset_of ! (route , ro_rt) - 0usize] ; ["Offset of field: route::ro_generation"] [:: std :: mem :: offset_of ! (route , ro_generation) - 8usize] ; ["Offset of field: route::ro_tableid"] [:: std :: mem :: offset_of ! (route , ro_tableid) - 16usize] ; } ; # [repr (C)] # [derive (Debug , Copy , Clone)] pub struct sockaddr_dl { pub sdl_len : u_char , pub sdl_family : u_char , pub sdl_index : u_int16_t , pub sdl_type : u_char , pub sdl_nlen : u_char , pub sdl_alen : u_char , pub sdl_slen : u_char , pub sdl_data : [:: std :: os :: raw :: c_char ; 24usize] , } # [allow (clippy :: unnecessary_operation , clippy :: identity_op)] const _ : () = { ["Size of sockaddr_dl"] [:: std :: mem :: size_of :: < sockaddr_dl > () - 32usize] ; ["Alignment of sockaddr_dl"] [:: std :: mem :: align_of :: < sockaddr_dl > () - 2usize] ; ["Offset of field: sockaddr_dl::sdl_len"] [:: std :: mem :: offset_of ! (sockaddr_dl , sdl_len) - 0usize] ; ["Offset of field: sockaddr_dl::sdl_family"] [:: std :: mem :: offset_of ! (sockaddr_dl , sdl_family) - 1usize] ; ["Offset of field: sockaddr_dl::sdl_index"] [:: std :: mem :: offset_of ! (sockaddr_dl , sdl_index) - 2usize] ; ["Offset of field: sockaddr_dl::sdl_type"] [:: std :: mem :: offset_of ! (sockaddr_dl , sdl_type) - 4usize] ; ["Offset of field: sockaddr_dl::sdl_nlen"] [:: std :: mem :: offset_of ! (sockaddr_dl , sdl_nlen) - 5usize] ; ["Offset of field: sockaddr_dl::sdl_alen"] [:: std :: mem :: offset_of ! (sockaddr_dl , sdl_alen) - 6usize] ; ["Offset of field: sockaddr_dl::sdl_slen"] [:: std :: mem :: offset_of ! (sockaddr_dl , sdl_slen) - 7usize] ; ["Offset of field: sockaddr_dl::sdl_data"] [:: std :: mem :: offset_of ! (sockaddr_dl , sdl_data) - 8usize] ; } ; unsafe extern "C" { pub fn link_ntoa (arg1 : * const sockaddr_dl) -> * mut :: std :: os :: raw :: c_char ; } # [repr (C)] # [derive (Debug , Copy , Clone)] pub struct if_nameindex { pub if_index : :: std :: os :: raw :: c_uint , pub if_name : * mut :: std :: os :: raw :: c_char , } # [allow (clippy :: unnecessary_operation , clippy :: identity_op)] const _ : () = { ["Size of if_nameindex"] [:: std :: mem :: size_of :: < if_nameindex > () - 16usize] ; ["Alignment of if_nameindex"] [:: std :: mem :: align_of :: < if_nameindex > () - 8usize] ; ["Offset of field: if_nameindex::if_index"] [:: std :: mem :: offset_of ! (if_nameindex , if_index) - 0usize] ; ["Offset of field: if_nameindex::if_name"] [:: std :: mem :: offset_of ! (if_nameindex , if_name) - 8usize] ; } ; unsafe extern "C" { pub fn if_nametoindex (arg1 : * const :: std :: os :: raw :: c_char) -> :: std :: os :: raw :: c_uint ; } unsafe extern "C" { pub fn if_indextoname (arg1 : :: std :: os :: raw :: c_uint , arg2 : * mut :: std :: os :: raw :: c_char) -> * mut :: std :: os :: raw :: c_char ; } unsafe extern "C" { pub fn if_nameindex () -> * mut if_nameindex ; } unsafe extern "C" { pub fn if_freenameindex (arg1 : * mut if_nameindex) ; } # [repr (C)] # [derive (Debug , Copy , Clone)] pub struct if_clonereq { pub ifcr_total : :: std :: os :: raw :: c_int , pub ifcr_count : :: std :: os :: raw :: c_int , pub ifcr_buffer : * mut :: std :: os :: raw :: c_char , } # [allow (clippy :: unnecessary_operation , clippy :: identity_op)] const _ : () = { ["Size of if_clonereq"] [:: std :: mem :: size_of :: < if_clonereq > () - 16usize] ; ["Alignment of if_clonereq"] [:: std :: mem :: align_of :: < if_clonereq > () - 8usize] ; ["Offset of field: if_clonereq::ifcr_total"] [:: std :: mem :: offset_of ! (if_clonereq , ifcr_total) - 0usize] ; ["Offset of field: if_clonereq::ifcr_count"] [:: std :: mem :: offset_of ! (if_clonereq , ifcr_count) - 4usize] ; ["Offset of field: if_clonereq::ifcr_buffer"] [:: std :: mem :: offset_of ! (if_clonereq , ifcr_buffer) - 8usize] ; } ; # [repr (C)] # [derive (Debug , Copy , Clone)] pub struct if_rxring { pub rxr_adjusted : :: std :: os :: raw :: c_int , pub rxr_alive : u_int , pub rxr_cwm : u_int , pub rxr_lwm : u_int , pub rxr_hwm : u_int , } # [allow (clippy :: unnecessary_operation , clippy :: identity_op)] const _ : () = { ["Size of if_rxring"] [:: std :: mem :: size_of :: < if_rxring > () - 20usize] ; ["Alignment of if_rxring"] [:: std :: mem :: align_of :: < if_rxring > () - 4usize] ; ["Offset of field: if_rxring::rxr_adjusted"] [:: std :: mem :: offset_of ! (if_rxring , rxr_adjusted) - 0usize] ; ["Offset of field: if_rxring::rxr_alive"] [:: std :: mem :: offset_of ! (if_rxring , rxr_alive) - 4usize] ; ["Offset of field: if_rxring::rxr_cwm"] [:: std :: mem :: offset_of ! (if_rxring , rxr_cwm) - 8usize] ; ["Offset of field: if_rxring::rxr_lwm"] [:: std :: mem :: offset_of ! (if_rxring , rxr_lwm) - 12usize] ; ["Offset of field: if_rxring::rxr_hwm"] [:: std :: mem :: offset_of ! (if_rxring , rxr_hwm) - 16usize] ; } ; # [repr (C)] # [derive (Debug , Copy , Clone)] pub struct if_rxring_info { pub ifr_name : [:: std :: os :: raw :: c_char ; 16usize] , pub ifr_size : u_int , pub ifr_info : if_rxring , } # [allow (clippy :: unnecessary_operation , clippy :: identity_op)] const _ : () = { ["Size of if_rxring_info"] [:: std :: mem :: size_of :: < if_rxring_info > () - 40usize] ; ["Alignment of if_rxring_info"] [:: std :: mem :: align_of :: < if_rxring_info > () - 4usize] ; ["Offset of field: if_rxring_info::ifr_name"] [:: std :: mem :: offset_of ! (if_rxring_info , ifr_name) - 0usize] ; ["Offset of field: if_rxring_info::ifr_size"] [:: std :: mem :: offset_of ! (if_rxring_info , ifr_size) - 16usize] ; ["Offset of field: if_rxring_info::ifr_info"] [:: std :: mem :: offset_of ! (if_rxring_info , ifr_info) - 20usize] ; } ; # [repr (C)] # [derive (Debug , Copy , Clone)] pub struct if_rxrinfo { pub ifri_total : u_int , pub ifri_entries : * mut if_rxring_info , } # [allow (clippy :: unnecessary_operation , clippy :: identity_op)] const _ : () = { ["Size of if_rxrinfo"] [:: std :: mem :: size_of :: < if_rxrinfo > () - 16usize] ; ["Alignment of if_rxrinfo"] [:: std :: mem :: align_of :: < if_rxrinfo > () - 8usize] ; ["Offset of field: if_rxrinfo::ifri_total"] [:: std :: mem :: offset_of ! (if_rxrinfo , ifri_total) - 0usize] ; ["Offset of field: if_rxrinfo::ifri_entries"] [:: std :: mem :: offset_of ! (if_rxrinfo , ifri_entries) - 8usize] ; } ; # [repr (C)] # [derive (Debug , Copy , Clone)] pub struct if_data { pub ifi_type : u_char , pub ifi_addrlen : u_char , pub ifi_hdrlen : u_char , pub ifi_link_state : u_char , pub ifi_mtu : u_int32_t , pub ifi_metric : u_int32_t , pub ifi_rdomain : u_int32_t , pub ifi_baudrate : u_int64_t , pub ifi_ipackets : u_int64_t , pub ifi_ierrors : u_int64_t , pub ifi_opackets : u_int64_t , pub ifi_oerrors : u_int64_t , pub ifi_collisions : u_int64_t , pub ifi_ibytes : u_int64_t , pub ifi_obytes : u_int64_t , pub ifi_imcasts : u_int64_t , pub ifi_omcasts : u_int64_t , pub ifi_iqdrops : u_int64_t , pub ifi_oqdrops : u_int64_t , pub ifi_noproto : u_int64_t , pub ifi_capabilities : u_int32_t , pub ifi_lastchange : timeval , } # [allow (clippy :: unnecessary_operation , clippy :: identity_op)] const _ : () = { ["Size of if_data"] [:: std :: mem :: size_of :: < if_data > () - 144usize] ; ["Alignment of if_data"] [:: std :: mem :: align_of :: < if_data > () - 8usize] ; ["Offset of field: if_data::ifi_type"] [:: std :: mem :: offset_of ! (if_data , ifi_type) - 0usize] ; ["Offset of field: if_data::ifi_addrlen"] [:: std :: mem :: offset_of ! (if_data , ifi_addrlen) - 1usize] ; ["Offset of field: if_data::ifi_hdrlen"] [:: std :: mem :: offset_of ! (if_data , ifi_hdrlen) - 2usize] ; ["Offset of field: if_data::ifi_link_state"] [:: std :: mem :: offset_of ! (if_data , ifi_link_state) - 3usize] ; ["Offset of field: if_data::ifi_mtu"] [:: std :: mem :: offset_of ! (if_data , ifi_mtu) - 4usize] ; ["Offset of field: if_data::ifi_metric"] [:: std :: mem :: offset_of ! (if_data , ifi_metric) - 8usize] ; ["Offset of field: if_data::ifi_rdomain"] [:: std :: mem :: offset_of ! (if_data , ifi_rdomain) - 12usize] ; ["Offset of field: if_data::ifi_baudrate"] [:: std :: mem :: offset_of ! (if_data , ifi_baudrate) - 16usize] ; ["Offset of field: if_data::ifi_ipackets"] [:: std :: mem :: offset_of ! (if_data , ifi_ipackets) - 24usize] ; ["Offset of field: if_data::ifi_ierrors"] [:: std :: mem :: offset_of ! (if_data , ifi_ierrors) - 32usize] ; ["Offset of field: if_data::ifi_opackets"] [:: std :: mem :: offset_of ! (if_data , ifi_opackets) - 40usize] ; ["Offset of field: if_data::ifi_oerrors"] [:: std :: mem :: offset_of ! (if_data , ifi_oerrors) - 48usize] ; ["Offset of field: if_data::ifi_collisions"] [:: std :: mem :: offset_of ! (if_data , ifi_collisions) - 56usize] ; ["Offset of field: if_data::ifi_ibytes"] [:: std :: mem :: offset_of ! (if_data , ifi_ibytes) - 64usize] ; ["Offset of field: if_data::ifi_obytes"] [:: std :: mem :: offset_of ! (if_data , ifi_obytes) - 72usize] ; ["Offset of field: if_data::ifi_imcasts"] [:: std :: mem :: offset_of ! (if_data , ifi_imcasts) - 80usize] ; ["Offset of field: if_data::ifi_omcasts"] [:: std :: mem :: offset_of ! (if_data , ifi_omcasts) - 88usize] ; ["Offset of field: if_data::ifi_iqdrops"] [:: std :: mem :: offset_of ! (if_data , ifi_iqdrops) - 96usize] ; ["Offset of field: if_data::ifi_oqdrops"] [:: std :: mem :: offset_of ! (if_data , ifi_oqdrops) - 104usize] ; ["Offset of field: if_data::ifi_noproto"] [:: std :: mem :: offset_of ! (if_data , ifi_noproto) - 112usize] ; ["Offset of field: if_data::ifi_capabilities"] [:: std :: mem :: offset_of ! (if_data , ifi_capabilities) - 120usize] ; ["Offset of field: if_data::ifi_lastchange"] [:: std :: mem :: offset_of ! (if_data , ifi_lastchange) - 128usize] ; } ; # [repr (C)] # [derive (Debug , Copy , Clone)] pub struct if_status_description { pub ifs_type : u_char , pub ifs_state : u_char , pub ifs_string : * const :: std :: os :: raw :: c_char , } # [allow (clippy :: unnecessary_operation , clippy :: identity_op)] const _ : () = { ["Size of if_status_description"] [:: std :: mem :: size_of :: < if_status_description > () - 16usize] ; ["Alignment of if_status_description"] [:: std :: mem :: align_of :: < if_status_description > () - 8usize] ; ["Offset of field: if_status_description::ifs_type"] [:: std :: mem :: offset_of ! (if_status_description , ifs_type) - 0usize] ; ["Offset of field: if_status_description::ifs_state"] [:: std :: mem :: offset_of ! (if_status_description , ifs_state) - 1usize] ; ["Offset of field: if_status_description::ifs_string"] [:: std :: mem :: offset_of ! (if_status_description , ifs_string) - 8usize] ; } ; # [repr (C)] # [derive (Debug , Copy , Clone)] pub struct if_msghdr { pub ifm_msglen : u_short , pub ifm_version : u_char , pub ifm_type : u_char , pub ifm_hdrlen : u_short , pub ifm_index : u_short , pub ifm_tableid : u_short , pub ifm_pad1 : u_char , pub ifm_pad2 : u_char , pub ifm_addrs : :: std :: os :: raw :: c_int , pub ifm_flags : :: std :: os :: raw :: c_int , pub ifm_xflags : :: std :: os :: raw :: c_int , pub ifm_data : if_data , } # [allow (clippy :: unnecessary_operation , clippy :: identity_op)] const _ : () = { ["Size of if_msghdr"] [:: std :: mem :: size_of :: < if_msghdr > () - 168usize] ; ["Alignment of if_msghdr"] [:: std :: mem :: align_of :: < if_msghdr > () - 8usize] ; ["Offset of field: if_msghdr::ifm_msglen"] [:: std :: mem :: offset_of ! (if_msghdr , ifm_msglen) - 0usize] ; ["Offset of field: if_msghdr::ifm_version"] [:: std :: mem :: offset_of ! (if_msghdr , ifm_version) - 2usize] ; ["Offset of field: if_msghdr::ifm_type"] [:: std :: mem :: offset_of ! (if_msghdr , ifm_type) - 3usize] ; ["Offset of field: if_msghdr::ifm_hdrlen"] [:: std :: mem :: offset_of ! (if_msghdr , ifm_hdrlen) - 4usize] ; ["Offset of field: if_msghdr::ifm_index"] [:: std :: mem :: offset_of ! (if_msghdr , ifm_index) - 6usize] ; ["Offset of field: if_msghdr::ifm_tableid"] [:: std :: mem :: offset_of ! (if_msghdr , ifm_tableid) - 8usize] ; ["Offset of field: if_msghdr::ifm_pad1"] [:: std :: mem :: offset_of ! (if_msghdr , ifm_pad1) - 10usize] ; ["Offset of field: if_msghdr::ifm_pad2"] [:: std :: mem :: offset_of ! (if_msghdr , ifm_pad2) - 11usize] ; ["Offset of field: if_msghdr::ifm_addrs"] [:: std :: mem :: offset_of ! (if_msghdr , ifm_addrs) - 12usize] ; ["Offset of field: if_msghdr::ifm_flags"] [:: std :: mem :: offset_of ! (if_msghdr , ifm_flags) - 16usize] ; ["Offset of field: if_msghdr::ifm_xflags"] [:: std :: mem :: offset_of ! (if_msghdr , ifm_xflags) - 20usize] ; ["Offset of field: if_msghdr::ifm_data"] [:: std :: mem :: offset_of ! (if_msghdr , ifm_data) - 24usize] ; } ; # [repr (C)] # [derive (Debug , Copy , Clone)] pub struct ifa_msghdr { pub ifam_msglen : u_short , pub ifam_version : u_char , pub ifam_type : u_char , pub ifam_hdrlen : u_short , pub ifam_index : u_short , pub ifam_tableid : u_short , pub ifam_pad1 : u_char , pub ifam_pad2 : u_char , pub ifam_addrs : :: std :: os :: raw :: c_int , pub ifam_flags : :: std :: os :: raw :: c_int , pub ifam_metric : :: std :: os :: raw :: c_int , } # [allow (clippy :: unnecessary_operation , clippy :: identity_op)] const _ : () = { ["Size of ifa_msghdr"] [:: std :: mem :: size_of :: < ifa_msghdr > () - 24usize] ; ["Alignment of ifa_msghdr"] [:: std :: mem :: align_of :: < ifa_msghdr > () - 4usize] ; ["Offset of field: ifa_msghdr::ifam_msglen"] [:: std :: mem :: offset_of ! (ifa_msghdr , ifam_msglen) - 0usize] ; ["Offset of field: ifa_msghdr::ifam_version"] [:: std :: mem :: offset_of ! (ifa_msghdr , ifam_version) - 2usize] ; ["Offset of field: ifa_msghdr::ifam_type"] [:: std :: mem :: offset_of ! (ifa_msghdr , ifam_type) - 3usize] ; ["Offset of field: ifa_msghdr::ifam_hdrlen"] [:: std :: mem :: offset_of ! (ifa_msghdr , ifam_hdrlen) - 4usize] ; ["Offset of field: ifa_msghdr::ifam_index"] [:: std :: mem :: offset_of ! (ifa_msghdr , ifam_index) - 6usize] ; ["Offset of field: ifa_msghdr::ifam_tableid"] [:: std :: mem :: offset_of ! (ifa_msghdr , ifam_tableid) - 8usize] ; ["Offset of field: ifa_msghdr::ifam_pad1"] [:: std :: mem :: offset_of ! (ifa_msghdr , ifam_pad1) - 10usize] ; ["Offset of field: ifa_msghdr::ifam_pad2"] [:: std :: mem :: offset_of ! (ifa_msghdr , ifam_pad2) - 11usize] ; ["Offset of field: ifa_msghdr::ifam_addrs"] [:: std :: mem :: offset_of ! (ifa_msghdr , ifam_addrs) - 12usize] ; ["Offset of field: ifa_msghdr::ifam_flags"] [:: std :: mem :: offset_of ! (ifa_msghdr , ifam_flags) - 16usize] ; ["Offset of field: ifa_msghdr::ifam_metric"] [:: std :: mem :: offset_of ! (ifa_msghdr , ifam_metric) - 20usize] ; } ; # [repr (C)] # [derive (Debug , Copy , Clone)] pub struct if_announcemsghdr { pub ifan_msglen : u_short , pub ifan_version : u_char , pub ifan_type : u_char , pub ifan_hdrlen : u_short , pub ifan_index : u_short , pub ifan_what : u_short , pub ifan_name : [:: std :: os :: raw :: c_char ; 16usize] , } # [allow (clippy :: unnecessary_operation , clippy :: identity_op)] const _ : () = { ["Size of if_announcemsghdr"] [:: std :: mem :: size_of :: < if_announcemsghdr > () - 26usize] ; ["Alignment of if_announcemsghdr"] [:: std :: mem :: align_of :: < if_announcemsghdr > () - 2usize] ; ["Offset of field: if_announcemsghdr::ifan_msglen"] [:: std :: mem :: offset_of ! (if_announcemsghdr , ifan_msglen) - 0usize] ; ["Offset of field: if_announcemsghdr::ifan_version"] [:: std :: mem :: offset_of ! (if_announcemsghdr , ifan_version) - 2usize] ; ["Offset of field: if_announcemsghdr::ifan_type"] [:: std :: mem :: offset_of ! (if_announcemsghdr , ifan_type) - 3usize] ; ["Offset of field: if_announcemsghdr::ifan_hdrlen"] [:: std :: mem :: offset_of ! (if_announcemsghdr , ifan_hdrlen) - 4usize] ; ["Offset of field: if_announcemsghdr::ifan_index"] [:: std :: mem :: offset_of ! (if_announcemsghdr , ifan_index) - 6usize] ; ["Offset of field: if_announcemsghdr::ifan_what"] [:: std :: mem :: offset_of ! (if_announcemsghdr , ifan_what) - 8usize] ; ["Offset of field: if_announcemsghdr::ifan_name"] [:: std :: mem :: offset_of ! (if_announcemsghdr , ifan_name) - 10usize] ; } ; # [repr (C)] # [derive (Debug , Copy , Clone)] pub struct if_ieee80211_data { pub ifie_channel : u8 , pub ifie_nwid_len : u8 , pub ifie_flags : u32 , pub ifie_xflags : u32 , pub ifie_nwid : [u8 ; 32usize] , pub ifie_addr : [u8 ; 6usize] , } # [allow (clippy :: unnecessary_operation , clippy :: identity_op)] const _ : () = { ["Size of if_ieee80211_data"] [:: std :: mem :: size_of :: < if_ieee80211_data > () - 52usize] ; ["Alignment of if_ieee80211_data"] [:: std :: mem :: align_of :: < if_ieee80211_data > () - 4usize] ; ["Offset of field: if_ieee80211_data::ifie_channel"] [:: std :: mem :: offset_of ! (if_ieee80211_data , ifie_channel) - 0usize] ; ["Offset of field: if_ieee80211_data::ifie_nwid_len"] [:: std :: mem :: offset_of ! (if_ieee80211_data , ifie_nwid_len) - 1usize] ; ["Offset of field: if_ieee80211_data::ifie_flags"] [:: std :: mem :: offset_of ! (if_ieee80211_data , ifie_flags) - 4usize] ; ["Offset of field: if_ieee80211_data::ifie_xflags"] [:: std :: mem :: offset_of ! (if_ieee80211_data , ifie_xflags) - 8usize] ; ["Offset of field: if_ieee80211_data::ifie_nwid"] [:: std :: mem :: offset_of ! (if_ieee80211_data , ifie_nwid) - 12usize] ; ["Offset of field: if_ieee80211_data::ifie_addr"] [:: std :: mem :: offset_of ! (if_ieee80211_data , ifie_addr) - 44usize] ; } ; # [repr (C)] # [derive (Debug , Copy , Clone)] pub struct if_ieee80211_msghdr { pub ifim_msglen : u16 , pub ifim_version : u8 , pub ifim_type : u8 , pub ifim_hdrlen : u16 , pub ifim_index : u16 , pub ifim_tableid : u16 , pub ifim_ifie : if_ieee80211_data , } # [allow (clippy :: unnecessary_operation , clippy :: identity_op)] const _ : () = { ["Size of if_ieee80211_msghdr"] [:: std :: mem :: size_of :: < if_ieee80211_msghdr > () - 64usize] ; ["Alignment of if_ieee80211_msghdr"] [:: std :: mem :: align_of :: < if_ieee80211_msghdr > () - 4usize] ; ["Offset of field: if_ieee80211_msghdr::ifim_msglen"] [:: std :: mem :: offset_of ! (if_ieee80211_msghdr , ifim_msglen) - 0usize] ; ["Offset of field: if_ieee80211_msghdr::ifim_version"] [:: std :: mem :: offset_of ! (if_ieee80211_msghdr , ifim_version) - 2usize] ; ["Offset of field: if_ieee80211_msghdr::ifim_type"] [:: std :: mem :: offset_of ! (if_ieee80211_msghdr , ifim_type) - 3usize] ; ["Offset of field: if_ieee80211_msghdr::ifim_hdrlen"] [:: std :: mem :: offset_of ! (if_ieee80211_msghdr , ifim_hdrlen) - 4usize] ; ["Offset of field: if_ieee80211_msghdr::ifim_index"] [:: std :: mem :: offset_of ! (if_ieee80211_msghdr , ifim_index) - 6usize] ; ["Offset of field: if_ieee80211_msghdr::ifim_tableid"] [:: std :: mem :: offset_of ! (if_ieee80211_msghdr , ifim_tableid) - 8usize] ; ["Offset of field: if_ieee80211_msghdr::ifim_ifie"] [:: std :: mem :: offset_of ! (if_ieee80211_msghdr , ifim_ifie) - 12usize] ; } ; # [repr (C)] # [derive (Debug , Copy , Clone)] pub struct if_nameindex_msg { pub if_index : :: std :: os :: raw :: c_uint , pub if_name : [:: std :: os :: raw :: c_char ; 16usize] , } # [allow (clippy :: unnecessary_operation , clippy :: identity_op)] const _ : () = { ["Size of if_nameindex_msg"] [:: std :: mem :: size_of :: < if_nameindex_msg > () - 20usize] ; ["Alignment of if_nameindex_msg"] [:: std :: mem :: align_of :: < if_nameindex_msg > () - 4usize] ; ["Offset of field: if_nameindex_msg::if_index"] [:: std :: mem :: offset_of ! (if_nameindex_msg , if_index) - 0usize] ; ["Offset of field: if_nameindex_msg::if_name"] [:: std :: mem :: offset_of ! (if_nameindex_msg , if_name) - 4usize] ; } ; # [repr (C)] # [derive (Copy , Clone)] pub struct ifg_req { pub ifgrq_ifgrqu : ifg_req__bindgen_ty_1 , } # [repr (C)] # [derive (Copy , Clone)] pub union ifg_req__bindgen_ty_1 { pub ifgrqu_group : [:: std :: os :: raw :: c_char ; 16usize] , pub ifgrqu_member : [:: std :: os :: raw :: c_char ; 16usize] , } # [allow (clippy :: unnecessary_operation , clippy :: identity_op)] const _ : () = { ["Size of ifg_req__bindgen_ty_1"] [:: std :: mem :: size_of :: < ifg_req__bindgen_ty_1 > () - 16usize] ; ["Alignment of ifg_req__bindgen_ty_1"] [:: std :: mem :: align_of :: < ifg_req__bindgen_ty_1 > () - 1usize] ; ["Offset of field: ifg_req__bindgen_ty_1::ifgrqu_group"] [:: std :: mem :: offset_of ! (ifg_req__bindgen_ty_1 , ifgrqu_group) - 0usize] ; ["Offset of field: ifg_req__bindgen_ty_1::ifgrqu_member"] [:: std :: mem :: offset_of ! (ifg_req__bindgen_ty_1 , ifgrqu_member) - 0usize] ; } ; # [allow (clippy :: unnecessary_operation , clippy :: identity_op)] const _ : () = { ["Size of ifg_req"] [:: std :: mem :: size_of :: < ifg_req > () - 16usize] ; ["Alignment of ifg_req"] [:: std :: mem :: align_of :: < ifg_req > () - 1usize] ; ["Offset of field: ifg_req::ifgrq_ifgrqu"] [:: std :: mem :: offset_of ! (ifg_req , ifgrq_ifgrqu) - 0usize] ; } ; # [repr (C)] # [derive (Debug , Copy , Clone)] pub struct ifg_attrib { pub ifg_carp_demoted : :: std :: os :: raw :: c_int , } # [allow (clippy :: unnecessary_operation , clippy :: identity_op)] const _ : () = { ["Size of ifg_attrib"] [:: std :: mem :: size_of :: < ifg_attrib > () - 4usize] ; ["Alignment of ifg_attrib"] [:: std :: mem :: align_of :: < ifg_attrib > () - 4usize] ; ["Offset of field: ifg_attrib::ifg_carp_demoted"] [:: std :: mem :: offset_of ! (ifg_attrib , ifg_carp_demoted) - 0usize] ; } ; # [repr (C)] # [derive (Copy , Clone)] pub struct ifgroupreq { pub ifgr_name : [:: std :: os :: raw :: c_char ; 16usize] , pub ifgr_len : u_int , pub ifgr_ifgru : ifgroupreq__bindgen_ty_1 , } # [repr (C)] # [derive (Copy , Clone)] pub union ifgroupreq__bindgen_ty_1 { pub ifgru_group : [:: std :: os :: raw :: c_char ; 16usize] , pub ifgru_groups : * mut ifg_req , pub ifgru_attrib : ifg_attrib , } # [allow (clippy :: unnecessary_operation , clippy :: identity_op)] const _ : () = { ["Size of ifgroupreq__bindgen_ty_1"] [:: std :: mem :: size_of :: < ifgroupreq__bindgen_ty_1 > () - 16usize] ; ["Alignment of ifgroupreq__bindgen_ty_1"] [:: std :: mem :: align_of :: < ifgroupreq__bindgen_ty_1 > () - 8usize] ; ["Offset of field: ifgroupreq__bindgen_ty_1::ifgru_group"] [:: std :: mem :: offset_of ! (ifgroupreq__bindgen_ty_1 , ifgru_group) - 0usize] ; ["Offset of field: ifgroupreq__bindgen_ty_1::ifgru_groups"] [:: std :: mem :: offset_of ! (ifgroupreq__bindgen_ty_1 , ifgru_groups) - 0usize] ; ["Offset of field: ifgroupreq__bindgen_ty_1::ifgru_attrib"] [:: std :: mem :: offset_of ! (ifgroupreq__bindgen_ty_1 , ifgru_attrib) - 0usize] ; } ; # [allow (clippy :: unnecessary_operation , clippy :: identity_op)] const _ : () = { ["Size of ifgroupreq"] [:: std :: mem :: size_of :: < ifgroupreq > () - 40usize] ; ["Alignment of ifgroupreq"] [:: std :: mem :: align_of :: < ifgroupreq > () - 8usize] ; ["Offset of field: ifgroupreq::ifgr_name"] [:: std :: mem :: offset_of ! (ifgroupreq , ifgr_name) - 0usize] ; ["Offset of field: ifgroupreq::ifgr_len"] [:: std :: mem :: offset_of ! (ifgroupreq , ifgr_len) - 16usize] ; ["Offset of field: ifgroupreq::ifgr_ifgru"] [:: std :: mem :: offset_of ! (ifgroupreq , ifgr_ifgru) - 24usize] ; } ; # [repr (C)] # [derive (Copy , Clone)] pub struct ifreq { pub ifr_name : [:: std :: os :: raw :: c_char ; 16usize] , pub ifr_ifru : ifreq__bindgen_ty_1 , } # [repr (C)] # [derive (Copy , Clone)] pub union ifreq__bindgen_ty_1 { pub ifru_addr : sockaddr , pub ifru_dstaddr : sockaddr , pub ifru_broadaddr : sockaddr , pub ifru_flags : :: std :: os :: raw :: c_short , pub ifru_metric : :: std :: os :: raw :: c_int , pub ifru_vnetid : i64 , pub ifru_media : u64 , pub ifru_data : caddr_t , pub ifru_index : :: std :: os :: raw :: c_uint , } # [allow (clippy :: unnecessary_operation , clippy :: identity_op)] const _ : () = { ["Size of ifreq__bindgen_ty_1"] [:: std :: mem :: size_of :: < ifreq__bindgen_ty_1 > () - 16usize] ; ["Alignment of ifreq__bindgen_ty_1"] [:: std :: mem :: align_of :: < ifreq__bindgen_ty_1 > () - 8usize] ; ["Offset of field: ifreq__bindgen_ty_1::ifru_addr"] [:: std :: mem :: offset_of ! (ifreq__bindgen_ty_1 , ifru_addr) - 0usize] ; ["Offset of field: ifreq__bindgen_ty_1::ifru_dstaddr"] [:: std :: mem :: offset_of ! (ifreq__bindgen_ty_1 , ifru_dstaddr) - 0usize] ; ["Offset of field: ifreq__bindgen_ty_1::ifru_broadaddr"] [:: std :: mem :: offset_of ! (ifreq__bindgen_ty_1 , ifru_broadaddr) - 0usize] ; ["Offset of field: ifreq__bindgen_ty_1::ifru_flags"] [:: std :: mem :: offset_of ! (ifreq__bindgen_ty_1 , ifru_flags) - 0usize] ; ["Offset of field: ifreq__bindgen_ty_1::ifru_metric"] [:: std :: mem :: offset_of ! (ifreq__bindgen_ty_1 , ifru_metric) - 0usize] ; ["Offset of field: ifreq__bindgen_ty_1::ifru_vnetid"] [:: std :: mem :: offset_of ! (ifreq__bindgen_ty_1 , ifru_vnetid) - 0usize] ; ["Offset of field: ifreq__bindgen_ty_1::ifru_media"] [:: std :: mem :: offset_of ! (ifreq__bindgen_ty_1 , ifru_media) - 0usize] ; ["Offset of field: ifreq__bindgen_ty_1::ifru_data"] [:: std :: mem :: offset_of ! (ifreq__bindgen_ty_1 , ifru_data) - 0usize] ; ["Offset of field: ifreq__bindgen_ty_1::ifru_index"] [:: std :: mem :: offset_of ! (ifreq__bindgen_ty_1 , ifru_index) - 0usize] ; } ; # [allow (clippy :: unnecessary_operation , clippy :: identity_op)] const _ : () = { ["Size of ifreq"] [:: std :: mem :: size_of :: < ifreq > () - 32usize] ; ["Alignment of ifreq"] [:: std :: mem :: align_of :: < ifreq > () - 8usize] ; ["Offset of field: ifreq::ifr_name"] [:: std :: mem :: offset_of ! (ifreq , ifr_name) - 0usize] ; ["Offset of field: ifreq::ifr_ifru"] [:: std :: mem :: offset_of ! (ifreq , ifr_ifru) - 16usize] ; } ; # [repr (C)] # [derive (Copy , Clone)] pub struct ifaliasreq { pub ifra_name : [:: std :: os :: raw :: c_char ; 16usize] , pub ifra_ifrau : ifaliasreq__bindgen_ty_1 , pub ifra_dstaddr : sockaddr , pub ifra_mask : sockaddr , } # [repr (C)] # [derive (Copy , Clone)] pub union ifaliasreq__bindgen_ty_1 { pub ifrau_addr : sockaddr , pub ifrau_align : :: std :: os :: raw :: c_int , } # [allow (clippy :: unnecessary_operation , clippy :: identity_op)] const _ : () = { ["Size of ifaliasreq__bindgen_ty_1"] [:: std :: mem :: size_of :: < ifaliasreq__bindgen_ty_1 > () - 16usize] ; ["Alignment of ifaliasreq__bindgen_ty_1"] [:: std :: mem :: align_of :: < ifaliasreq__bindgen_ty_1 > () - 4usize] ; ["Offset of field: ifaliasreq__bindgen_ty_1::ifrau_addr"] [:: std :: mem :: offset_of ! (ifaliasreq__bindgen_ty_1 , ifrau_addr) - 0usize] ; ["Offset of field: ifaliasreq__bindgen_ty_1::ifrau_align"] [:: std :: mem :: offset_of ! (ifaliasreq__bindgen_ty_1 , ifrau_align) - 0usize] ; } ; # [allow (clippy :: unnecessary_operation , clippy :: identity_op)] const _ : () = { ["Size of ifaliasreq"] [:: std :: mem :: size_of :: < ifaliasreq > () - 64usize] ; ["Alignment of ifaliasreq"] [:: std :: mem :: align_of :: < ifaliasreq > () - 4usize] ; ["Offset of field: ifaliasreq::ifra_name"] [:: std :: mem :: offset_of ! (ifaliasreq , ifra_name) - 0usize] ; ["Offset of field: ifaliasreq::ifra_ifrau"] [:: std :: mem :: offset_of ! (ifaliasreq , ifra_ifrau) - 16usize] ; ["Offset of field: ifaliasreq::ifra_dstaddr"] [:: std :: mem :: offset_of ! (ifaliasreq , ifra_dstaddr) - 32usize] ; ["Offset of field: ifaliasreq::ifra_mask"] [:: std :: mem :: offset_of ! (ifaliasreq , ifra_mask) - 48usize] ; } ; # [repr (C)] # [derive (Debug , Copy , Clone)] pub struct ifmediareq { pub ifm_name : [:: std :: os :: raw :: c_char ; 16usize] , pub ifm_current : u64 , pub ifm_mask : u64 , pub ifm_status : u64 , pub ifm_active : u64 , pub ifm_count : :: std :: os :: raw :: c_int , pub ifm_ulist : * mut u64 , } # [allow (clippy :: unnecessary_operation , clippy :: identity_op)] const _ : () = { ["Size of ifmediareq"] [:: std :: mem :: size_of :: < ifmediareq > () - 64usize] ; ["Alignment of ifmediareq"] [:: std :: mem :: align_of :: < ifmediareq > () - 8usize] ; ["Offset of field: ifmediareq::ifm_name"] [:: std :: mem :: offset_of ! (ifmediareq , ifm_name) - 0usize] ; ["Offset of field: ifmediareq::ifm_current"] [:: std :: mem :: offset_of ! (ifmediareq , ifm_current) - 16usize] ; ["Offset of field: ifmediareq::ifm_mask"] [:: std :: mem :: offset_of ! (ifmediareq , ifm_mask) - 24usize] ; ["Offset of field: ifmediareq::ifm_status"] [:: std :: mem :: offset_of ! (ifmediareq , ifm_status) - 32usize] ; ["Offset of field: ifmediareq::ifm_active"] [:: std :: mem :: offset_of ! (ifmediareq , ifm_active) - 40usize] ; ["Offset of field: ifmediareq::ifm_count"] [:: std :: mem :: offset_of ! (ifmediareq , ifm_count) - 48usize] ; ["Offset of field: ifmediareq::ifm_ulist"] [:: std :: mem :: offset_of ! (ifmediareq , ifm_ulist) - 56usize] ; } ; # [repr (C)] # [derive (Debug , Copy , Clone)] pub struct ifkalivereq { pub ikar_name : [:: std :: os :: raw :: c_char ; 16usize] , pub ikar_timeo : :: std :: os :: raw :: c_int , pub ikar_cnt : :: std :: os :: raw :: c_int , } # [allow (clippy :: unnecessary_operation , clippy :: identity_op)] const _ : () = { ["Size of ifkalivereq"] [:: std :: mem :: size_of :: < ifkalivereq > () - 24usize] ; ["Alignment of ifkalivereq"] [:: std :: mem :: align_of :: < ifkalivereq > () - 4usize] ; ["Offset of field: ifkalivereq::ikar_name"] [:: std :: mem :: offset_of ! (ifkalivereq , ikar_name) - 0usize] ; ["Offset of field: ifkalivereq::ikar_timeo"] [:: std :: mem :: offset_of ! (ifkalivereq , ikar_timeo) - 16usize] ; ["Offset of field: ifkalivereq::ikar_cnt"] [:: std :: mem :: offset_of ! (ifkalivereq , ikar_cnt) - 20usize] ; } ; # [repr (C)] # [derive (Copy , Clone)] pub struct ifconf { pub ifc_len : :: std :: os :: raw :: c_int , pub ifc_ifcu : ifconf__bindgen_ty_1 , } # [repr (C)] # [derive (Copy , Clone)] pub union ifconf__bindgen_ty_1 { pub ifcu_buf : caddr_t , pub ifcu_req : * mut ifreq , } # [allow (clippy :: unnecessary_operation , clippy :: identity_op)] const _ : () = { ["Size of ifconf__bindgen_ty_1"] [:: std :: mem :: size_of :: < ifconf__bindgen_ty_1 > () - 8usize] ; ["Alignment of ifconf__bindgen_ty_1"] [:: std :: mem :: align_of :: < ifconf__bindgen_ty_1 > () - 8usize] ; ["Offset of field: ifconf__bindgen_ty_1::ifcu_buf"] [:: std :: mem :: offset_of ! (ifconf__bindgen_ty_1 , ifcu_buf) - 0usize] ; ["Offset of field: ifconf__bindgen_ty_1::ifcu_req"] [:: std :: mem :: offset_of ! (ifconf__bindgen_ty_1 , ifcu_req) - 0usize] ; } ; # [allow (clippy :: unnecessary_operation , clippy :: identity_op)] const _ : () = { ["Size of ifconf"] [:: std :: mem :: size_of :: < ifconf > () - 16usize] ; ["Alignment of ifconf"] [:: std :: mem :: align_of :: < ifconf > () - 8usize] ; ["Offset of field: ifconf::ifc_len"] [:: std :: mem :: offset_of ! (ifconf , ifc_len) - 0usize] ; ["Offset of field: ifconf::ifc_ifcu"] [:: std :: mem :: offset_of ! (ifconf , ifc_ifcu) - 8usize] ; } ; # [repr (C)] # [derive (Debug , Copy , Clone)] pub struct if_laddrreq { pub iflr_name : [:: std :: os :: raw :: c_char ; 16usize] , pub flags : :: std :: os :: raw :: c_uint , pub prefixlen : :: std :: os :: raw :: c_uint , pub addr : sockaddr_storage , pub dstaddr : sockaddr_storage , } # [allow (clippy :: unnecessary_operation , clippy :: identity_op)] const _ : () = { ["Size of if_laddrreq"] [:: std :: mem :: size_of :: < if_laddrreq > () - 536usize] ; ["Alignment of if_laddrreq"] [:: std :: mem :: align_of :: < if_laddrreq > () - 8usize] ; ["Offset of field: if_laddrreq::iflr_name"] [:: std :: mem :: offset_of ! (if_laddrreq , iflr_name) - 0usize] ; ["Offset of field: if_laddrreq::flags"] [:: std :: mem :: offset_of ! (if_laddrreq , flags) - 16usize] ; ["Offset of field: if_laddrreq::prefixlen"] [:: std :: mem :: offset_of ! (if_laddrreq , prefixlen) - 20usize] ; ["Offset of field: if_laddrreq::addr"] [:: std :: mem :: offset_of ! (if_laddrreq , addr) - 24usize] ; ["Offset of field: if_laddrreq::dstaddr"] [:: std :: mem :: offset_of ! (if_laddrreq , dstaddr) - 280usize] ; } ; # [repr (C)] # [derive (Debug , Copy , Clone)] pub struct if_afreq { pub ifar_name : [:: std :: os :: raw :: c_char ; 16usize] , pub ifar_af : sa_family_t , } # [allow (clippy :: unnecessary_operation , clippy :: identity_op)] const _ : () = { ["Size of if_afreq"] [:: std :: mem :: size_of :: < if_afreq > () - 17usize] ; ["Alignment of if_afreq"] [:: std :: mem :: align_of :: < if_afreq > () - 1usize] ; ["Offset of field: if_afreq::ifar_name"] [:: std :: mem :: offset_of ! (if_afreq , ifar_name) - 0usize] ; ["Offset of field: if_afreq::ifar_af"] [:: std :: mem :: offset_of ! (if_afreq , ifar_af) - 16usize] ; } ; # [repr (C)] # [derive (Debug , Copy , Clone)] pub struct if_parent { pub ifp_name : [:: std :: os :: raw :: c_char ; 16usize] , pub ifp_parent : [:: std :: os :: raw :: c_char ; 16usize] , } # [allow (clippy :: unnecessary_operation , clippy :: identity_op)] const _ : () = { ["Size of if_parent"] [:: std :: mem :: size_of :: < if_parent > () - 32usize] ; ["Alignment of if_parent"] [:: std :: mem :: align_of :: < if_parent > () - 1usize] ; ["Offset of field: if_parent::ifp_name"] [:: std :: mem :: offset_of ! (if_parent , ifp_name) - 0usize] ; ["Offset of field: if_parent::ifp_parent"] [:: std :: mem :: offset_of ! (if_parent , ifp_parent) - 16usize] ; } ; # [repr (C)] # [derive (Debug , Copy , Clone)] pub struct if_sffpage { pub sff_ifname : [:: std :: os :: raw :: c_char ; 16usize] , pub sff_addr : u8 , pub sff_page : u8 , pub sff_data : [u8 ; 256usize] , } # [allow (clippy :: unnecessary_operation , clippy :: identity_op)] const _ : () = { ["Size of if_sffpage"] [:: std :: mem :: size_of :: < if_sffpage > () - 274usize] ; ["Alignment of if_sffpage"] [:: std :: mem :: align_of :: < if_sffpage > () - 1usize] ; ["Offset of field: if_sffpage::sff_ifname"] [:: std :: mem :: offset_of ! (if_sffpage , sff_ifname) - 0usize] ; ["Offset of field: if_sffpage::sff_addr"] [:: std :: mem :: offset_of ! (if_sffpage , sff_addr) - 16usize] ; ["Offset of field: if_sffpage::sff_page"] [:: std :: mem :: offset_of ! (if_sffpage , sff_page) - 17usize] ; ["Offset of field: if_sffpage::sff_data"] [:: std :: mem :: offset_of ! (if_sffpage , sff_data) - 18usize] ; } ; # [repr (C)] # [derive (Debug , Copy , Clone)] pub struct arphdr { pub ar_hrd : u_int16_t , pub ar_pro : u_int16_t , pub ar_hln : u_int8_t , pub ar_pln : u_int8_t , pub ar_op : u_int16_t , } # [allow (clippy :: unnecessary_operation , clippy :: identity_op)] const _ : () = { ["Size of arphdr"] [:: std :: mem :: size_of :: < arphdr > () - 8usize] ; ["Alignment of arphdr"] [:: std :: mem :: align_of :: < arphdr > () - 2usize] ; ["Offset of field: arphdr::ar_hrd"] [:: std :: mem :: offset_of ! (arphdr , ar_hrd) - 0usize] ; ["Offset of field: arphdr::ar_pro"] [:: std :: mem :: offset_of ! (arphdr , ar_pro) - 2usize] ; ["Offset of field: arphdr::ar_hln"] [:: std :: mem :: offset_of ! (arphdr , ar_hln) - 4usize] ; ["Offset of field: arphdr::ar_pln"] [:: std :: mem :: offset_of ! (arphdr , ar_pln) - 5usize] ; ["Offset of field: arphdr::ar_op"] [:: std :: mem :: offset_of ! (arphdr , ar_op) - 6usize] ; } ; pub type __builtin_va_list = [__va_list_tag ; 1usize] ; # [repr (C)] # [derive (Debug , Copy , Clone)] pub struct __va_list_tag { pub gp_offset : :: std :: os :: raw :: c_uint , pub fp_offset : :: std :: os :: raw :: c_uint , pub overflow_arg_area : * mut :: std :: os :: raw :: c_void , pub reg_save_area : * mut :: std :: os :: raw :: c_void , } # [allow (clippy :: unnecessary_operation , clippy :: identity_op)] const _ : () = { ["Size of __va_list_tag"] [:: std :: mem :: size_of :: < __va_list_tag > () - 24usize] ; ["Alignment of __va_list_tag"] [:: std :: mem :: align_of :: < __va_list_tag > () - 8usize] ; ["Offset of field: __va_list_tag::gp_offset"] [:: std :: mem :: offset_of ! (__va_list_tag , gp_offset) - 0usize] ; ["Offset of field: __va_list_tag::fp_offset"] [:: std :: mem :: offset_of ! (__va_list_tag , fp_offset) - 4usize] ; ["Offset of field: __va_list_tag::overflow_arg_area"] [:: std :: mem :: offset_of ! (__va_list_tag , overflow_arg_area) - 8usize] ; ["Offset of field: __va_list_tag::reg_save_area"] [:: std :: mem :: offset_of ! (__va_list_tag , reg_save_area) - 16usize] ; } ; # [repr (C)] # [derive (Debug , Copy , Clone)] pub struct fxsave64 { pub _address : u8 , } # [repr (C)] # [derive (Debug , Copy , Clone)] pub struct ifaddr { pub _address : u8 , } # [repr (C)] # [derive (Debug , Copy , Clone)] pub struct rtentry { pub _address : u8 , }